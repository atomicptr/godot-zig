// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Script = @import("script.zig").Script;

// method bindings
var mbind_get_class_documentation: ?*c_api.godot_method_bind = null;
var mbind_get_class_name: ?*c_api.godot_method_bind = null;
var mbind_get_library: ?*c_api.godot_method_bind = null;
var mbind_get_method_documentation: ?*c_api.godot_method_bind = null;
var mbind_get_property_documentation: ?*c_api.godot_method_bind = null;
var mbind_get_script_class_icon_path: ?*c_api.godot_method_bind = null;
var mbind_get_script_class_name: ?*c_api.godot_method_bind = null;
var mbind_get_signal_documentation: ?*c_api.godot_method_bind = null;
var mbind_new: ?*c_api.godot_method_bind = null;
var mbind_set_class_name: ?*c_api.godot_method_bind = null;
var mbind_set_library: ?*c_api.godot_method_bind = null;
var mbind_set_script_class_icon_path: ?*c_api.godot_method_bind = null;
var mbind_set_script_class_name: ?*c_api.godot_method_bind = null;
var mbind_native_script_constructor: ?fn () ?*c_api.godot_object = null;

pub const NativeScript = struct {
    const Self = @This();
    const BaseClass = Script;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_native_script_constructor == null) {
            mbind_native_script_constructor = try api.createConstructor("NativeScript");
        }
        return api.createObject(Self, mbind_native_script_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getClassDocumentation(self: *const Self) !godot.String {
        if (mbind_get_class_documentation == null) {
            mbind_get_class_documentation = try api.createMethod("NativeScript", "get_class_documentation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_class_documentation, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getClassName(self: *const Self) !godot.String {
        if (mbind_get_class_name == null) {
            mbind_get_class_name = try api.createMethod("NativeScript", "get_class_name");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_class_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getLibrary(self: *const Self) !godot.GDNativeLibrary {
        if (mbind_get_library == null) {
            mbind_get_library = try api.createMethod("NativeScript", "get_library");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_library, base, cargs, result);
        return @ptrCast(*godot.GDNativeLibrary, @alignCast(@alignOf(&godot.GDNativeLibrary), result)).*;
    }

    pub fn getMethodDocumentation(self: *const Self, arg_method: *const godot.String) !godot.String {
        if (mbind_get_method_documentation == null) {
            mbind_get_method_documentation = try api.createMethod("NativeScript", "get_method_documentation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_method),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_method_documentation, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getPropertyDocumentation(self: *const Self, arg_path: *const godot.String) !godot.String {
        if (mbind_get_property_documentation == null) {
            mbind_get_property_documentation = try api.createMethod("NativeScript", "get_property_documentation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_property_documentation, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getScriptClassIconPath(self: *const Self) !godot.String {
        if (mbind_get_script_class_icon_path == null) {
            mbind_get_script_class_icon_path = try api.createMethod("NativeScript", "get_script_class_icon_path");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_script_class_icon_path, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getScriptClassName(self: *const Self) !godot.String {
        if (mbind_get_script_class_name == null) {
            mbind_get_script_class_name = try api.createMethod("NativeScript", "get_script_class_name");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_script_class_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getSignalDocumentation(self: *const Self, arg_signal_name: *const godot.String) !godot.String {
        if (mbind_get_signal_documentation == null) {
            mbind_get_signal_documentation = try api.createMethod("NativeScript", "get_signal_documentation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_signal_documentation, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn new(self: *const Self) !godot.Variant {
        if (mbind_new == null) {
            mbind_new = try api.createMethod("NativeScript", "new");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_new, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn setClassName(self: *const Self, arg_class_name: *const godot.String) !void {
        if (mbind_set_class_name == null) {
            mbind_set_class_name = try api.createMethod("NativeScript", "set_class_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_class_name, base, cargs, result);
    }

    pub fn setLibrary(self: *const Self, arg_library: *const godot.GDNativeLibrary) !void {
        if (mbind_set_library == null) {
            mbind_set_library = try api.createMethod("NativeScript", "set_library");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_library),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_library, base, cargs, result);
    }

    pub fn setScriptClassIconPath(self: *const Self, arg_icon_path: *const godot.String) !void {
        if (mbind_set_script_class_icon_path == null) {
            mbind_set_script_class_icon_path = try api.createMethod("NativeScript", "set_script_class_icon_path");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_icon_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_script_class_icon_path, base, cargs, result);
    }

    pub fn setScriptClassName(self: *const Self, arg_class_name: *const godot.String) !void {
        if (mbind_set_script_class_name == null) {
            mbind_set_script_class_name = try api.createMethod("NativeScript", "set_script_class_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_script_class_name, base, cargs, result);
    }
};