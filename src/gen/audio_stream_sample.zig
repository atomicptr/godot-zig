// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_data: ?*c_api.godot_method_bind = null;
var mbind_get_format: ?*c_api.godot_method_bind = null;
var mbind_get_loop_begin: ?*c_api.godot_method_bind = null;
var mbind_get_loop_end: ?*c_api.godot_method_bind = null;
var mbind_get_loop_mode: ?*c_api.godot_method_bind = null;
var mbind_get_mix_rate: ?*c_api.godot_method_bind = null;
var mbind_is_stereo: ?*c_api.godot_method_bind = null;
var mbind_save_to_wav: ?*c_api.godot_method_bind = null;
var mbind_set_data: ?*c_api.godot_method_bind = null;
var mbind_set_format: ?*c_api.godot_method_bind = null;
var mbind_set_loop_begin: ?*c_api.godot_method_bind = null;
var mbind_set_loop_end: ?*c_api.godot_method_bind = null;
var mbind_set_loop_mode: ?*c_api.godot_method_bind = null;
var mbind_set_mix_rate: ?*c_api.godot_method_bind = null;
var mbind_set_stereo: ?*c_api.godot_method_bind = null;
var mbind_audio_stream_sample_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioStreamSample = struct {
    const Self = @This();
    pub const BaseClass = godot.AudioStream;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_stream_sample_constructor == null) {
            mbind_audio_stream_sample_constructor = try api.createConstructor("AudioStreamSample");
        }
        return api.createObject(Self, mbind_audio_stream_sample_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getData(self: *const Self) !godot.PoolByteArray {
        if (mbind_get_data == null) {
            mbind_get_data = try api.createMethod("AudioStreamSample", "get_data");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_data, base, cargs, result);
        return @ptrCast(*godot.PoolByteArray, @alignCast(@alignOf(&godot.PoolByteArray), result)).*;
    }

    pub fn getFormat(self: *const Self) !i32 {
        if (mbind_get_format == null) {
            mbind_get_format = try api.createMethod("AudioStreamSample", "get_format");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_format, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLoopBegin(self: *const Self) !i32 {
        if (mbind_get_loop_begin == null) {
            mbind_get_loop_begin = try api.createMethod("AudioStreamSample", "get_loop_begin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_loop_begin, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLoopEnd(self: *const Self) !i32 {
        if (mbind_get_loop_end == null) {
            mbind_get_loop_end = try api.createMethod("AudioStreamSample", "get_loop_end");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_loop_end, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLoopMode(self: *const Self) !i32 {
        if (mbind_get_loop_mode == null) {
            mbind_get_loop_mode = try api.createMethod("AudioStreamSample", "get_loop_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_loop_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMixRate(self: *const Self) !i32 {
        if (mbind_get_mix_rate == null) {
            mbind_get_mix_rate = try api.createMethod("AudioStreamSample", "get_mix_rate");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mix_rate, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isStereo(self: *const Self) !bool {
        if (mbind_is_stereo == null) {
            mbind_is_stereo = try api.createMethod("AudioStreamSample", "is_stereo");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_stereo, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn saveToWav(self: *const Self, arg_path: *const godot.String) !i32 {
        if (mbind_save_to_wav == null) {
            mbind_save_to_wav = try api.createMethod("AudioStreamSample", "save_to_wav");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_save_to_wav, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setData(self: *const Self, arg_data: *const godot.PoolByteArray) !void {
        if (mbind_set_data == null) {
            mbind_set_data = try api.createMethod("AudioStreamSample", "set_data");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_data),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_data, base, cargs, result);
    }

    pub fn setFormat(self: *const Self, arg_format: i32) !void {
        if (mbind_set_format == null) {
            mbind_set_format = try api.createMethod("AudioStreamSample", "set_format");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_format),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_format, base, cargs, result);
    }

    pub fn setLoopBegin(self: *const Self, arg_loop_begin: i32) !void {
        if (mbind_set_loop_begin == null) {
            mbind_set_loop_begin = try api.createMethod("AudioStreamSample", "set_loop_begin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_loop_begin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_loop_begin, base, cargs, result);
    }

    pub fn setLoopEnd(self: *const Self, arg_loop_end: i32) !void {
        if (mbind_set_loop_end == null) {
            mbind_set_loop_end = try api.createMethod("AudioStreamSample", "set_loop_end");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_loop_end),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_loop_end, base, cargs, result);
    }

    pub fn setLoopMode(self: *const Self, arg_loop_mode: i32) !void {
        if (mbind_set_loop_mode == null) {
            mbind_set_loop_mode = try api.createMethod("AudioStreamSample", "set_loop_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_loop_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_loop_mode, base, cargs, result);
    }

    pub fn setMixRate(self: *const Self, arg_mix_rate: i32) !void {
        if (mbind_set_mix_rate == null) {
            mbind_set_mix_rate = try api.createMethod("AudioStreamSample", "set_mix_rate");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mix_rate),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mix_rate, base, cargs, result);
    }

    pub fn setStereo(self: *const Self, arg_stereo: bool) !void {
        if (mbind_set_stereo == null) {
            mbind_set_stereo = try api.createMethod("AudioStreamSample", "set_stereo");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_stereo),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_stereo, base, cargs, result);
    }
};