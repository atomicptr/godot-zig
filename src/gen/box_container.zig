// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Container = @import("container.zig").Container;

// method bindings
var mbind_add_spacer: ?*c_api.godot_method_bind = null;
var mbind_get_alignment: ?*c_api.godot_method_bind = null;
var mbind_set_alignment: ?*c_api.godot_method_bind = null;
var mbind_box_container_constructor: ?fn () ?*c_api.godot_object = null;

pub const BoxContainer = struct {
    const Self = @This();
    const BaseClass = Container;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_box_container_constructor == null) {
            mbind_box_container_constructor = try api.createConstructor("BoxContainer");
        }
        return api.createObject(Self, mbind_box_container_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addSpacer(self: *const Self, arg_begin: bool) !void {
        if (mbind_add_spacer == null) {
            mbind_add_spacer = try api.createMethod("BoxContainer", "add_spacer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_begin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_spacer, base, cargs, result);
    }

    pub fn getAlignment(self: *const Self) !i32 {
        if (mbind_get_alignment == null) {
            mbind_get_alignment = try api.createMethod("BoxContainer", "get_alignment");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_alignment, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setAlignment(self: *const Self, arg_alignment: i32) !void {
        if (mbind_set_alignment == null) {
            mbind_set_alignment = try api.createMethod("BoxContainer", "set_alignment");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_alignment),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_alignment, base, cargs, result);
    }
};