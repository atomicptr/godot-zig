// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node = @import("node.zig").Node;

// method bindings
var mbind_add_resource: ?*c_api.godot_method_bind = null;
var mbind_get_resource: ?*c_api.godot_method_bind = null;
var mbind_get_resource_list: ?*c_api.godot_method_bind = null;
var mbind_has_resource: ?*c_api.godot_method_bind = null;
var mbind_remove_resource: ?*c_api.godot_method_bind = null;
var mbind_rename_resource: ?*c_api.godot_method_bind = null;
var mbind_resource_preloader_constructor: ?fn () ?*c_api.godot_object = null;

pub const ResourcePreloader = struct {
    const Self = @This();
    const BaseClass = Node;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_resource_preloader_constructor == null) {
            mbind_resource_preloader_constructor = try api.createConstructor("ResourcePreloader");
        }
        return api.createObject(Self, mbind_resource_preloader_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addResource(self: *const Self, arg_name: *const godot.String, arg_resource: *const godot.Resource) !void {
        if (mbind_add_resource == null) {
            mbind_add_resource = try api.createMethod("ResourcePreloader", "add_resource");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_resource),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_resource, base, cargs, result);
    }

    pub fn getResource(self: *const Self, arg_name: *const godot.String) !godot.Resource {
        if (mbind_get_resource == null) {
            mbind_get_resource = try api.createMethod("ResourcePreloader", "get_resource");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_resource, base, cargs, result);
        return @ptrCast(*godot.Resource, @alignCast(@alignOf(&godot.Resource), result)).*;
    }

    pub fn getResourceList(self: *const Self) !godot.PoolStringArray {
        if (mbind_get_resource_list == null) {
            mbind_get_resource_list = try api.createMethod("ResourcePreloader", "get_resource_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_resource_list, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn hasResource(self: *const Self, arg_name: *const godot.String) !bool {
        if (mbind_has_resource == null) {
            mbind_has_resource = try api.createMethod("ResourcePreloader", "has_resource");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_resource, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn removeResource(self: *const Self, arg_name: *const godot.String) !void {
        if (mbind_remove_resource == null) {
            mbind_remove_resource = try api.createMethod("ResourcePreloader", "remove_resource");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_resource, base, cargs, result);
    }

    pub fn renameResource(self: *const Self, arg_name: *const godot.String, arg_newname: *const godot.String) !void {
        if (mbind_rename_resource == null) {
            mbind_rename_resource = try api.createMethod("ResourcePreloader", "rename_resource");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_newname),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_rename_resource, base, cargs, result);
    }
};