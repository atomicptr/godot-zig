// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_get_diffuse_factor: ?*c_api.godot_method_bind = null;
var mbind_get_diffuse_img: ?*c_api.godot_method_bind = null;
var mbind_get_gloss_factor: ?*c_api.godot_method_bind = null;
var mbind_get_spec_gloss_img: ?*c_api.godot_method_bind = null;
var mbind_get_specular_factor: ?*c_api.godot_method_bind = null;
var mbind_set_diffuse_factor: ?*c_api.godot_method_bind = null;
var mbind_set_diffuse_img: ?*c_api.godot_method_bind = null;
var mbind_set_gloss_factor: ?*c_api.godot_method_bind = null;
var mbind_set_spec_gloss_img: ?*c_api.godot_method_bind = null;
var mbind_set_specular_factor: ?*c_api.godot_method_bind = null;
var mbind_gltfspec_gloss_constructor: ?fn () ?*c_api.godot_object = null;

pub const GLTFSpecGloss = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_gltfspec_gloss_constructor == null) {
            mbind_gltfspec_gloss_constructor = try api.createConstructor("GLTFSpecGloss");
        }
        return api.createObject(Self, mbind_gltfspec_gloss_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getDiffuseFactor(self: *const Self) !godot.Color {
        if (mbind_get_diffuse_factor == null) {
            mbind_get_diffuse_factor = try api.createMethod("GLTFSpecGloss", "get_diffuse_factor");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_diffuse_factor, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getDiffuseImg(self: *const Self) !godot.Image {
        if (mbind_get_diffuse_img == null) {
            mbind_get_diffuse_img = try api.createMethod("GLTFSpecGloss", "get_diffuse_img");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_diffuse_img, base, cargs, result);
        return @ptrCast(*godot.Image, @alignCast(@alignOf(&godot.Image), result)).*;
    }

    pub fn getGlossFactor(self: *const Self) !f32 {
        if (mbind_get_gloss_factor == null) {
            mbind_get_gloss_factor = try api.createMethod("GLTFSpecGloss", "get_gloss_factor");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_gloss_factor, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSpecGlossImg(self: *const Self) !godot.Image {
        if (mbind_get_spec_gloss_img == null) {
            mbind_get_spec_gloss_img = try api.createMethod("GLTFSpecGloss", "get_spec_gloss_img");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_spec_gloss_img, base, cargs, result);
        return @ptrCast(*godot.Image, @alignCast(@alignOf(&godot.Image), result)).*;
    }

    pub fn getSpecularFactor(self: *const Self) !godot.Color {
        if (mbind_get_specular_factor == null) {
            mbind_get_specular_factor = try api.createMethod("GLTFSpecGloss", "get_specular_factor");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_specular_factor, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn setDiffuseFactor(self: *const Self, arg_diffuse_factor: *const godot.Color) !void {
        if (mbind_set_diffuse_factor == null) {
            mbind_set_diffuse_factor = try api.createMethod("GLTFSpecGloss", "set_diffuse_factor");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_diffuse_factor),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_diffuse_factor, base, cargs, result);
    }

    pub fn setDiffuseImg(self: *const Self, arg_diffuse_img: *const godot.Image) !void {
        if (mbind_set_diffuse_img == null) {
            mbind_set_diffuse_img = try api.createMethod("GLTFSpecGloss", "set_diffuse_img");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_diffuse_img),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_diffuse_img, base, cargs, result);
    }

    pub fn setGlossFactor(self: *const Self, arg_gloss_factor: f32) !void {
        if (mbind_set_gloss_factor == null) {
            mbind_set_gloss_factor = try api.createMethod("GLTFSpecGloss", "set_gloss_factor");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_gloss_factor),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_gloss_factor, base, cargs, result);
    }

    pub fn setSpecGlossImg(self: *const Self, arg_spec_gloss_img: *const godot.Image) !void {
        if (mbind_set_spec_gloss_img == null) {
            mbind_set_spec_gloss_img = try api.createMethod("GLTFSpecGloss", "set_spec_gloss_img");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_spec_gloss_img),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_spec_gloss_img, base, cargs, result);
    }

    pub fn setSpecularFactor(self: *const Self, arg_specular_factor: *const godot.Color) !void {
        if (mbind_set_specular_factor == null) {
            mbind_set_specular_factor = try api.createMethod("GLTFSpecGloss", "set_specular_factor");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_specular_factor),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_specular_factor, base, cargs, result);
    }
};