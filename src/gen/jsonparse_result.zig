// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_get_error: ?*c_api.godot_method_bind = null;
var mbind_get_error_line: ?*c_api.godot_method_bind = null;
var mbind_get_error_string: ?*c_api.godot_method_bind = null;
var mbind_get_result: ?*c_api.godot_method_bind = null;
var mbind_set_error: ?*c_api.godot_method_bind = null;
var mbind_set_error_line: ?*c_api.godot_method_bind = null;
var mbind_set_error_string: ?*c_api.godot_method_bind = null;
var mbind_set_result: ?*c_api.godot_method_bind = null;
var mbind_jsonparse_result_constructor: ?fn () ?*c_api.godot_object = null;

pub const JSONParseResult = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_jsonparse_result_constructor == null) {
            mbind_jsonparse_result_constructor = try api.createConstructor("JSONParseResult");
        }
        return api.createObject(Self, mbind_jsonparse_result_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getError(self: *const Self) !i32 {
        if (mbind_get_error == null) {
            mbind_get_error = try api.createMethod("JSONParseResult", "get_error");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_error, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getErrorLine(self: *const Self) !i32 {
        if (mbind_get_error_line == null) {
            mbind_get_error_line = try api.createMethod("JSONParseResult", "get_error_line");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_error_line, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getErrorString(self: *const Self) !godot.String {
        if (mbind_get_error_string == null) {
            mbind_get_error_string = try api.createMethod("JSONParseResult", "get_error_string");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_error_string, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getResult(self: *const Self) !godot.Variant {
        if (mbind_get_result == null) {
            mbind_get_result = try api.createMethod("JSONParseResult", "get_result");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_result, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn setError(self: *const Self, arg_error: i32) !void {
        if (mbind_set_error == null) {
            mbind_set_error = try api.createMethod("JSONParseResult", "set_error");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_error),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_error, base, cargs, result);
    }

    pub fn setErrorLine(self: *const Self, arg_error_line: i32) !void {
        if (mbind_set_error_line == null) {
            mbind_set_error_line = try api.createMethod("JSONParseResult", "set_error_line");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_error_line),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_error_line, base, cargs, result);
    }

    pub fn setErrorString(self: *const Self, arg_error_string: *const godot.String) !void {
        if (mbind_set_error_string == null) {
            mbind_set_error_string = try api.createMethod("JSONParseResult", "set_error_string");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_error_string),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_error_string, base, cargs, result);
    }

    pub fn setResult(self: *const Self, arg_result: *const godot.Variant) !void {
        if (mbind_set_result == null) {
            mbind_set_result = try api.createMethod("JSONParseResult", "set_result");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_result),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_result, base, cargs, result);
    }
};