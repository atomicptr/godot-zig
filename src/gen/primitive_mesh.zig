// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Mesh = @import("mesh.zig").Mesh;

// method bindings
var mbind_get_custom_aabb: ?*c_api.godot_method_bind = null;
var mbind_get_flip_faces: ?*c_api.godot_method_bind = null;
var mbind_get_material: ?*c_api.godot_method_bind = null;
var mbind_get_mesh_arrays: ?*c_api.godot_method_bind = null;
var mbind_set_custom_aabb: ?*c_api.godot_method_bind = null;
var mbind_set_flip_faces: ?*c_api.godot_method_bind = null;
var mbind_set_material: ?*c_api.godot_method_bind = null;
var mbind_primitive_mesh_constructor: ?fn () ?*c_api.godot_object = null;

pub const PrimitiveMesh = struct {
    const Self = @This();
    const BaseClass = Mesh;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_primitive_mesh_constructor == null) {
            mbind_primitive_mesh_constructor = try api.createConstructor("PrimitiveMesh");
        }
        return api.createObject(Self, mbind_primitive_mesh_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getCustomAabb(self: *const Self) !godot.AABB {
        if (mbind_get_custom_aabb == null) {
            mbind_get_custom_aabb = try api.createMethod("PrimitiveMesh", "get_custom_aabb");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_custom_aabb, base, cargs, result);
        return @ptrCast(*godot.AABB, @alignCast(@alignOf(&godot.AABB), result)).*;
    }

    pub fn getFlipFaces(self: *const Self) !bool {
        if (mbind_get_flip_faces == null) {
            mbind_get_flip_faces = try api.createMethod("PrimitiveMesh", "get_flip_faces");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_flip_faces, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getMaterial(self: *const Self) !godot.Material {
        if (mbind_get_material == null) {
            mbind_get_material = try api.createMethod("PrimitiveMesh", "get_material");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_material, base, cargs, result);
        return @ptrCast(*godot.Material, @alignCast(@alignOf(&godot.Material), result)).*;
    }

    pub fn getMeshArrays(self: *const Self) !godot.Array {
        if (mbind_get_mesh_arrays == null) {
            mbind_get_mesh_arrays = try api.createMethod("PrimitiveMesh", "get_mesh_arrays");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mesh_arrays, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn setCustomAabb(self: *const Self, arg_aabb: *const godot.AABB) !void {
        if (mbind_set_custom_aabb == null) {
            mbind_set_custom_aabb = try api.createMethod("PrimitiveMesh", "set_custom_aabb");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_aabb),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_aabb, base, cargs, result);
    }

    pub fn setFlipFaces(self: *const Self, arg_flip_faces: bool) !void {
        if (mbind_set_flip_faces == null) {
            mbind_set_flip_faces = try api.createMethod("PrimitiveMesh", "set_flip_faces");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flip_faces),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_flip_faces, base, cargs, result);
    }

    pub fn setMaterial(self: *const Self, arg_material: *const godot.Material) !void {
        if (mbind_set_material == null) {
            mbind_set_material = try api.createMethod("PrimitiveMesh", "set_material");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_material),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_material, base, cargs, result);
    }
};