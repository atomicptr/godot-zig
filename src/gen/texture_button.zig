// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const BaseButton = @import("base_button.zig").BaseButton;

// method bindings
var mbind_get_click_mask: ?*c_api.godot_method_bind = null;
var mbind_get_disabled_texture: ?*c_api.godot_method_bind = null;
var mbind_get_expand: ?*c_api.godot_method_bind = null;
var mbind_get_focused_texture: ?*c_api.godot_method_bind = null;
var mbind_get_hover_texture: ?*c_api.godot_method_bind = null;
var mbind_get_normal_texture: ?*c_api.godot_method_bind = null;
var mbind_get_pressed_texture: ?*c_api.godot_method_bind = null;
var mbind_get_stretch_mode: ?*c_api.godot_method_bind = null;
var mbind_is_flipped_h: ?*c_api.godot_method_bind = null;
var mbind_is_flipped_v: ?*c_api.godot_method_bind = null;
var mbind_set_click_mask: ?*c_api.godot_method_bind = null;
var mbind_set_disabled_texture: ?*c_api.godot_method_bind = null;
var mbind_set_expand: ?*c_api.godot_method_bind = null;
var mbind_set_flip_h: ?*c_api.godot_method_bind = null;
var mbind_set_flip_v: ?*c_api.godot_method_bind = null;
var mbind_set_focused_texture: ?*c_api.godot_method_bind = null;
var mbind_set_hover_texture: ?*c_api.godot_method_bind = null;
var mbind_set_normal_texture: ?*c_api.godot_method_bind = null;
var mbind_set_pressed_texture: ?*c_api.godot_method_bind = null;
var mbind_set_stretch_mode: ?*c_api.godot_method_bind = null;
var mbind_texture_button_constructor: ?fn () ?*c_api.godot_object = null;

pub const TextureButton = struct {
    const Self = @This();
    const BaseClass = BaseButton;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_texture_button_constructor == null) {
            mbind_texture_button_constructor = try api.createConstructor("TextureButton");
        }
        return api.createObject(Self, mbind_texture_button_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getClickMask(self: *const Self) !godot.BitMap {
        if (mbind_get_click_mask == null) {
            mbind_get_click_mask = try api.createMethod("TextureButton", "get_click_mask");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_click_mask, base, cargs, result);
        return @ptrCast(*godot.BitMap, @alignCast(@alignOf(&godot.BitMap), result)).*;
    }

    pub fn getDisabledTexture(self: *const Self) !godot.Texture {
        if (mbind_get_disabled_texture == null) {
            mbind_get_disabled_texture = try api.createMethod("TextureButton", "get_disabled_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_disabled_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getExpand(self: *const Self) !bool {
        if (mbind_get_expand == null) {
            mbind_get_expand = try api.createMethod("TextureButton", "get_expand");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_expand, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getFocusedTexture(self: *const Self) !godot.Texture {
        if (mbind_get_focused_texture == null) {
            mbind_get_focused_texture = try api.createMethod("TextureButton", "get_focused_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_focused_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getHoverTexture(self: *const Self) !godot.Texture {
        if (mbind_get_hover_texture == null) {
            mbind_get_hover_texture = try api.createMethod("TextureButton", "get_hover_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_hover_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getNormalTexture(self: *const Self) !godot.Texture {
        if (mbind_get_normal_texture == null) {
            mbind_get_normal_texture = try api.createMethod("TextureButton", "get_normal_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_normal_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getPressedTexture(self: *const Self) !godot.Texture {
        if (mbind_get_pressed_texture == null) {
            mbind_get_pressed_texture = try api.createMethod("TextureButton", "get_pressed_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pressed_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getStretchMode(self: *const Self) !i32 {
        if (mbind_get_stretch_mode == null) {
            mbind_get_stretch_mode = try api.createMethod("TextureButton", "get_stretch_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_stretch_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isFlippedH(self: *const Self) !bool {
        if (mbind_is_flipped_h == null) {
            mbind_is_flipped_h = try api.createMethod("TextureButton", "is_flipped_h");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_flipped_h, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFlippedV(self: *const Self) !bool {
        if (mbind_is_flipped_v == null) {
            mbind_is_flipped_v = try api.createMethod("TextureButton", "is_flipped_v");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_flipped_v, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setClickMask(self: *const Self, arg_mask: *const godot.BitMap) !void {
        if (mbind_set_click_mask == null) {
            mbind_set_click_mask = try api.createMethod("TextureButton", "set_click_mask");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mask),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_click_mask, base, cargs, result);
    }

    pub fn setDisabledTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_disabled_texture == null) {
            mbind_set_disabled_texture = try api.createMethod("TextureButton", "set_disabled_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disabled_texture, base, cargs, result);
    }

    pub fn setExpand(self: *const Self, arg_p_expand: bool) !void {
        if (mbind_set_expand == null) {
            mbind_set_expand = try api.createMethod("TextureButton", "set_expand");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_p_expand),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_expand, base, cargs, result);
    }

    pub fn setFlipH(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_flip_h == null) {
            mbind_set_flip_h = try api.createMethod("TextureButton", "set_flip_h");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_flip_h, base, cargs, result);
    }

    pub fn setFlipV(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_flip_v == null) {
            mbind_set_flip_v = try api.createMethod("TextureButton", "set_flip_v");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_flip_v, base, cargs, result);
    }

    pub fn setFocusedTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_focused_texture == null) {
            mbind_set_focused_texture = try api.createMethod("TextureButton", "set_focused_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_focused_texture, base, cargs, result);
    }

    pub fn setHoverTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_hover_texture == null) {
            mbind_set_hover_texture = try api.createMethod("TextureButton", "set_hover_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_hover_texture, base, cargs, result);
    }

    pub fn setNormalTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_normal_texture == null) {
            mbind_set_normal_texture = try api.createMethod("TextureButton", "set_normal_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_normal_texture, base, cargs, result);
    }

    pub fn setPressedTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_pressed_texture == null) {
            mbind_set_pressed_texture = try api.createMethod("TextureButton", "set_pressed_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pressed_texture, base, cargs, result);
    }

    pub fn setStretchMode(self: *const Self, arg_p_mode: i32) !void {
        if (mbind_set_stretch_mode == null) {
            mbind_set_stretch_mode = try api.createMethod("TextureButton", "set_stretch_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_p_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_stretch_mode, base, cargs, result);
    }
};