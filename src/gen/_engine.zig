// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Object = @import("object.zig").Object;

// method bindings
var mbind_get_author_info: ?*c_api.godot_method_bind = null;
var mbind_get_copyright_info: ?*c_api.godot_method_bind = null;
var mbind_get_donor_info: ?*c_api.godot_method_bind = null;
var mbind_get_frames_drawn: ?*c_api.godot_method_bind = null;
var mbind_get_frames_per_second: ?*c_api.godot_method_bind = null;
var mbind_get_idle_frames: ?*c_api.godot_method_bind = null;
var mbind_get_iterations_per_second: ?*c_api.godot_method_bind = null;
var mbind_get_license_info: ?*c_api.godot_method_bind = null;
var mbind_get_license_text: ?*c_api.godot_method_bind = null;
var mbind_get_main_loop: ?*c_api.godot_method_bind = null;
var mbind_get_physics_frames: ?*c_api.godot_method_bind = null;
var mbind_get_physics_interpolation_fraction: ?*c_api.godot_method_bind = null;
var mbind_get_physics_jitter_fix: ?*c_api.godot_method_bind = null;
var mbind_get_singleton: ?*c_api.godot_method_bind = null;
var mbind_get_target_fps: ?*c_api.godot_method_bind = null;
var mbind_get_time_scale: ?*c_api.godot_method_bind = null;
var mbind_get_version_info: ?*c_api.godot_method_bind = null;
var mbind_has_singleton: ?*c_api.godot_method_bind = null;
var mbind_is_editor_hint: ?*c_api.godot_method_bind = null;
var mbind_is_in_physics_frame: ?*c_api.godot_method_bind = null;
var mbind_is_printing_error_messages: ?*c_api.godot_method_bind = null;
var mbind_set_editor_hint: ?*c_api.godot_method_bind = null;
var mbind_set_iterations_per_second: ?*c_api.godot_method_bind = null;
var mbind_set_physics_jitter_fix: ?*c_api.godot_method_bind = null;
var mbind_set_print_error_messages: ?*c_api.godot_method_bind = null;
var mbind_set_target_fps: ?*c_api.godot_method_bind = null;
var mbind_set_time_scale: ?*c_api.godot_method_bind = null;
var mbind__engine_constructor: ?fn () ?*c_api.godot_object = null;

pub const _Engine = struct {
    const Self = @This();
    const BaseClass = Object;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind__engine_constructor == null) {
            mbind__engine_constructor = try api.createConstructor("_Engine");
        }
        return api.createObject(Self, mbind__engine_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAuthorInfo(self: *const Self) !godot.Dictionary {
        if (mbind_get_author_info == null) {
            mbind_get_author_info = try api.createMethod("_Engine", "get_author_info");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_author_info, base, cargs, result);
        return @ptrCast(*godot.Dictionary, @alignCast(@alignOf(&godot.Dictionary), result)).*;
    }

    pub fn getCopyrightInfo(self: *const Self) !godot.Array {
        if (mbind_get_copyright_info == null) {
            mbind_get_copyright_info = try api.createMethod("_Engine", "get_copyright_info");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_copyright_info, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getDonorInfo(self: *const Self) !godot.Dictionary {
        if (mbind_get_donor_info == null) {
            mbind_get_donor_info = try api.createMethod("_Engine", "get_donor_info");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_donor_info, base, cargs, result);
        return @ptrCast(*godot.Dictionary, @alignCast(@alignOf(&godot.Dictionary), result)).*;
    }

    pub fn getFramesDrawn(self: *const Self) !i32 {
        if (mbind_get_frames_drawn == null) {
            mbind_get_frames_drawn = try api.createMethod("_Engine", "get_frames_drawn");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_frames_drawn, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFramesPerSecond(self: *const Self) !f32 {
        if (mbind_get_frames_per_second == null) {
            mbind_get_frames_per_second = try api.createMethod("_Engine", "get_frames_per_second");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_frames_per_second, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getIdleFrames(self: *const Self) !i32 {
        if (mbind_get_idle_frames == null) {
            mbind_get_idle_frames = try api.createMethod("_Engine", "get_idle_frames");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_idle_frames, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getIterationsPerSecond(self: *const Self) !i32 {
        if (mbind_get_iterations_per_second == null) {
            mbind_get_iterations_per_second = try api.createMethod("_Engine", "get_iterations_per_second");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_iterations_per_second, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLicenseInfo(self: *const Self) !godot.Dictionary {
        if (mbind_get_license_info == null) {
            mbind_get_license_info = try api.createMethod("_Engine", "get_license_info");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_license_info, base, cargs, result);
        return @ptrCast(*godot.Dictionary, @alignCast(@alignOf(&godot.Dictionary), result)).*;
    }

    pub fn getLicenseText(self: *const Self) !godot.String {
        if (mbind_get_license_text == null) {
            mbind_get_license_text = try api.createMethod("_Engine", "get_license_text");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_license_text, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getMainLoop(self: *const Self) !godot.MainLoop {
        if (mbind_get_main_loop == null) {
            mbind_get_main_loop = try api.createMethod("_Engine", "get_main_loop");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_main_loop, base, cargs, result);
        return @ptrCast(*godot.MainLoop, @alignCast(@alignOf(&godot.MainLoop), result)).*;
    }

    pub fn getPhysicsFrames(self: *const Self) !i32 {
        if (mbind_get_physics_frames == null) {
            mbind_get_physics_frames = try api.createMethod("_Engine", "get_physics_frames");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_physics_frames, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPhysicsInterpolationFraction(self: *const Self) !f32 {
        if (mbind_get_physics_interpolation_fraction == null) {
            mbind_get_physics_interpolation_fraction = try api.createMethod("_Engine", "get_physics_interpolation_fraction");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_physics_interpolation_fraction, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getPhysicsJitterFix(self: *const Self) !f32 {
        if (mbind_get_physics_jitter_fix == null) {
            mbind_get_physics_jitter_fix = try api.createMethod("_Engine", "get_physics_jitter_fix");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_physics_jitter_fix, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSingleton(self: *const Self, arg_name: *const godot.String) !godot.Object {
        if (mbind_get_singleton == null) {
            mbind_get_singleton = try api.createMethod("_Engine", "get_singleton");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_singleton, base, cargs, result);
        return @ptrCast(*godot.Object, @alignCast(@alignOf(&godot.Object), result)).*;
    }

    pub fn getTargetFps(self: *const Self) !i32 {
        if (mbind_get_target_fps == null) {
            mbind_get_target_fps = try api.createMethod("_Engine", "get_target_fps");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_target_fps, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTimeScale(self: *const Self) !f32 {
        if (mbind_get_time_scale == null) {
            mbind_get_time_scale = try api.createMethod("_Engine", "get_time_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_time_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getVersionInfo(self: *const Self) !godot.Dictionary {
        if (mbind_get_version_info == null) {
            mbind_get_version_info = try api.createMethod("_Engine", "get_version_info");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_version_info, base, cargs, result);
        return @ptrCast(*godot.Dictionary, @alignCast(@alignOf(&godot.Dictionary), result)).*;
    }

    pub fn hasSingleton(self: *const Self, arg_name: *const godot.String) !bool {
        if (mbind_has_singleton == null) {
            mbind_has_singleton = try api.createMethod("_Engine", "has_singleton");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_singleton, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isEditorHint(self: *const Self) !bool {
        if (mbind_is_editor_hint == null) {
            mbind_is_editor_hint = try api.createMethod("_Engine", "is_editor_hint");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_editor_hint, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isInPhysicsFrame(self: *const Self) !bool {
        if (mbind_is_in_physics_frame == null) {
            mbind_is_in_physics_frame = try api.createMethod("_Engine", "is_in_physics_frame");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_in_physics_frame, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isPrintingErrorMessages(self: *const Self) !bool {
        if (mbind_is_printing_error_messages == null) {
            mbind_is_printing_error_messages = try api.createMethod("_Engine", "is_printing_error_messages");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_printing_error_messages, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setEditorHint(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_editor_hint == null) {
            mbind_set_editor_hint = try api.createMethod("_Engine", "set_editor_hint");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_editor_hint, base, cargs, result);
    }

    pub fn setIterationsPerSecond(self: *const Self, arg_iterations_per_second: i32) !void {
        if (mbind_set_iterations_per_second == null) {
            mbind_set_iterations_per_second = try api.createMethod("_Engine", "set_iterations_per_second");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_iterations_per_second),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_iterations_per_second, base, cargs, result);
    }

    pub fn setPhysicsJitterFix(self: *const Self, arg_physics_jitter_fix: f32) !void {
        if (mbind_set_physics_jitter_fix == null) {
            mbind_set_physics_jitter_fix = try api.createMethod("_Engine", "set_physics_jitter_fix");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_physics_jitter_fix),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_physics_jitter_fix, base, cargs, result);
    }

    pub fn setPrintErrorMessages(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_print_error_messages == null) {
            mbind_set_print_error_messages = try api.createMethod("_Engine", "set_print_error_messages");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_print_error_messages, base, cargs, result);
    }

    pub fn setTargetFps(self: *const Self, arg_target_fps: i32) !void {
        if (mbind_set_target_fps == null) {
            mbind_set_target_fps = try api.createMethod("_Engine", "set_target_fps");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_target_fps),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_target_fps, base, cargs, result);
    }

    pub fn setTimeScale(self: *const Self, arg_time_scale: f32) !void {
        if (mbind_set_time_scale == null) {
            mbind_set_time_scale = try api.createMethod("_Engine", "set_time_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_time_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_time_scale, base, cargs, result);
    }
};