// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node2D = @import("node_2d.zig").Node2D;

// method bindings
var mbind_get_color: ?*c_api.godot_method_bind = null;
var mbind_get_energy: ?*c_api.godot_method_bind = null;
var mbind_get_height: ?*c_api.godot_method_bind = null;
var mbind_get_item_cull_mask: ?*c_api.godot_method_bind = null;
var mbind_get_item_shadow_cull_mask: ?*c_api.godot_method_bind = null;
var mbind_get_layer_range_max: ?*c_api.godot_method_bind = null;
var mbind_get_layer_range_min: ?*c_api.godot_method_bind = null;
var mbind_get_mode: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_buffer_size: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_color: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_filter: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_gradient_length: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_smooth: ?*c_api.godot_method_bind = null;
var mbind_get_texture: ?*c_api.godot_method_bind = null;
var mbind_get_texture_offset: ?*c_api.godot_method_bind = null;
var mbind_get_texture_scale: ?*c_api.godot_method_bind = null;
var mbind_get_z_range_max: ?*c_api.godot_method_bind = null;
var mbind_get_z_range_min: ?*c_api.godot_method_bind = null;
var mbind_is_editor_only: ?*c_api.godot_method_bind = null;
var mbind_is_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_shadow_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_color: ?*c_api.godot_method_bind = null;
var mbind_set_editor_only: ?*c_api.godot_method_bind = null;
var mbind_set_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_energy: ?*c_api.godot_method_bind = null;
var mbind_set_height: ?*c_api.godot_method_bind = null;
var mbind_set_item_cull_mask: ?*c_api.godot_method_bind = null;
var mbind_set_item_shadow_cull_mask: ?*c_api.godot_method_bind = null;
var mbind_set_layer_range_max: ?*c_api.godot_method_bind = null;
var mbind_set_layer_range_min: ?*c_api.godot_method_bind = null;
var mbind_set_mode: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_buffer_size: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_color: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_filter: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_gradient_length: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_smooth: ?*c_api.godot_method_bind = null;
var mbind_set_texture: ?*c_api.godot_method_bind = null;
var mbind_set_texture_offset: ?*c_api.godot_method_bind = null;
var mbind_set_texture_scale: ?*c_api.godot_method_bind = null;
var mbind_set_z_range_max: ?*c_api.godot_method_bind = null;
var mbind_set_z_range_min: ?*c_api.godot_method_bind = null;
var mbind_light_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const Light2D = struct {
    const Self = @This();
    const BaseClass = Node2D;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_light_2d_constructor == null) {
            mbind_light_2d_constructor = try api.createConstructor("Light2D");
        }
        return api.createObject(Self, mbind_light_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getColor(self: *const Self) !godot.Color {
        if (mbind_get_color == null) {
            mbind_get_color = try api.createMethod("Light2D", "get_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getEnergy(self: *const Self) !f32 {
        if (mbind_get_energy == null) {
            mbind_get_energy = try api.createMethod("Light2D", "get_energy");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_energy, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getHeight(self: *const Self) !f32 {
        if (mbind_get_height == null) {
            mbind_get_height = try api.createMethod("Light2D", "get_height");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_height, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getItemCullMask(self: *const Self) !i32 {
        if (mbind_get_item_cull_mask == null) {
            mbind_get_item_cull_mask = try api.createMethod("Light2D", "get_item_cull_mask");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_cull_mask, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getItemShadowCullMask(self: *const Self) !i32 {
        if (mbind_get_item_shadow_cull_mask == null) {
            mbind_get_item_shadow_cull_mask = try api.createMethod("Light2D", "get_item_shadow_cull_mask");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_shadow_cull_mask, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLayerRangeMax(self: *const Self) !i32 {
        if (mbind_get_layer_range_max == null) {
            mbind_get_layer_range_max = try api.createMethod("Light2D", "get_layer_range_max");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_layer_range_max, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLayerRangeMin(self: *const Self) !i32 {
        if (mbind_get_layer_range_min == null) {
            mbind_get_layer_range_min = try api.createMethod("Light2D", "get_layer_range_min");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_layer_range_min, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMode(self: *const Self) !i32 {
        if (mbind_get_mode == null) {
            mbind_get_mode = try api.createMethod("Light2D", "get_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getShadowBufferSize(self: *const Self) !i32 {
        if (mbind_get_shadow_buffer_size == null) {
            mbind_get_shadow_buffer_size = try api.createMethod("Light2D", "get_shadow_buffer_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_buffer_size, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getShadowColor(self: *const Self) !godot.Color {
        if (mbind_get_shadow_color == null) {
            mbind_get_shadow_color = try api.createMethod("Light2D", "get_shadow_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getShadowFilter(self: *const Self) !i32 {
        if (mbind_get_shadow_filter == null) {
            mbind_get_shadow_filter = try api.createMethod("Light2D", "get_shadow_filter");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_filter, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getShadowGradientLength(self: *const Self) !f32 {
        if (mbind_get_shadow_gradient_length == null) {
            mbind_get_shadow_gradient_length = try api.createMethod("Light2D", "get_shadow_gradient_length");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_gradient_length, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getShadowSmooth(self: *const Self) !f32 {
        if (mbind_get_shadow_smooth == null) {
            mbind_get_shadow_smooth = try api.createMethod("Light2D", "get_shadow_smooth");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_smooth, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTexture(self: *const Self) !godot.Texture {
        if (mbind_get_texture == null) {
            mbind_get_texture = try api.createMethod("Light2D", "get_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getTextureOffset(self: *const Self) !godot.Vector2 {
        if (mbind_get_texture_offset == null) {
            mbind_get_texture_offset = try api.createMethod("Light2D", "get_texture_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_texture_offset, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getTextureScale(self: *const Self) !f32 {
        if (mbind_get_texture_scale == null) {
            mbind_get_texture_scale = try api.createMethod("Light2D", "get_texture_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_texture_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getZRangeMax(self: *const Self) !i32 {
        if (mbind_get_z_range_max == null) {
            mbind_get_z_range_max = try api.createMethod("Light2D", "get_z_range_max");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_z_range_max, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getZRangeMin(self: *const Self) !i32 {
        if (mbind_get_z_range_min == null) {
            mbind_get_z_range_min = try api.createMethod("Light2D", "get_z_range_min");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_z_range_min, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isEditorOnly(self: *const Self) !bool {
        if (mbind_is_editor_only == null) {
            mbind_is_editor_only = try api.createMethod("Light2D", "is_editor_only");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_editor_only, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isEnabled(self: *const Self) !bool {
        if (mbind_is_enabled == null) {
            mbind_is_enabled = try api.createMethod("Light2D", "is_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isShadowEnabled(self: *const Self) !bool {
        if (mbind_is_shadow_enabled == null) {
            mbind_is_shadow_enabled = try api.createMethod("Light2D", "is_shadow_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_shadow_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_color == null) {
            mbind_set_color = try api.createMethod("Light2D", "set_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_color, base, cargs, result);
    }

    pub fn setEditorOnly(self: *const Self, arg_editor_only: bool) !void {
        if (mbind_set_editor_only == null) {
            mbind_set_editor_only = try api.createMethod("Light2D", "set_editor_only");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_editor_only),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_editor_only, base, cargs, result);
    }

    pub fn setEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_enabled == null) {
            mbind_set_enabled = try api.createMethod("Light2D", "set_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_enabled, base, cargs, result);
    }

    pub fn setEnergy(self: *const Self, arg_energy: f32) !void {
        if (mbind_set_energy == null) {
            mbind_set_energy = try api.createMethod("Light2D", "set_energy");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_energy),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_energy, base, cargs, result);
    }

    pub fn setHeight(self: *const Self, arg_height: f32) !void {
        if (mbind_set_height == null) {
            mbind_set_height = try api.createMethod("Light2D", "set_height");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_height),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_height, base, cargs, result);
    }

    pub fn setItemCullMask(self: *const Self, arg_item_cull_mask: i32) !void {
        if (mbind_set_item_cull_mask == null) {
            mbind_set_item_cull_mask = try api.createMethod("Light2D", "set_item_cull_mask");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_item_cull_mask),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_cull_mask, base, cargs, result);
    }

    pub fn setItemShadowCullMask(self: *const Self, arg_item_shadow_cull_mask: i32) !void {
        if (mbind_set_item_shadow_cull_mask == null) {
            mbind_set_item_shadow_cull_mask = try api.createMethod("Light2D", "set_item_shadow_cull_mask");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_item_shadow_cull_mask),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_shadow_cull_mask, base, cargs, result);
    }

    pub fn setLayerRangeMax(self: *const Self, arg_layer: i32) !void {
        if (mbind_set_layer_range_max == null) {
            mbind_set_layer_range_max = try api.createMethod("Light2D", "set_layer_range_max");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_layer),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_layer_range_max, base, cargs, result);
    }

    pub fn setLayerRangeMin(self: *const Self, arg_layer: i32) !void {
        if (mbind_set_layer_range_min == null) {
            mbind_set_layer_range_min = try api.createMethod("Light2D", "set_layer_range_min");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_layer),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_layer_range_min, base, cargs, result);
    }

    pub fn setMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_mode == null) {
            mbind_set_mode = try api.createMethod("Light2D", "set_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mode, base, cargs, result);
    }

    pub fn setShadowBufferSize(self: *const Self, arg_size: i32) !void {
        if (mbind_set_shadow_buffer_size == null) {
            mbind_set_shadow_buffer_size = try api.createMethod("Light2D", "set_shadow_buffer_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_buffer_size, base, cargs, result);
    }

    pub fn setShadowColor(self: *const Self, arg_shadow_color: *const godot.Color) !void {
        if (mbind_set_shadow_color == null) {
            mbind_set_shadow_color = try api.createMethod("Light2D", "set_shadow_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_shadow_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_color, base, cargs, result);
    }

    pub fn setShadowEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_shadow_enabled == null) {
            mbind_set_shadow_enabled = try api.createMethod("Light2D", "set_shadow_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_enabled, base, cargs, result);
    }

    pub fn setShadowFilter(self: *const Self, arg_filter: i32) !void {
        if (mbind_set_shadow_filter == null) {
            mbind_set_shadow_filter = try api.createMethod("Light2D", "set_shadow_filter");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_filter),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_filter, base, cargs, result);
    }

    pub fn setShadowGradientLength(self: *const Self, arg_multiplier: f32) !void {
        if (mbind_set_shadow_gradient_length == null) {
            mbind_set_shadow_gradient_length = try api.createMethod("Light2D", "set_shadow_gradient_length");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_multiplier),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_gradient_length, base, cargs, result);
    }

    pub fn setShadowSmooth(self: *const Self, arg_smooth: f32) !void {
        if (mbind_set_shadow_smooth == null) {
            mbind_set_shadow_smooth = try api.createMethod("Light2D", "set_shadow_smooth");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_smooth),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_smooth, base, cargs, result);
    }

    pub fn setTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_texture == null) {
            mbind_set_texture = try api.createMethod("Light2D", "set_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_texture, base, cargs, result);
    }

    pub fn setTextureOffset(self: *const Self, arg_texture_offset: *const godot.Vector2) !void {
        if (mbind_set_texture_offset == null) {
            mbind_set_texture_offset = try api.createMethod("Light2D", "set_texture_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_texture_offset, base, cargs, result);
    }

    pub fn setTextureScale(self: *const Self, arg_texture_scale: f32) !void {
        if (mbind_set_texture_scale == null) {
            mbind_set_texture_scale = try api.createMethod("Light2D", "set_texture_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_texture_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_texture_scale, base, cargs, result);
    }

    pub fn setZRangeMax(self: *const Self, arg_z: i32) !void {
        if (mbind_set_z_range_max == null) {
            mbind_set_z_range_max = try api.createMethod("Light2D", "set_z_range_max");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_z),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_z_range_max, base, cargs, result);
    }

    pub fn setZRangeMin(self: *const Self, arg_z: i32) !void {
        if (mbind_set_z_range_min == null) {
            mbind_set_z_range_min = try api.createMethod("Light2D", "set_z_range_min");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_z),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_z_range_min, base, cargs, result);
    }
};