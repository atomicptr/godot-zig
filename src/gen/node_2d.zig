// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_apply_scale: ?*c_api.godot_method_bind = null;
var mbind_get_angle_to: ?*c_api.godot_method_bind = null;
var mbind_get_global_position: ?*c_api.godot_method_bind = null;
var mbind_get_global_rotation: ?*c_api.godot_method_bind = null;
var mbind_get_global_rotation_degrees: ?*c_api.godot_method_bind = null;
var mbind_get_global_scale: ?*c_api.godot_method_bind = null;
var mbind_get_position: ?*c_api.godot_method_bind = null;
var mbind_get_relative_transform_to_parent: ?*c_api.godot_method_bind = null;
var mbind_get_rotation: ?*c_api.godot_method_bind = null;
var mbind_get_rotation_degrees: ?*c_api.godot_method_bind = null;
var mbind_get_scale: ?*c_api.godot_method_bind = null;
var mbind_get_z_index: ?*c_api.godot_method_bind = null;
var mbind_global_translate: ?*c_api.godot_method_bind = null;
var mbind_is_z_relative: ?*c_api.godot_method_bind = null;
var mbind_look_at: ?*c_api.godot_method_bind = null;
var mbind_move_local_x: ?*c_api.godot_method_bind = null;
var mbind_move_local_y: ?*c_api.godot_method_bind = null;
var mbind_rotate: ?*c_api.godot_method_bind = null;
var mbind_set_global_position: ?*c_api.godot_method_bind = null;
var mbind_set_global_rotation: ?*c_api.godot_method_bind = null;
var mbind_set_global_rotation_degrees: ?*c_api.godot_method_bind = null;
var mbind_set_global_scale: ?*c_api.godot_method_bind = null;
var mbind_set_global_transform: ?*c_api.godot_method_bind = null;
var mbind_set_position: ?*c_api.godot_method_bind = null;
var mbind_set_rotation: ?*c_api.godot_method_bind = null;
var mbind_set_rotation_degrees: ?*c_api.godot_method_bind = null;
var mbind_set_scale: ?*c_api.godot_method_bind = null;
var mbind_set_transform: ?*c_api.godot_method_bind = null;
var mbind_set_z_as_relative: ?*c_api.godot_method_bind = null;
var mbind_set_z_index: ?*c_api.godot_method_bind = null;
var mbind_to_global: ?*c_api.godot_method_bind = null;
var mbind_to_local: ?*c_api.godot_method_bind = null;
var mbind_translate: ?*c_api.godot_method_bind = null;
var mbind_node_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const Node2D = struct {
    const Self = @This();
    pub const BaseClass = godot.CanvasItem;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_node_2d_constructor == null) {
            mbind_node_2d_constructor = try api.createConstructor("Node2D");
        }
        return api.createObject(Self, mbind_node_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn applyScale(self: *const Self, arg_ratio: *const godot.Vector2) !void {
        if (mbind_apply_scale == null) {
            mbind_apply_scale = try api.createMethod("Node2D", "apply_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_ratio),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_apply_scale, base, cargs, result);
    }

    pub fn getAngleTo(self: *const Self, arg_point: *const godot.Vector2) !f32 {
        if (mbind_get_angle_to == null) {
            mbind_get_angle_to = try api.createMethod("Node2D", "get_angle_to");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_angle_to, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGlobalPosition(self: *const Self) !godot.Vector2 {
        if (mbind_get_global_position == null) {
            mbind_get_global_position = try api.createMethod("Node2D", "get_global_position");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_global_position, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getGlobalRotation(self: *const Self) !f32 {
        if (mbind_get_global_rotation == null) {
            mbind_get_global_rotation = try api.createMethod("Node2D", "get_global_rotation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_global_rotation, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGlobalRotationDegrees(self: *const Self) !f32 {
        if (mbind_get_global_rotation_degrees == null) {
            mbind_get_global_rotation_degrees = try api.createMethod("Node2D", "get_global_rotation_degrees");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_global_rotation_degrees, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGlobalScale(self: *const Self) !godot.Vector2 {
        if (mbind_get_global_scale == null) {
            mbind_get_global_scale = try api.createMethod("Node2D", "get_global_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_global_scale, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getPosition(self: *const Self) !godot.Vector2 {
        if (mbind_get_position == null) {
            mbind_get_position = try api.createMethod("Node2D", "get_position");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_position, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getRelativeTransformToParent(self: *const Self, arg_parent: *const godot.Node) !godot.Transform2D {
        if (mbind_get_relative_transform_to_parent == null) {
            mbind_get_relative_transform_to_parent = try api.createMethod("Node2D", "get_relative_transform_to_parent");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_parent),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_relative_transform_to_parent, base, cargs, result);
        return @ptrCast(*godot.Transform2D, @alignCast(@alignOf(&godot.Transform2D), result)).*;
    }

    pub fn getRotation(self: *const Self) !f32 {
        if (mbind_get_rotation == null) {
            mbind_get_rotation = try api.createMethod("Node2D", "get_rotation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rotation, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRotationDegrees(self: *const Self) !f32 {
        if (mbind_get_rotation_degrees == null) {
            mbind_get_rotation_degrees = try api.createMethod("Node2D", "get_rotation_degrees");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rotation_degrees, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getScale(self: *const Self) !godot.Vector2 {
        if (mbind_get_scale == null) {
            mbind_get_scale = try api.createMethod("Node2D", "get_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_scale, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getZIndex(self: *const Self) !i32 {
        if (mbind_get_z_index == null) {
            mbind_get_z_index = try api.createMethod("Node2D", "get_z_index");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_z_index, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn globalTranslate(self: *const Self, arg_offset: *const godot.Vector2) !void {
        if (mbind_global_translate == null) {
            mbind_global_translate = try api.createMethod("Node2D", "global_translate");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_global_translate, base, cargs, result);
    }

    pub fn isZRelative(self: *const Self) !bool {
        if (mbind_is_z_relative == null) {
            mbind_is_z_relative = try api.createMethod("Node2D", "is_z_relative");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_z_relative, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn lookAt(self: *const Self, arg_point: *const godot.Vector2) !void {
        if (mbind_look_at == null) {
            mbind_look_at = try api.createMethod("Node2D", "look_at");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_look_at, base, cargs, result);
    }

    pub fn moveLocalX(self: *const Self, arg_delta: f32, arg_scaled: bool) !void {
        if (mbind_move_local_x == null) {
            mbind_move_local_x = try api.createMethod("Node2D", "move_local_x");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_delta),
            @ptrCast(*const anyopaque, *arg_scaled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_move_local_x, base, cargs, result);
    }

    pub fn moveLocalY(self: *const Self, arg_delta: f32, arg_scaled: bool) !void {
        if (mbind_move_local_y == null) {
            mbind_move_local_y = try api.createMethod("Node2D", "move_local_y");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_delta),
            @ptrCast(*const anyopaque, *arg_scaled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_move_local_y, base, cargs, result);
    }

    pub fn rotate(self: *const Self, arg_radians: f32) !void {
        if (mbind_rotate == null) {
            mbind_rotate = try api.createMethod("Node2D", "rotate");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radians),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_rotate, base, cargs, result);
    }

    pub fn setGlobalPosition(self: *const Self, arg_position: *const godot.Vector2) !void {
        if (mbind_set_global_position == null) {
            mbind_set_global_position = try api.createMethod("Node2D", "set_global_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_global_position, base, cargs, result);
    }

    pub fn setGlobalRotation(self: *const Self, arg_radians: f32) !void {
        if (mbind_set_global_rotation == null) {
            mbind_set_global_rotation = try api.createMethod("Node2D", "set_global_rotation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radians),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_global_rotation, base, cargs, result);
    }

    pub fn setGlobalRotationDegrees(self: *const Self, arg_degrees: f32) !void {
        if (mbind_set_global_rotation_degrees == null) {
            mbind_set_global_rotation_degrees = try api.createMethod("Node2D", "set_global_rotation_degrees");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_global_rotation_degrees, base, cargs, result);
    }

    pub fn setGlobalScale(self: *const Self, arg_scale: *const godot.Vector2) !void {
        if (mbind_set_global_scale == null) {
            mbind_set_global_scale = try api.createMethod("Node2D", "set_global_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_global_scale, base, cargs, result);
    }

    pub fn setGlobalTransform(self: *const Self, arg_xform: *const godot.Transform2D) !void {
        if (mbind_set_global_transform == null) {
            mbind_set_global_transform = try api.createMethod("Node2D", "set_global_transform");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_xform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_global_transform, base, cargs, result);
    }

    pub fn setPosition(self: *const Self, arg_position: *const godot.Vector2) !void {
        if (mbind_set_position == null) {
            mbind_set_position = try api.createMethod("Node2D", "set_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_position, base, cargs, result);
    }

    pub fn setRotation(self: *const Self, arg_radians: f32) !void {
        if (mbind_set_rotation == null) {
            mbind_set_rotation = try api.createMethod("Node2D", "set_rotation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radians),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rotation, base, cargs, result);
    }

    pub fn setRotationDegrees(self: *const Self, arg_degrees: f32) !void {
        if (mbind_set_rotation_degrees == null) {
            mbind_set_rotation_degrees = try api.createMethod("Node2D", "set_rotation_degrees");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rotation_degrees, base, cargs, result);
    }

    pub fn setScale(self: *const Self, arg_scale: *const godot.Vector2) !void {
        if (mbind_set_scale == null) {
            mbind_set_scale = try api.createMethod("Node2D", "set_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_scale, base, cargs, result);
    }

    pub fn setTransform(self: *const Self, arg_xform: *const godot.Transform2D) !void {
        if (mbind_set_transform == null) {
            mbind_set_transform = try api.createMethod("Node2D", "set_transform");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_xform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_transform, base, cargs, result);
    }

    pub fn setZAsRelative(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_z_as_relative == null) {
            mbind_set_z_as_relative = try api.createMethod("Node2D", "set_z_as_relative");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_z_as_relative, base, cargs, result);
    }

    pub fn setZIndex(self: *const Self, arg_z_index: i32) !void {
        if (mbind_set_z_index == null) {
            mbind_set_z_index = try api.createMethod("Node2D", "set_z_index");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_z_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_z_index, base, cargs, result);
    }

    pub fn toGlobal(self: *const Self, arg_local_point: *const godot.Vector2) !godot.Vector2 {
        if (mbind_to_global == null) {
            mbind_to_global = try api.createMethod("Node2D", "to_global");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_local_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_to_global, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn toLocal(self: *const Self, arg_global_point: *const godot.Vector2) !godot.Vector2 {
        if (mbind_to_local == null) {
            mbind_to_local = try api.createMethod("Node2D", "to_local");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_global_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_to_local, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn translate(self: *const Self, arg_offset: *const godot.Vector2) !void {
        if (mbind_translate == null) {
            mbind_translate = try api.createMethod("Node2D", "translate");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_translate, base, cargs, result);
    }
};