// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_add_outline: ?*c_api.godot_method_bind = null;
var mbind_add_outline_at_index: ?*c_api.godot_method_bind = null;
var mbind_add_polygon: ?*c_api.godot_method_bind = null;
var mbind_clear_outlines: ?*c_api.godot_method_bind = null;
var mbind_clear_polygons: ?*c_api.godot_method_bind = null;
var mbind_get_outline: ?*c_api.godot_method_bind = null;
var mbind_get_outline_count: ?*c_api.godot_method_bind = null;
var mbind_get_polygon: ?*c_api.godot_method_bind = null;
var mbind_get_polygon_count: ?*c_api.godot_method_bind = null;
var mbind_get_vertices: ?*c_api.godot_method_bind = null;
var mbind_make_polygons_from_outlines: ?*c_api.godot_method_bind = null;
var mbind_remove_outline: ?*c_api.godot_method_bind = null;
var mbind_set_outline: ?*c_api.godot_method_bind = null;
var mbind_set_vertices: ?*c_api.godot_method_bind = null;
var mbind_navigation_polygon_constructor: ?fn () ?*c_api.godot_object = null;

pub const NavigationPolygon = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_navigation_polygon_constructor == null) {
            mbind_navigation_polygon_constructor = try api.createConstructor("NavigationPolygon");
        }
        return api.createObject(Self, mbind_navigation_polygon_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addOutline(self: *const Self, arg_outline: *const godot.PoolVector2Array) !void {
        if (mbind_add_outline == null) {
            mbind_add_outline = try api.createMethod("NavigationPolygon", "add_outline");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_outline),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_outline, base, cargs, result);
    }

    pub fn addOutlineAtIndex(self: *const Self, arg_outline: *const godot.PoolVector2Array, arg_index: i32) !void {
        if (mbind_add_outline_at_index == null) {
            mbind_add_outline_at_index = try api.createMethod("NavigationPolygon", "add_outline_at_index");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_outline),
            @ptrCast(*const anyopaque, *arg_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_outline_at_index, base, cargs, result);
    }

    pub fn addPolygon(self: *const Self, arg_polygon: *const godot.PoolIntArray) !void {
        if (mbind_add_polygon == null) {
            mbind_add_polygon = try api.createMethod("NavigationPolygon", "add_polygon");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_polygon),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_polygon, base, cargs, result);
    }

    pub fn clearOutlines(self: *const Self) !void {
        if (mbind_clear_outlines == null) {
            mbind_clear_outlines = try api.createMethod("NavigationPolygon", "clear_outlines");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_outlines, base, cargs, result);
    }

    pub fn clearPolygons(self: *const Self) !void {
        if (mbind_clear_polygons == null) {
            mbind_clear_polygons = try api.createMethod("NavigationPolygon", "clear_polygons");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_polygons, base, cargs, result);
    }

    pub fn getOutline(self: *const Self, arg_idx: i32) !godot.PoolVector2Array {
        if (mbind_get_outline == null) {
            mbind_get_outline = try api.createMethod("NavigationPolygon", "get_outline");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_outline, base, cargs, result);
        return @ptrCast(*godot.PoolVector2Array, @alignCast(@alignOf(&godot.PoolVector2Array), result)).*;
    }

    pub fn getOutlineCount(self: *const Self) !i32 {
        if (mbind_get_outline_count == null) {
            mbind_get_outline_count = try api.createMethod("NavigationPolygon", "get_outline_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_outline_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPolygon(self: *const Self, arg_idx: i32) !godot.PoolIntArray {
        if (mbind_get_polygon == null) {
            mbind_get_polygon = try api.createMethod("NavigationPolygon", "get_polygon");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_polygon, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getPolygonCount(self: *const Self) !i32 {
        if (mbind_get_polygon_count == null) {
            mbind_get_polygon_count = try api.createMethod("NavigationPolygon", "get_polygon_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_polygon_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getVertices(self: *const Self) !godot.PoolVector2Array {
        if (mbind_get_vertices == null) {
            mbind_get_vertices = try api.createMethod("NavigationPolygon", "get_vertices");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertices, base, cargs, result);
        return @ptrCast(*godot.PoolVector2Array, @alignCast(@alignOf(&godot.PoolVector2Array), result)).*;
    }

    pub fn makePolygonsFromOutlines(self: *const Self) !void {
        if (mbind_make_polygons_from_outlines == null) {
            mbind_make_polygons_from_outlines = try api.createMethod("NavigationPolygon", "make_polygons_from_outlines");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_make_polygons_from_outlines, base, cargs, result);
    }

    pub fn removeOutline(self: *const Self, arg_idx: i32) !void {
        if (mbind_remove_outline == null) {
            mbind_remove_outline = try api.createMethod("NavigationPolygon", "remove_outline");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_outline, base, cargs, result);
    }

    pub fn setOutline(self: *const Self, arg_idx: i32, arg_outline: *const godot.PoolVector2Array) !void {
        if (mbind_set_outline == null) {
            mbind_set_outline = try api.createMethod("NavigationPolygon", "set_outline");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_outline),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_outline, base, cargs, result);
    }

    pub fn setVertices(self: *const Self, arg_vertices: *const godot.PoolVector2Array) !void {
        if (mbind_set_vertices == null) {
            mbind_set_vertices = try api.createMethod("NavigationPolygon", "set_vertices");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_vertices),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_vertices, base, cargs, result);
    }
};