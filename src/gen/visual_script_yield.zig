// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const VisualScriptNode = @import("visual_script_node.zig").VisualScriptNode;

// method bindings
var mbind_get_wait_time: ?*c_api.godot_method_bind = null;
var mbind_get_yield_mode: ?*c_api.godot_method_bind = null;
var mbind_set_wait_time: ?*c_api.godot_method_bind = null;
var mbind_set_yield_mode: ?*c_api.godot_method_bind = null;
var mbind_visual_script_yield_constructor: ?fn () ?*c_api.godot_object = null;

pub const VisualScriptYield = struct {
    const Self = @This();
    const BaseClass = VisualScriptNode;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_visual_script_yield_constructor == null) {
            mbind_visual_script_yield_constructor = try api.createConstructor("VisualScriptYield");
        }
        return api.createObject(Self, mbind_visual_script_yield_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getWaitTime(self: *const Self) !f32 {
        if (mbind_get_wait_time == null) {
            mbind_get_wait_time = try api.createMethod("VisualScriptYield", "get_wait_time");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_wait_time, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getYieldMode(self: *const Self) !i32 {
        if (mbind_get_yield_mode == null) {
            mbind_get_yield_mode = try api.createMethod("VisualScriptYield", "get_yield_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_yield_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setWaitTime(self: *const Self, arg_sec: f32) !void {
        if (mbind_set_wait_time == null) {
            mbind_set_wait_time = try api.createMethod("VisualScriptYield", "set_wait_time");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_sec),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_wait_time, base, cargs, result);
    }

    pub fn setYieldMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_yield_mode == null) {
            mbind_set_yield_mode = try api.createMethod("VisualScriptYield", "set_yield_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_yield_mode, base, cargs, result);
    }
};