// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_add_point: ?*c_api.godot_method_bind = null;
var mbind_clear_points: ?*c_api.godot_method_bind = null;
var mbind_get_antialiased: ?*c_api.godot_method_bind = null;
var mbind_get_begin_cap_mode: ?*c_api.godot_method_bind = null;
var mbind_get_curve: ?*c_api.godot_method_bind = null;
var mbind_get_default_color: ?*c_api.godot_method_bind = null;
var mbind_get_end_cap_mode: ?*c_api.godot_method_bind = null;
var mbind_get_gradient: ?*c_api.godot_method_bind = null;
var mbind_get_joint_mode: ?*c_api.godot_method_bind = null;
var mbind_get_point_count: ?*c_api.godot_method_bind = null;
var mbind_get_point_position: ?*c_api.godot_method_bind = null;
var mbind_get_points: ?*c_api.godot_method_bind = null;
var mbind_get_round_precision: ?*c_api.godot_method_bind = null;
var mbind_get_sharp_limit: ?*c_api.godot_method_bind = null;
var mbind_get_texture: ?*c_api.godot_method_bind = null;
var mbind_get_texture_mode: ?*c_api.godot_method_bind = null;
var mbind_get_width: ?*c_api.godot_method_bind = null;
var mbind_remove_point: ?*c_api.godot_method_bind = null;
var mbind_set_antialiased: ?*c_api.godot_method_bind = null;
var mbind_set_begin_cap_mode: ?*c_api.godot_method_bind = null;
var mbind_set_curve: ?*c_api.godot_method_bind = null;
var mbind_set_default_color: ?*c_api.godot_method_bind = null;
var mbind_set_end_cap_mode: ?*c_api.godot_method_bind = null;
var mbind_set_gradient: ?*c_api.godot_method_bind = null;
var mbind_set_joint_mode: ?*c_api.godot_method_bind = null;
var mbind_set_point_position: ?*c_api.godot_method_bind = null;
var mbind_set_points: ?*c_api.godot_method_bind = null;
var mbind_set_round_precision: ?*c_api.godot_method_bind = null;
var mbind_set_sharp_limit: ?*c_api.godot_method_bind = null;
var mbind_set_texture: ?*c_api.godot_method_bind = null;
var mbind_set_texture_mode: ?*c_api.godot_method_bind = null;
var mbind_set_width: ?*c_api.godot_method_bind = null;
var mbind_line_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const Line2D = struct {
    const Self = @This();
    pub const BaseClass = godot.Node2D;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_line_2d_constructor == null) {
            mbind_line_2d_constructor = try api.createConstructor("Line2D");
        }
        return api.createObject(Self, mbind_line_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addPoint(self: *const Self, arg_position: *const godot.Vector2, arg_at_position: i32) !void {
        if (mbind_add_point == null) {
            mbind_add_point = try api.createMethod("Line2D", "add_point");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
            @ptrCast(*const anyopaque, *arg_at_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_point, base, cargs, result);
    }

    pub fn clearPoints(self: *const Self) !void {
        if (mbind_clear_points == null) {
            mbind_clear_points = try api.createMethod("Line2D", "clear_points");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_points, base, cargs, result);
    }

    pub fn getAntialiased(self: *const Self) !bool {
        if (mbind_get_antialiased == null) {
            mbind_get_antialiased = try api.createMethod("Line2D", "get_antialiased");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_antialiased, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getBeginCapMode(self: *const Self) !i32 {
        if (mbind_get_begin_cap_mode == null) {
            mbind_get_begin_cap_mode = try api.createMethod("Line2D", "get_begin_cap_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_begin_cap_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCurve(self: *const Self) !godot.Curve {
        if (mbind_get_curve == null) {
            mbind_get_curve = try api.createMethod("Line2D", "get_curve");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_curve, base, cargs, result);
        return @ptrCast(*godot.Curve, @alignCast(@alignOf(&godot.Curve), result)).*;
    }

    pub fn getDefaultColor(self: *const Self) !godot.Color {
        if (mbind_get_default_color == null) {
            mbind_get_default_color = try api.createMethod("Line2D", "get_default_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_default_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getEndCapMode(self: *const Self) !i32 {
        if (mbind_get_end_cap_mode == null) {
            mbind_get_end_cap_mode = try api.createMethod("Line2D", "get_end_cap_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_end_cap_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getGradient(self: *const Self) !godot.Gradient {
        if (mbind_get_gradient == null) {
            mbind_get_gradient = try api.createMethod("Line2D", "get_gradient");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_gradient, base, cargs, result);
        return @ptrCast(*godot.Gradient, @alignCast(@alignOf(&godot.Gradient), result)).*;
    }

    pub fn getJointMode(self: *const Self) !i32 {
        if (mbind_get_joint_mode == null) {
            mbind_get_joint_mode = try api.createMethod("Line2D", "get_joint_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joint_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPointCount(self: *const Self) !i32 {
        if (mbind_get_point_count == null) {
            mbind_get_point_count = try api.createMethod("Line2D", "get_point_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_point_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPointPosition(self: *const Self, arg_i: i32) !godot.Vector2 {
        if (mbind_get_point_position == null) {
            mbind_get_point_position = try api.createMethod("Line2D", "get_point_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_i),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_point_position, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getPoints(self: *const Self) !godot.PoolVector2Array {
        if (mbind_get_points == null) {
            mbind_get_points = try api.createMethod("Line2D", "get_points");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_points, base, cargs, result);
        return @ptrCast(*godot.PoolVector2Array, @alignCast(@alignOf(&godot.PoolVector2Array), result)).*;
    }

    pub fn getRoundPrecision(self: *const Self) !i32 {
        if (mbind_get_round_precision == null) {
            mbind_get_round_precision = try api.createMethod("Line2D", "get_round_precision");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_round_precision, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSharpLimit(self: *const Self) !f32 {
        if (mbind_get_sharp_limit == null) {
            mbind_get_sharp_limit = try api.createMethod("Line2D", "get_sharp_limit");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sharp_limit, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTexture(self: *const Self) !godot.Texture {
        if (mbind_get_texture == null) {
            mbind_get_texture = try api.createMethod("Line2D", "get_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getTextureMode(self: *const Self) !i32 {
        if (mbind_get_texture_mode == null) {
            mbind_get_texture_mode = try api.createMethod("Line2D", "get_texture_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_texture_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getWidth(self: *const Self) !f32 {
        if (mbind_get_width == null) {
            mbind_get_width = try api.createMethod("Line2D", "get_width");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_width, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn removePoint(self: *const Self, arg_i: i32) !void {
        if (mbind_remove_point == null) {
            mbind_remove_point = try api.createMethod("Line2D", "remove_point");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_i),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_point, base, cargs, result);
    }

    pub fn setAntialiased(self: *const Self, arg_antialiased: bool) !void {
        if (mbind_set_antialiased == null) {
            mbind_set_antialiased = try api.createMethod("Line2D", "set_antialiased");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_antialiased),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_antialiased, base, cargs, result);
    }

    pub fn setBeginCapMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_begin_cap_mode == null) {
            mbind_set_begin_cap_mode = try api.createMethod("Line2D", "set_begin_cap_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_begin_cap_mode, base, cargs, result);
    }

    pub fn setCurve(self: *const Self, arg_curve: *const godot.Curve) !void {
        if (mbind_set_curve == null) {
            mbind_set_curve = try api.createMethod("Line2D", "set_curve");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_curve),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_curve, base, cargs, result);
    }

    pub fn setDefaultColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_default_color == null) {
            mbind_set_default_color = try api.createMethod("Line2D", "set_default_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_default_color, base, cargs, result);
    }

    pub fn setEndCapMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_end_cap_mode == null) {
            mbind_set_end_cap_mode = try api.createMethod("Line2D", "set_end_cap_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_end_cap_mode, base, cargs, result);
    }

    pub fn setGradient(self: *const Self, arg_color: *const godot.Gradient) !void {
        if (mbind_set_gradient == null) {
            mbind_set_gradient = try api.createMethod("Line2D", "set_gradient");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_gradient, base, cargs, result);
    }

    pub fn setJointMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_joint_mode == null) {
            mbind_set_joint_mode = try api.createMethod("Line2D", "set_joint_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_joint_mode, base, cargs, result);
    }

    pub fn setPointPosition(self: *const Self, arg_i: i32, arg_position: *const godot.Vector2) !void {
        if (mbind_set_point_position == null) {
            mbind_set_point_position = try api.createMethod("Line2D", "set_point_position");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_i),
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_point_position, base, cargs, result);
    }

    pub fn setPoints(self: *const Self, arg_points: *const godot.PoolVector2Array) !void {
        if (mbind_set_points == null) {
            mbind_set_points = try api.createMethod("Line2D", "set_points");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_points),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_points, base, cargs, result);
    }

    pub fn setRoundPrecision(self: *const Self, arg_precision: i32) !void {
        if (mbind_set_round_precision == null) {
            mbind_set_round_precision = try api.createMethod("Line2D", "set_round_precision");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_precision),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_round_precision, base, cargs, result);
    }

    pub fn setSharpLimit(self: *const Self, arg_limit: f32) !void {
        if (mbind_set_sharp_limit == null) {
            mbind_set_sharp_limit = try api.createMethod("Line2D", "set_sharp_limit");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_limit),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sharp_limit, base, cargs, result);
    }

    pub fn setTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_texture == null) {
            mbind_set_texture = try api.createMethod("Line2D", "set_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_texture, base, cargs, result);
    }

    pub fn setTextureMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_texture_mode == null) {
            mbind_set_texture_mode = try api.createMethod("Line2D", "set_texture_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_texture_mode, base, cargs, result);
    }

    pub fn setWidth(self: *const Self, arg_width: f32) !void {
        if (mbind_set_width == null) {
            mbind_set_width = try api.createMethod("Line2D", "set_width");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_width),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_width, base, cargs, result);
    }
};