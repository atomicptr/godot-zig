// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Object = @import("object.zig").Object;

// method bindings
var mbind_add_do_method: ?*c_api.godot_method_bind = null;
var mbind_add_do_property: ?*c_api.godot_method_bind = null;
var mbind_add_do_reference: ?*c_api.godot_method_bind = null;
var mbind_add_undo_method: ?*c_api.godot_method_bind = null;
var mbind_add_undo_property: ?*c_api.godot_method_bind = null;
var mbind_add_undo_reference: ?*c_api.godot_method_bind = null;
var mbind_clear_history: ?*c_api.godot_method_bind = null;
var mbind_commit_action: ?*c_api.godot_method_bind = null;
var mbind_create_action: ?*c_api.godot_method_bind = null;
var mbind_get_current_action_name: ?*c_api.godot_method_bind = null;
var mbind_get_version: ?*c_api.godot_method_bind = null;
var mbind_has_redo: ?*c_api.godot_method_bind = null;
var mbind_has_undo: ?*c_api.godot_method_bind = null;
var mbind_is_commiting_action: ?*c_api.godot_method_bind = null;
var mbind_redo: ?*c_api.godot_method_bind = null;
var mbind_undo: ?*c_api.godot_method_bind = null;
var mbind_undo_redo_constructor: ?fn () ?*c_api.godot_object = null;

pub const UndoRedo = struct {
    const Self = @This();
    const BaseClass = Object;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_undo_redo_constructor == null) {
            mbind_undo_redo_constructor = try api.createConstructor("UndoRedo");
        }
        return api.createObject(Self, mbind_undo_redo_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addDoMethod(self: *const Self, arg_object: *const godot.Object, arg_method: *const godot.String) !void {
        if (mbind_add_do_method == null) {
            mbind_add_do_method = try api.createMethod("UndoRedo", "add_do_method");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_object),
            @ptrCast(*const anyopaque, arg_method),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_do_method, base, cargs, result);
    }

    pub fn addDoProperty(self: *const Self, arg_object: *const godot.Object, arg_property: *const godot.String, arg_value: *const godot.Variant) !void {
        if (mbind_add_do_property == null) {
            mbind_add_do_property = try api.createMethod("UndoRedo", "add_do_property");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_object),
            @ptrCast(*const anyopaque, arg_property),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_do_property, base, cargs, result);
    }

    pub fn addDoReference(self: *const Self, arg_object: *const godot.Object) !void {
        if (mbind_add_do_reference == null) {
            mbind_add_do_reference = try api.createMethod("UndoRedo", "add_do_reference");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_object),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_do_reference, base, cargs, result);
    }

    pub fn addUndoMethod(self: *const Self, arg_object: *const godot.Object, arg_method: *const godot.String) !void {
        if (mbind_add_undo_method == null) {
            mbind_add_undo_method = try api.createMethod("UndoRedo", "add_undo_method");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_object),
            @ptrCast(*const anyopaque, arg_method),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_undo_method, base, cargs, result);
    }

    pub fn addUndoProperty(self: *const Self, arg_object: *const godot.Object, arg_property: *const godot.String, arg_value: *const godot.Variant) !void {
        if (mbind_add_undo_property == null) {
            mbind_add_undo_property = try api.createMethod("UndoRedo", "add_undo_property");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_object),
            @ptrCast(*const anyopaque, arg_property),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_undo_property, base, cargs, result);
    }

    pub fn addUndoReference(self: *const Self, arg_object: *const godot.Object) !void {
        if (mbind_add_undo_reference == null) {
            mbind_add_undo_reference = try api.createMethod("UndoRedo", "add_undo_reference");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_object),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_undo_reference, base, cargs, result);
    }

    pub fn clearHistory(self: *const Self, arg_increase_version: bool) !void {
        if (mbind_clear_history == null) {
            mbind_clear_history = try api.createMethod("UndoRedo", "clear_history");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_increase_version),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_history, base, cargs, result);
    }

    pub fn commitAction(self: *const Self) !void {
        if (mbind_commit_action == null) {
            mbind_commit_action = try api.createMethod("UndoRedo", "commit_action");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_commit_action, base, cargs, result);
    }

    pub fn createAction(self: *const Self, arg_name: *const godot.String, arg_merge_mode: i32) !void {
        if (mbind_create_action == null) {
            mbind_create_action = try api.createMethod("UndoRedo", "create_action");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, *arg_merge_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_action, base, cargs, result);
    }

    pub fn getCurrentActionName(self: *const Self) !godot.String {
        if (mbind_get_current_action_name == null) {
            mbind_get_current_action_name = try api.createMethod("UndoRedo", "get_current_action_name");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_current_action_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getVersion(self: *const Self) !i32 {
        if (mbind_get_version == null) {
            mbind_get_version = try api.createMethod("UndoRedo", "get_version");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_version, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn hasRedo(self: *const Self) !bool {
        if (mbind_has_redo == null) {
            mbind_has_redo = try api.createMethod("UndoRedo", "has_redo");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_redo, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn hasUndo(self: *const Self) !bool {
        if (mbind_has_undo == null) {
            mbind_has_undo = try api.createMethod("UndoRedo", "has_undo");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_undo, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isCommitingAction(self: *const Self) !bool {
        if (mbind_is_commiting_action == null) {
            mbind_is_commiting_action = try api.createMethod("UndoRedo", "is_commiting_action");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_commiting_action, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn redo(self: *const Self) !bool {
        if (mbind_redo == null) {
            mbind_redo = try api.createMethod("UndoRedo", "redo");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_redo, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn undo(self: *const Self) !bool {
        if (mbind_undo == null) {
            mbind_undo = try api.createMethod("UndoRedo", "undo");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_undo, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }
};