// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_adjustment_brightness: ?*c_api.godot_method_bind = null;
var mbind_get_adjustment_color_correction: ?*c_api.godot_method_bind = null;
var mbind_get_adjustment_contrast: ?*c_api.godot_method_bind = null;
var mbind_get_adjustment_saturation: ?*c_api.godot_method_bind = null;
var mbind_get_ambient_light_color: ?*c_api.godot_method_bind = null;
var mbind_get_ambient_light_energy: ?*c_api.godot_method_bind = null;
var mbind_get_ambient_light_sky_contribution: ?*c_api.godot_method_bind = null;
var mbind_get_background: ?*c_api.godot_method_bind = null;
var mbind_get_bg_color: ?*c_api.godot_method_bind = null;
var mbind_get_bg_energy: ?*c_api.godot_method_bind = null;
var mbind_get_camera_feed_id: ?*c_api.godot_method_bind = null;
var mbind_get_canvas_max_layer: ?*c_api.godot_method_bind = null;
var mbind_get_dof_blur_far_amount: ?*c_api.godot_method_bind = null;
var mbind_get_dof_blur_far_distance: ?*c_api.godot_method_bind = null;
var mbind_get_dof_blur_far_quality: ?*c_api.godot_method_bind = null;
var mbind_get_dof_blur_far_transition: ?*c_api.godot_method_bind = null;
var mbind_get_dof_blur_near_amount: ?*c_api.godot_method_bind = null;
var mbind_get_dof_blur_near_distance: ?*c_api.godot_method_bind = null;
var mbind_get_dof_blur_near_quality: ?*c_api.godot_method_bind = null;
var mbind_get_dof_blur_near_transition: ?*c_api.godot_method_bind = null;
var mbind_get_fog_color: ?*c_api.godot_method_bind = null;
var mbind_get_fog_depth_begin: ?*c_api.godot_method_bind = null;
var mbind_get_fog_depth_curve: ?*c_api.godot_method_bind = null;
var mbind_get_fog_depth_end: ?*c_api.godot_method_bind = null;
var mbind_get_fog_height_curve: ?*c_api.godot_method_bind = null;
var mbind_get_fog_height_max: ?*c_api.godot_method_bind = null;
var mbind_get_fog_height_min: ?*c_api.godot_method_bind = null;
var mbind_get_fog_sun_amount: ?*c_api.godot_method_bind = null;
var mbind_get_fog_sun_color: ?*c_api.godot_method_bind = null;
var mbind_get_fog_transmit_curve: ?*c_api.godot_method_bind = null;
var mbind_get_glow_blend_mode: ?*c_api.godot_method_bind = null;
var mbind_get_glow_bloom: ?*c_api.godot_method_bind = null;
var mbind_get_glow_hdr_bleed_scale: ?*c_api.godot_method_bind = null;
var mbind_get_glow_hdr_bleed_threshold: ?*c_api.godot_method_bind = null;
var mbind_get_glow_hdr_luminance_cap: ?*c_api.godot_method_bind = null;
var mbind_get_glow_intensity: ?*c_api.godot_method_bind = null;
var mbind_get_glow_strength: ?*c_api.godot_method_bind = null;
var mbind_get_sky: ?*c_api.godot_method_bind = null;
var mbind_get_sky_custom_fov: ?*c_api.godot_method_bind = null;
var mbind_get_sky_orientation: ?*c_api.godot_method_bind = null;
var mbind_get_sky_rotation: ?*c_api.godot_method_bind = null;
var mbind_get_sky_rotation_degrees: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_ao_channel_affect: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_bias: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_blur: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_color: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_direct_light_affect: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_edge_sharpness: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_intensity: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_intensity2: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_quality: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_radius: ?*c_api.godot_method_bind = null;
var mbind_get_ssao_radius2: ?*c_api.godot_method_bind = null;
var mbind_get_ssr_depth_tolerance: ?*c_api.godot_method_bind = null;
var mbind_get_ssr_fade_in: ?*c_api.godot_method_bind = null;
var mbind_get_ssr_fade_out: ?*c_api.godot_method_bind = null;
var mbind_get_ssr_max_steps: ?*c_api.godot_method_bind = null;
var mbind_get_tonemap_auto_exposure: ?*c_api.godot_method_bind = null;
var mbind_get_tonemap_auto_exposure_grey: ?*c_api.godot_method_bind = null;
var mbind_get_tonemap_auto_exposure_max: ?*c_api.godot_method_bind = null;
var mbind_get_tonemap_auto_exposure_min: ?*c_api.godot_method_bind = null;
var mbind_get_tonemap_auto_exposure_speed: ?*c_api.godot_method_bind = null;
var mbind_get_tonemap_exposure: ?*c_api.godot_method_bind = null;
var mbind_get_tonemap_white: ?*c_api.godot_method_bind = null;
var mbind_get_tonemapper: ?*c_api.godot_method_bind = null;
var mbind_is_adjustment_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_dof_blur_far_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_dof_blur_near_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_fog_depth_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_fog_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_fog_height_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_fog_transmit_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_glow_bicubic_upscale_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_glow_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_glow_high_quality_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_glow_level_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_ssao_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_ssr_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_ssr_rough: ?*c_api.godot_method_bind = null;
var mbind_set_adjustment_brightness: ?*c_api.godot_method_bind = null;
var mbind_set_adjustment_color_correction: ?*c_api.godot_method_bind = null;
var mbind_set_adjustment_contrast: ?*c_api.godot_method_bind = null;
var mbind_set_adjustment_enable: ?*c_api.godot_method_bind = null;
var mbind_set_adjustment_saturation: ?*c_api.godot_method_bind = null;
var mbind_set_ambient_light_color: ?*c_api.godot_method_bind = null;
var mbind_set_ambient_light_energy: ?*c_api.godot_method_bind = null;
var mbind_set_ambient_light_sky_contribution: ?*c_api.godot_method_bind = null;
var mbind_set_background: ?*c_api.godot_method_bind = null;
var mbind_set_bg_color: ?*c_api.godot_method_bind = null;
var mbind_set_bg_energy: ?*c_api.godot_method_bind = null;
var mbind_set_camera_feed_id: ?*c_api.godot_method_bind = null;
var mbind_set_canvas_max_layer: ?*c_api.godot_method_bind = null;
var mbind_set_dof_blur_far_amount: ?*c_api.godot_method_bind = null;
var mbind_set_dof_blur_far_distance: ?*c_api.godot_method_bind = null;
var mbind_set_dof_blur_far_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_dof_blur_far_quality: ?*c_api.godot_method_bind = null;
var mbind_set_dof_blur_far_transition: ?*c_api.godot_method_bind = null;
var mbind_set_dof_blur_near_amount: ?*c_api.godot_method_bind = null;
var mbind_set_dof_blur_near_distance: ?*c_api.godot_method_bind = null;
var mbind_set_dof_blur_near_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_dof_blur_near_quality: ?*c_api.godot_method_bind = null;
var mbind_set_dof_blur_near_transition: ?*c_api.godot_method_bind = null;
var mbind_set_fog_color: ?*c_api.godot_method_bind = null;
var mbind_set_fog_depth_begin: ?*c_api.godot_method_bind = null;
var mbind_set_fog_depth_curve: ?*c_api.godot_method_bind = null;
var mbind_set_fog_depth_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_fog_depth_end: ?*c_api.godot_method_bind = null;
var mbind_set_fog_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_fog_height_curve: ?*c_api.godot_method_bind = null;
var mbind_set_fog_height_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_fog_height_max: ?*c_api.godot_method_bind = null;
var mbind_set_fog_height_min: ?*c_api.godot_method_bind = null;
var mbind_set_fog_sun_amount: ?*c_api.godot_method_bind = null;
var mbind_set_fog_sun_color: ?*c_api.godot_method_bind = null;
var mbind_set_fog_transmit_curve: ?*c_api.godot_method_bind = null;
var mbind_set_fog_transmit_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_glow_bicubic_upscale: ?*c_api.godot_method_bind = null;
var mbind_set_glow_blend_mode: ?*c_api.godot_method_bind = null;
var mbind_set_glow_bloom: ?*c_api.godot_method_bind = null;
var mbind_set_glow_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_glow_hdr_bleed_scale: ?*c_api.godot_method_bind = null;
var mbind_set_glow_hdr_bleed_threshold: ?*c_api.godot_method_bind = null;
var mbind_set_glow_hdr_luminance_cap: ?*c_api.godot_method_bind = null;
var mbind_set_glow_high_quality: ?*c_api.godot_method_bind = null;
var mbind_set_glow_intensity: ?*c_api.godot_method_bind = null;
var mbind_set_glow_level: ?*c_api.godot_method_bind = null;
var mbind_set_glow_strength: ?*c_api.godot_method_bind = null;
var mbind_set_sky: ?*c_api.godot_method_bind = null;
var mbind_set_sky_custom_fov: ?*c_api.godot_method_bind = null;
var mbind_set_sky_orientation: ?*c_api.godot_method_bind = null;
var mbind_set_sky_rotation: ?*c_api.godot_method_bind = null;
var mbind_set_sky_rotation_degrees: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_ao_channel_affect: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_bias: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_blur: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_color: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_direct_light_affect: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_edge_sharpness: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_intensity: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_intensity2: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_quality: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_radius: ?*c_api.godot_method_bind = null;
var mbind_set_ssao_radius2: ?*c_api.godot_method_bind = null;
var mbind_set_ssr_depth_tolerance: ?*c_api.godot_method_bind = null;
var mbind_set_ssr_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_ssr_fade_in: ?*c_api.godot_method_bind = null;
var mbind_set_ssr_fade_out: ?*c_api.godot_method_bind = null;
var mbind_set_ssr_max_steps: ?*c_api.godot_method_bind = null;
var mbind_set_ssr_rough: ?*c_api.godot_method_bind = null;
var mbind_set_tonemap_auto_exposure: ?*c_api.godot_method_bind = null;
var mbind_set_tonemap_auto_exposure_grey: ?*c_api.godot_method_bind = null;
var mbind_set_tonemap_auto_exposure_max: ?*c_api.godot_method_bind = null;
var mbind_set_tonemap_auto_exposure_min: ?*c_api.godot_method_bind = null;
var mbind_set_tonemap_auto_exposure_speed: ?*c_api.godot_method_bind = null;
var mbind_set_tonemap_exposure: ?*c_api.godot_method_bind = null;
var mbind_set_tonemap_white: ?*c_api.godot_method_bind = null;
var mbind_set_tonemapper: ?*c_api.godot_method_bind = null;
var mbind_environment_constructor: ?fn () ?*c_api.godot_object = null;

pub const Environment = struct {
    const Self = @This();
    pub const BaseClass = godot.Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_environment_constructor == null) {
            mbind_environment_constructor = try api.createConstructor("Environment");
        }
        return api.createObject(Self, mbind_environment_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAdjustmentBrightness(self: *const Self) !f32 {
        if (mbind_get_adjustment_brightness == null) {
            mbind_get_adjustment_brightness = try api.createMethod("Environment", "get_adjustment_brightness");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_adjustment_brightness, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getAdjustmentColorCorrection(self: *const Self) !godot.Texture {
        if (mbind_get_adjustment_color_correction == null) {
            mbind_get_adjustment_color_correction = try api.createMethod("Environment", "get_adjustment_color_correction");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_adjustment_color_correction, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getAdjustmentContrast(self: *const Self) !f32 {
        if (mbind_get_adjustment_contrast == null) {
            mbind_get_adjustment_contrast = try api.createMethod("Environment", "get_adjustment_contrast");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_adjustment_contrast, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getAdjustmentSaturation(self: *const Self) !f32 {
        if (mbind_get_adjustment_saturation == null) {
            mbind_get_adjustment_saturation = try api.createMethod("Environment", "get_adjustment_saturation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_adjustment_saturation, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getAmbientLightColor(self: *const Self) !godot.Color {
        if (mbind_get_ambient_light_color == null) {
            mbind_get_ambient_light_color = try api.createMethod("Environment", "get_ambient_light_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ambient_light_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getAmbientLightEnergy(self: *const Self) !f32 {
        if (mbind_get_ambient_light_energy == null) {
            mbind_get_ambient_light_energy = try api.createMethod("Environment", "get_ambient_light_energy");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ambient_light_energy, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getAmbientLightSkyContribution(self: *const Self) !f32 {
        if (mbind_get_ambient_light_sky_contribution == null) {
            mbind_get_ambient_light_sky_contribution = try api.createMethod("Environment", "get_ambient_light_sky_contribution");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ambient_light_sky_contribution, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getBackground(self: *const Self) !i32 {
        if (mbind_get_background == null) {
            mbind_get_background = try api.createMethod("Environment", "get_background");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_background, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBgColor(self: *const Self) !godot.Color {
        if (mbind_get_bg_color == null) {
            mbind_get_bg_color = try api.createMethod("Environment", "get_bg_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bg_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getBgEnergy(self: *const Self) !f32 {
        if (mbind_get_bg_energy == null) {
            mbind_get_bg_energy = try api.createMethod("Environment", "get_bg_energy");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bg_energy, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getCameraFeedId(self: *const Self) !i32 {
        if (mbind_get_camera_feed_id == null) {
            mbind_get_camera_feed_id = try api.createMethod("Environment", "get_camera_feed_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_camera_feed_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCanvasMaxLayer(self: *const Self) !i32 {
        if (mbind_get_canvas_max_layer == null) {
            mbind_get_canvas_max_layer = try api.createMethod("Environment", "get_canvas_max_layer");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_canvas_max_layer, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDofBlurFarAmount(self: *const Self) !f32 {
        if (mbind_get_dof_blur_far_amount == null) {
            mbind_get_dof_blur_far_amount = try api.createMethod("Environment", "get_dof_blur_far_amount");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dof_blur_far_amount, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDofBlurFarDistance(self: *const Self) !f32 {
        if (mbind_get_dof_blur_far_distance == null) {
            mbind_get_dof_blur_far_distance = try api.createMethod("Environment", "get_dof_blur_far_distance");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dof_blur_far_distance, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDofBlurFarQuality(self: *const Self) !i32 {
        if (mbind_get_dof_blur_far_quality == null) {
            mbind_get_dof_blur_far_quality = try api.createMethod("Environment", "get_dof_blur_far_quality");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dof_blur_far_quality, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDofBlurFarTransition(self: *const Self) !f32 {
        if (mbind_get_dof_blur_far_transition == null) {
            mbind_get_dof_blur_far_transition = try api.createMethod("Environment", "get_dof_blur_far_transition");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dof_blur_far_transition, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDofBlurNearAmount(self: *const Self) !f32 {
        if (mbind_get_dof_blur_near_amount == null) {
            mbind_get_dof_blur_near_amount = try api.createMethod("Environment", "get_dof_blur_near_amount");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dof_blur_near_amount, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDofBlurNearDistance(self: *const Self) !f32 {
        if (mbind_get_dof_blur_near_distance == null) {
            mbind_get_dof_blur_near_distance = try api.createMethod("Environment", "get_dof_blur_near_distance");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dof_blur_near_distance, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDofBlurNearQuality(self: *const Self) !i32 {
        if (mbind_get_dof_blur_near_quality == null) {
            mbind_get_dof_blur_near_quality = try api.createMethod("Environment", "get_dof_blur_near_quality");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dof_blur_near_quality, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDofBlurNearTransition(self: *const Self) !f32 {
        if (mbind_get_dof_blur_near_transition == null) {
            mbind_get_dof_blur_near_transition = try api.createMethod("Environment", "get_dof_blur_near_transition");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dof_blur_near_transition, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFogColor(self: *const Self) !godot.Color {
        if (mbind_get_fog_color == null) {
            mbind_get_fog_color = try api.createMethod("Environment", "get_fog_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fog_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getFogDepthBegin(self: *const Self) !f32 {
        if (mbind_get_fog_depth_begin == null) {
            mbind_get_fog_depth_begin = try api.createMethod("Environment", "get_fog_depth_begin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fog_depth_begin, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFogDepthCurve(self: *const Self) !f32 {
        if (mbind_get_fog_depth_curve == null) {
            mbind_get_fog_depth_curve = try api.createMethod("Environment", "get_fog_depth_curve");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fog_depth_curve, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFogDepthEnd(self: *const Self) !f32 {
        if (mbind_get_fog_depth_end == null) {
            mbind_get_fog_depth_end = try api.createMethod("Environment", "get_fog_depth_end");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fog_depth_end, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFogHeightCurve(self: *const Self) !f32 {
        if (mbind_get_fog_height_curve == null) {
            mbind_get_fog_height_curve = try api.createMethod("Environment", "get_fog_height_curve");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fog_height_curve, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFogHeightMax(self: *const Self) !f32 {
        if (mbind_get_fog_height_max == null) {
            mbind_get_fog_height_max = try api.createMethod("Environment", "get_fog_height_max");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fog_height_max, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFogHeightMin(self: *const Self) !f32 {
        if (mbind_get_fog_height_min == null) {
            mbind_get_fog_height_min = try api.createMethod("Environment", "get_fog_height_min");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fog_height_min, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFogSunAmount(self: *const Self) !f32 {
        if (mbind_get_fog_sun_amount == null) {
            mbind_get_fog_sun_amount = try api.createMethod("Environment", "get_fog_sun_amount");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fog_sun_amount, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFogSunColor(self: *const Self) !godot.Color {
        if (mbind_get_fog_sun_color == null) {
            mbind_get_fog_sun_color = try api.createMethod("Environment", "get_fog_sun_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fog_sun_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getFogTransmitCurve(self: *const Self) !f32 {
        if (mbind_get_fog_transmit_curve == null) {
            mbind_get_fog_transmit_curve = try api.createMethod("Environment", "get_fog_transmit_curve");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fog_transmit_curve, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGlowBlendMode(self: *const Self) !i32 {
        if (mbind_get_glow_blend_mode == null) {
            mbind_get_glow_blend_mode = try api.createMethod("Environment", "get_glow_blend_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_glow_blend_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getGlowBloom(self: *const Self) !f32 {
        if (mbind_get_glow_bloom == null) {
            mbind_get_glow_bloom = try api.createMethod("Environment", "get_glow_bloom");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_glow_bloom, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGlowHdrBleedScale(self: *const Self) !f32 {
        if (mbind_get_glow_hdr_bleed_scale == null) {
            mbind_get_glow_hdr_bleed_scale = try api.createMethod("Environment", "get_glow_hdr_bleed_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_glow_hdr_bleed_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGlowHdrBleedThreshold(self: *const Self) !f32 {
        if (mbind_get_glow_hdr_bleed_threshold == null) {
            mbind_get_glow_hdr_bleed_threshold = try api.createMethod("Environment", "get_glow_hdr_bleed_threshold");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_glow_hdr_bleed_threshold, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGlowHdrLuminanceCap(self: *const Self) !f32 {
        if (mbind_get_glow_hdr_luminance_cap == null) {
            mbind_get_glow_hdr_luminance_cap = try api.createMethod("Environment", "get_glow_hdr_luminance_cap");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_glow_hdr_luminance_cap, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGlowIntensity(self: *const Self) !f32 {
        if (mbind_get_glow_intensity == null) {
            mbind_get_glow_intensity = try api.createMethod("Environment", "get_glow_intensity");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_glow_intensity, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGlowStrength(self: *const Self) !f32 {
        if (mbind_get_glow_strength == null) {
            mbind_get_glow_strength = try api.createMethod("Environment", "get_glow_strength");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_glow_strength, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSky(self: *const Self) !godot.Sky {
        if (mbind_get_sky == null) {
            mbind_get_sky = try api.createMethod("Environment", "get_sky");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sky, base, cargs, result);
        return @ptrCast(*godot.Sky, @alignCast(@alignOf(&godot.Sky), result)).*;
    }

    pub fn getSkyCustomFov(self: *const Self) !f32 {
        if (mbind_get_sky_custom_fov == null) {
            mbind_get_sky_custom_fov = try api.createMethod("Environment", "get_sky_custom_fov");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sky_custom_fov, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSkyOrientation(self: *const Self) !godot.Basis {
        if (mbind_get_sky_orientation == null) {
            mbind_get_sky_orientation = try api.createMethod("Environment", "get_sky_orientation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sky_orientation, base, cargs, result);
        return @ptrCast(*godot.Basis, @alignCast(@alignOf(&godot.Basis), result)).*;
    }

    pub fn getSkyRotation(self: *const Self) !godot.Vector3 {
        if (mbind_get_sky_rotation == null) {
            mbind_get_sky_rotation = try api.createMethod("Environment", "get_sky_rotation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sky_rotation, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getSkyRotationDegrees(self: *const Self) !godot.Vector3 {
        if (mbind_get_sky_rotation_degrees == null) {
            mbind_get_sky_rotation_degrees = try api.createMethod("Environment", "get_sky_rotation_degrees");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sky_rotation_degrees, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getSsaoAoChannelAffect(self: *const Self) !f32 {
        if (mbind_get_ssao_ao_channel_affect == null) {
            mbind_get_ssao_ao_channel_affect = try api.createMethod("Environment", "get_ssao_ao_channel_affect");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_ao_channel_affect, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsaoBias(self: *const Self) !f32 {
        if (mbind_get_ssao_bias == null) {
            mbind_get_ssao_bias = try api.createMethod("Environment", "get_ssao_bias");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_bias, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsaoBlur(self: *const Self) !i32 {
        if (mbind_get_ssao_blur == null) {
            mbind_get_ssao_blur = try api.createMethod("Environment", "get_ssao_blur");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_blur, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSsaoColor(self: *const Self) !godot.Color {
        if (mbind_get_ssao_color == null) {
            mbind_get_ssao_color = try api.createMethod("Environment", "get_ssao_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getSsaoDirectLightAffect(self: *const Self) !f32 {
        if (mbind_get_ssao_direct_light_affect == null) {
            mbind_get_ssao_direct_light_affect = try api.createMethod("Environment", "get_ssao_direct_light_affect");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_direct_light_affect, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsaoEdgeSharpness(self: *const Self) !f32 {
        if (mbind_get_ssao_edge_sharpness == null) {
            mbind_get_ssao_edge_sharpness = try api.createMethod("Environment", "get_ssao_edge_sharpness");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_edge_sharpness, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsaoIntensity(self: *const Self) !f32 {
        if (mbind_get_ssao_intensity == null) {
            mbind_get_ssao_intensity = try api.createMethod("Environment", "get_ssao_intensity");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_intensity, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsaoIntensity2(self: *const Self) !f32 {
        if (mbind_get_ssao_intensity2 == null) {
            mbind_get_ssao_intensity2 = try api.createMethod("Environment", "get_ssao_intensity2");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_intensity2, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsaoQuality(self: *const Self) !i32 {
        if (mbind_get_ssao_quality == null) {
            mbind_get_ssao_quality = try api.createMethod("Environment", "get_ssao_quality");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_quality, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSsaoRadius(self: *const Self) !f32 {
        if (mbind_get_ssao_radius == null) {
            mbind_get_ssao_radius = try api.createMethod("Environment", "get_ssao_radius");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_radius, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsaoRadius2(self: *const Self) !f32 {
        if (mbind_get_ssao_radius2 == null) {
            mbind_get_ssao_radius2 = try api.createMethod("Environment", "get_ssao_radius2");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssao_radius2, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsrDepthTolerance(self: *const Self) !f32 {
        if (mbind_get_ssr_depth_tolerance == null) {
            mbind_get_ssr_depth_tolerance = try api.createMethod("Environment", "get_ssr_depth_tolerance");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssr_depth_tolerance, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsrFadeIn(self: *const Self) !f32 {
        if (mbind_get_ssr_fade_in == null) {
            mbind_get_ssr_fade_in = try api.createMethod("Environment", "get_ssr_fade_in");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssr_fade_in, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsrFadeOut(self: *const Self) !f32 {
        if (mbind_get_ssr_fade_out == null) {
            mbind_get_ssr_fade_out = try api.createMethod("Environment", "get_ssr_fade_out");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssr_fade_out, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSsrMaxSteps(self: *const Self) !i32 {
        if (mbind_get_ssr_max_steps == null) {
            mbind_get_ssr_max_steps = try api.createMethod("Environment", "get_ssr_max_steps");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssr_max_steps, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTonemapAutoExposure(self: *const Self) !bool {
        if (mbind_get_tonemap_auto_exposure == null) {
            mbind_get_tonemap_auto_exposure = try api.createMethod("Environment", "get_tonemap_auto_exposure");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tonemap_auto_exposure, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getTonemapAutoExposureGrey(self: *const Self) !f32 {
        if (mbind_get_tonemap_auto_exposure_grey == null) {
            mbind_get_tonemap_auto_exposure_grey = try api.createMethod("Environment", "get_tonemap_auto_exposure_grey");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tonemap_auto_exposure_grey, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTonemapAutoExposureMax(self: *const Self) !f32 {
        if (mbind_get_tonemap_auto_exposure_max == null) {
            mbind_get_tonemap_auto_exposure_max = try api.createMethod("Environment", "get_tonemap_auto_exposure_max");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tonemap_auto_exposure_max, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTonemapAutoExposureMin(self: *const Self) !f32 {
        if (mbind_get_tonemap_auto_exposure_min == null) {
            mbind_get_tonemap_auto_exposure_min = try api.createMethod("Environment", "get_tonemap_auto_exposure_min");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tonemap_auto_exposure_min, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTonemapAutoExposureSpeed(self: *const Self) !f32 {
        if (mbind_get_tonemap_auto_exposure_speed == null) {
            mbind_get_tonemap_auto_exposure_speed = try api.createMethod("Environment", "get_tonemap_auto_exposure_speed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tonemap_auto_exposure_speed, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTonemapExposure(self: *const Self) !f32 {
        if (mbind_get_tonemap_exposure == null) {
            mbind_get_tonemap_exposure = try api.createMethod("Environment", "get_tonemap_exposure");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tonemap_exposure, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTonemapWhite(self: *const Self) !f32 {
        if (mbind_get_tonemap_white == null) {
            mbind_get_tonemap_white = try api.createMethod("Environment", "get_tonemap_white");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tonemap_white, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTonemapper(self: *const Self) !i32 {
        if (mbind_get_tonemapper == null) {
            mbind_get_tonemapper = try api.createMethod("Environment", "get_tonemapper");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tonemapper, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isAdjustmentEnabled(self: *const Self) !bool {
        if (mbind_is_adjustment_enabled == null) {
            mbind_is_adjustment_enabled = try api.createMethod("Environment", "is_adjustment_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_adjustment_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isDofBlurFarEnabled(self: *const Self) !bool {
        if (mbind_is_dof_blur_far_enabled == null) {
            mbind_is_dof_blur_far_enabled = try api.createMethod("Environment", "is_dof_blur_far_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_dof_blur_far_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isDofBlurNearEnabled(self: *const Self) !bool {
        if (mbind_is_dof_blur_near_enabled == null) {
            mbind_is_dof_blur_near_enabled = try api.createMethod("Environment", "is_dof_blur_near_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_dof_blur_near_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFogDepthEnabled(self: *const Self) !bool {
        if (mbind_is_fog_depth_enabled == null) {
            mbind_is_fog_depth_enabled = try api.createMethod("Environment", "is_fog_depth_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_fog_depth_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFogEnabled(self: *const Self) !bool {
        if (mbind_is_fog_enabled == null) {
            mbind_is_fog_enabled = try api.createMethod("Environment", "is_fog_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_fog_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFogHeightEnabled(self: *const Self) !bool {
        if (mbind_is_fog_height_enabled == null) {
            mbind_is_fog_height_enabled = try api.createMethod("Environment", "is_fog_height_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_fog_height_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFogTransmitEnabled(self: *const Self) !bool {
        if (mbind_is_fog_transmit_enabled == null) {
            mbind_is_fog_transmit_enabled = try api.createMethod("Environment", "is_fog_transmit_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_fog_transmit_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isGlowBicubicUpscaleEnabled(self: *const Self) !bool {
        if (mbind_is_glow_bicubic_upscale_enabled == null) {
            mbind_is_glow_bicubic_upscale_enabled = try api.createMethod("Environment", "is_glow_bicubic_upscale_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_glow_bicubic_upscale_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isGlowEnabled(self: *const Self) !bool {
        if (mbind_is_glow_enabled == null) {
            mbind_is_glow_enabled = try api.createMethod("Environment", "is_glow_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_glow_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isGlowHighQualityEnabled(self: *const Self) !bool {
        if (mbind_is_glow_high_quality_enabled == null) {
            mbind_is_glow_high_quality_enabled = try api.createMethod("Environment", "is_glow_high_quality_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_glow_high_quality_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isGlowLevelEnabled(self: *const Self, arg_idx: i32) !bool {
        if (mbind_is_glow_level_enabled == null) {
            mbind_is_glow_level_enabled = try api.createMethod("Environment", "is_glow_level_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_glow_level_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isSsaoEnabled(self: *const Self) !bool {
        if (mbind_is_ssao_enabled == null) {
            mbind_is_ssao_enabled = try api.createMethod("Environment", "is_ssao_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_ssao_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isSsrEnabled(self: *const Self) !bool {
        if (mbind_is_ssr_enabled == null) {
            mbind_is_ssr_enabled = try api.createMethod("Environment", "is_ssr_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_ssr_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isSsrRough(self: *const Self) !bool {
        if (mbind_is_ssr_rough == null) {
            mbind_is_ssr_rough = try api.createMethod("Environment", "is_ssr_rough");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_ssr_rough, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setAdjustmentBrightness(self: *const Self, arg_brightness: f32) !void {
        if (mbind_set_adjustment_brightness == null) {
            mbind_set_adjustment_brightness = try api.createMethod("Environment", "set_adjustment_brightness");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_brightness),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_adjustment_brightness, base, cargs, result);
    }

    pub fn setAdjustmentColorCorrection(self: *const Self, arg_color_correction: *const godot.Texture) !void {
        if (mbind_set_adjustment_color_correction == null) {
            mbind_set_adjustment_color_correction = try api.createMethod("Environment", "set_adjustment_color_correction");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color_correction),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_adjustment_color_correction, base, cargs, result);
    }

    pub fn setAdjustmentContrast(self: *const Self, arg_contrast: f32) !void {
        if (mbind_set_adjustment_contrast == null) {
            mbind_set_adjustment_contrast = try api.createMethod("Environment", "set_adjustment_contrast");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_contrast),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_adjustment_contrast, base, cargs, result);
    }

    pub fn setAdjustmentEnable(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_adjustment_enable == null) {
            mbind_set_adjustment_enable = try api.createMethod("Environment", "set_adjustment_enable");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_adjustment_enable, base, cargs, result);
    }

    pub fn setAdjustmentSaturation(self: *const Self, arg_saturation: f32) !void {
        if (mbind_set_adjustment_saturation == null) {
            mbind_set_adjustment_saturation = try api.createMethod("Environment", "set_adjustment_saturation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_saturation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_adjustment_saturation, base, cargs, result);
    }

    pub fn setAmbientLightColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_ambient_light_color == null) {
            mbind_set_ambient_light_color = try api.createMethod("Environment", "set_ambient_light_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ambient_light_color, base, cargs, result);
    }

    pub fn setAmbientLightEnergy(self: *const Self, arg_energy: f32) !void {
        if (mbind_set_ambient_light_energy == null) {
            mbind_set_ambient_light_energy = try api.createMethod("Environment", "set_ambient_light_energy");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_energy),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ambient_light_energy, base, cargs, result);
    }

    pub fn setAmbientLightSkyContribution(self: *const Self, arg_energy: f32) !void {
        if (mbind_set_ambient_light_sky_contribution == null) {
            mbind_set_ambient_light_sky_contribution = try api.createMethod("Environment", "set_ambient_light_sky_contribution");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_energy),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ambient_light_sky_contribution, base, cargs, result);
    }

    pub fn setBackground(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_background == null) {
            mbind_set_background = try api.createMethod("Environment", "set_background");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_background, base, cargs, result);
    }

    pub fn setBgColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_bg_color == null) {
            mbind_set_bg_color = try api.createMethod("Environment", "set_bg_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bg_color, base, cargs, result);
    }

    pub fn setBgEnergy(self: *const Self, arg_energy: f32) !void {
        if (mbind_set_bg_energy == null) {
            mbind_set_bg_energy = try api.createMethod("Environment", "set_bg_energy");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_energy),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bg_energy, base, cargs, result);
    }

    pub fn setCameraFeedId(self: *const Self, arg_camera_feed_id: i32) !void {
        if (mbind_set_camera_feed_id == null) {
            mbind_set_camera_feed_id = try api.createMethod("Environment", "set_camera_feed_id");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_camera_feed_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_camera_feed_id, base, cargs, result);
    }

    pub fn setCanvasMaxLayer(self: *const Self, arg_layer: i32) !void {
        if (mbind_set_canvas_max_layer == null) {
            mbind_set_canvas_max_layer = try api.createMethod("Environment", "set_canvas_max_layer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_layer),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_canvas_max_layer, base, cargs, result);
    }

    pub fn setDofBlurFarAmount(self: *const Self, arg_intensity: f32) !void {
        if (mbind_set_dof_blur_far_amount == null) {
            mbind_set_dof_blur_far_amount = try api.createMethod("Environment", "set_dof_blur_far_amount");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dof_blur_far_amount, base, cargs, result);
    }

    pub fn setDofBlurFarDistance(self: *const Self, arg_intensity: f32) !void {
        if (mbind_set_dof_blur_far_distance == null) {
            mbind_set_dof_blur_far_distance = try api.createMethod("Environment", "set_dof_blur_far_distance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dof_blur_far_distance, base, cargs, result);
    }

    pub fn setDofBlurFarEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_dof_blur_far_enabled == null) {
            mbind_set_dof_blur_far_enabled = try api.createMethod("Environment", "set_dof_blur_far_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dof_blur_far_enabled, base, cargs, result);
    }

    pub fn setDofBlurFarQuality(self: *const Self, arg_intensity: i32) !void {
        if (mbind_set_dof_blur_far_quality == null) {
            mbind_set_dof_blur_far_quality = try api.createMethod("Environment", "set_dof_blur_far_quality");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dof_blur_far_quality, base, cargs, result);
    }

    pub fn setDofBlurFarTransition(self: *const Self, arg_intensity: f32) !void {
        if (mbind_set_dof_blur_far_transition == null) {
            mbind_set_dof_blur_far_transition = try api.createMethod("Environment", "set_dof_blur_far_transition");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dof_blur_far_transition, base, cargs, result);
    }

    pub fn setDofBlurNearAmount(self: *const Self, arg_intensity: f32) !void {
        if (mbind_set_dof_blur_near_amount == null) {
            mbind_set_dof_blur_near_amount = try api.createMethod("Environment", "set_dof_blur_near_amount");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dof_blur_near_amount, base, cargs, result);
    }

    pub fn setDofBlurNearDistance(self: *const Self, arg_intensity: f32) !void {
        if (mbind_set_dof_blur_near_distance == null) {
            mbind_set_dof_blur_near_distance = try api.createMethod("Environment", "set_dof_blur_near_distance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dof_blur_near_distance, base, cargs, result);
    }

    pub fn setDofBlurNearEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_dof_blur_near_enabled == null) {
            mbind_set_dof_blur_near_enabled = try api.createMethod("Environment", "set_dof_blur_near_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dof_blur_near_enabled, base, cargs, result);
    }

    pub fn setDofBlurNearQuality(self: *const Self, arg_level: i32) !void {
        if (mbind_set_dof_blur_near_quality == null) {
            mbind_set_dof_blur_near_quality = try api.createMethod("Environment", "set_dof_blur_near_quality");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_level),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dof_blur_near_quality, base, cargs, result);
    }

    pub fn setDofBlurNearTransition(self: *const Self, arg_intensity: f32) !void {
        if (mbind_set_dof_blur_near_transition == null) {
            mbind_set_dof_blur_near_transition = try api.createMethod("Environment", "set_dof_blur_near_transition");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dof_blur_near_transition, base, cargs, result);
    }

    pub fn setFogColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_fog_color == null) {
            mbind_set_fog_color = try api.createMethod("Environment", "set_fog_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_color, base, cargs, result);
    }

    pub fn setFogDepthBegin(self: *const Self, arg_distance: f32) !void {
        if (mbind_set_fog_depth_begin == null) {
            mbind_set_fog_depth_begin = try api.createMethod("Environment", "set_fog_depth_begin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_distance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_depth_begin, base, cargs, result);
    }

    pub fn setFogDepthCurve(self: *const Self, arg_curve: f32) !void {
        if (mbind_set_fog_depth_curve == null) {
            mbind_set_fog_depth_curve = try api.createMethod("Environment", "set_fog_depth_curve");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_curve),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_depth_curve, base, cargs, result);
    }

    pub fn setFogDepthEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_fog_depth_enabled == null) {
            mbind_set_fog_depth_enabled = try api.createMethod("Environment", "set_fog_depth_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_depth_enabled, base, cargs, result);
    }

    pub fn setFogDepthEnd(self: *const Self, arg_distance: f32) !void {
        if (mbind_set_fog_depth_end == null) {
            mbind_set_fog_depth_end = try api.createMethod("Environment", "set_fog_depth_end");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_distance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_depth_end, base, cargs, result);
    }

    pub fn setFogEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_fog_enabled == null) {
            mbind_set_fog_enabled = try api.createMethod("Environment", "set_fog_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_enabled, base, cargs, result);
    }

    pub fn setFogHeightCurve(self: *const Self, arg_curve: f32) !void {
        if (mbind_set_fog_height_curve == null) {
            mbind_set_fog_height_curve = try api.createMethod("Environment", "set_fog_height_curve");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_curve),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_height_curve, base, cargs, result);
    }

    pub fn setFogHeightEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_fog_height_enabled == null) {
            mbind_set_fog_height_enabled = try api.createMethod("Environment", "set_fog_height_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_height_enabled, base, cargs, result);
    }

    pub fn setFogHeightMax(self: *const Self, arg_height: f32) !void {
        if (mbind_set_fog_height_max == null) {
            mbind_set_fog_height_max = try api.createMethod("Environment", "set_fog_height_max");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_height),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_height_max, base, cargs, result);
    }

    pub fn setFogHeightMin(self: *const Self, arg_height: f32) !void {
        if (mbind_set_fog_height_min == null) {
            mbind_set_fog_height_min = try api.createMethod("Environment", "set_fog_height_min");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_height),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_height_min, base, cargs, result);
    }

    pub fn setFogSunAmount(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_fog_sun_amount == null) {
            mbind_set_fog_sun_amount = try api.createMethod("Environment", "set_fog_sun_amount");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_sun_amount, base, cargs, result);
    }

    pub fn setFogSunColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_fog_sun_color == null) {
            mbind_set_fog_sun_color = try api.createMethod("Environment", "set_fog_sun_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_sun_color, base, cargs, result);
    }

    pub fn setFogTransmitCurve(self: *const Self, arg_curve: f32) !void {
        if (mbind_set_fog_transmit_curve == null) {
            mbind_set_fog_transmit_curve = try api.createMethod("Environment", "set_fog_transmit_curve");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_curve),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_transmit_curve, base, cargs, result);
    }

    pub fn setFogTransmitEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_fog_transmit_enabled == null) {
            mbind_set_fog_transmit_enabled = try api.createMethod("Environment", "set_fog_transmit_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fog_transmit_enabled, base, cargs, result);
    }

    pub fn setGlowBicubicUpscale(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_glow_bicubic_upscale == null) {
            mbind_set_glow_bicubic_upscale = try api.createMethod("Environment", "set_glow_bicubic_upscale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_bicubic_upscale, base, cargs, result);
    }

    pub fn setGlowBlendMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_glow_blend_mode == null) {
            mbind_set_glow_blend_mode = try api.createMethod("Environment", "set_glow_blend_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_blend_mode, base, cargs, result);
    }

    pub fn setGlowBloom(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_glow_bloom == null) {
            mbind_set_glow_bloom = try api.createMethod("Environment", "set_glow_bloom");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_bloom, base, cargs, result);
    }

    pub fn setGlowEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_glow_enabled == null) {
            mbind_set_glow_enabled = try api.createMethod("Environment", "set_glow_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_enabled, base, cargs, result);
    }

    pub fn setGlowHdrBleedScale(self: *const Self, arg_scale: f32) !void {
        if (mbind_set_glow_hdr_bleed_scale == null) {
            mbind_set_glow_hdr_bleed_scale = try api.createMethod("Environment", "set_glow_hdr_bleed_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_hdr_bleed_scale, base, cargs, result);
    }

    pub fn setGlowHdrBleedThreshold(self: *const Self, arg_threshold: f32) !void {
        if (mbind_set_glow_hdr_bleed_threshold == null) {
            mbind_set_glow_hdr_bleed_threshold = try api.createMethod("Environment", "set_glow_hdr_bleed_threshold");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_threshold),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_hdr_bleed_threshold, base, cargs, result);
    }

    pub fn setGlowHdrLuminanceCap(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_glow_hdr_luminance_cap == null) {
            mbind_set_glow_hdr_luminance_cap = try api.createMethod("Environment", "set_glow_hdr_luminance_cap");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_hdr_luminance_cap, base, cargs, result);
    }

    pub fn setGlowHighQuality(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_glow_high_quality == null) {
            mbind_set_glow_high_quality = try api.createMethod("Environment", "set_glow_high_quality");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_high_quality, base, cargs, result);
    }

    pub fn setGlowIntensity(self: *const Self, arg_intensity: f32) !void {
        if (mbind_set_glow_intensity == null) {
            mbind_set_glow_intensity = try api.createMethod("Environment", "set_glow_intensity");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_intensity, base, cargs, result);
    }

    pub fn setGlowLevel(self: *const Self, arg_idx: i32, arg_enabled: bool) !void {
        if (mbind_set_glow_level == null) {
            mbind_set_glow_level = try api.createMethod("Environment", "set_glow_level");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_level, base, cargs, result);
    }

    pub fn setGlowStrength(self: *const Self, arg_strength: f32) !void {
        if (mbind_set_glow_strength == null) {
            mbind_set_glow_strength = try api.createMethod("Environment", "set_glow_strength");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_strength),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_glow_strength, base, cargs, result);
    }

    pub fn setSky(self: *const Self, arg_sky: *const godot.Sky) !void {
        if (mbind_set_sky == null) {
            mbind_set_sky = try api.createMethod("Environment", "set_sky");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_sky),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sky, base, cargs, result);
    }

    pub fn setSkyCustomFov(self: *const Self, arg_scale: f32) !void {
        if (mbind_set_sky_custom_fov == null) {
            mbind_set_sky_custom_fov = try api.createMethod("Environment", "set_sky_custom_fov");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sky_custom_fov, base, cargs, result);
    }

    pub fn setSkyOrientation(self: *const Self, arg_orientation: *const godot.Basis) !void {
        if (mbind_set_sky_orientation == null) {
            mbind_set_sky_orientation = try api.createMethod("Environment", "set_sky_orientation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_orientation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sky_orientation, base, cargs, result);
    }

    pub fn setSkyRotation(self: *const Self, arg_euler_radians: *const godot.Vector3) !void {
        if (mbind_set_sky_rotation == null) {
            mbind_set_sky_rotation = try api.createMethod("Environment", "set_sky_rotation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_euler_radians),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sky_rotation, base, cargs, result);
    }

    pub fn setSkyRotationDegrees(self: *const Self, arg_euler_degrees: *const godot.Vector3) !void {
        if (mbind_set_sky_rotation_degrees == null) {
            mbind_set_sky_rotation_degrees = try api.createMethod("Environment", "set_sky_rotation_degrees");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_euler_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sky_rotation_degrees, base, cargs, result);
    }

    pub fn setSsaoAoChannelAffect(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_ssao_ao_channel_affect == null) {
            mbind_set_ssao_ao_channel_affect = try api.createMethod("Environment", "set_ssao_ao_channel_affect");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_ao_channel_affect, base, cargs, result);
    }

    pub fn setSsaoBias(self: *const Self, arg_bias: f32) !void {
        if (mbind_set_ssao_bias == null) {
            mbind_set_ssao_bias = try api.createMethod("Environment", "set_ssao_bias");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bias),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_bias, base, cargs, result);
    }

    pub fn setSsaoBlur(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_ssao_blur == null) {
            mbind_set_ssao_blur = try api.createMethod("Environment", "set_ssao_blur");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_blur, base, cargs, result);
    }

    pub fn setSsaoColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_ssao_color == null) {
            mbind_set_ssao_color = try api.createMethod("Environment", "set_ssao_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_color, base, cargs, result);
    }

    pub fn setSsaoDirectLightAffect(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_ssao_direct_light_affect == null) {
            mbind_set_ssao_direct_light_affect = try api.createMethod("Environment", "set_ssao_direct_light_affect");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_direct_light_affect, base, cargs, result);
    }

    pub fn setSsaoEdgeSharpness(self: *const Self, arg_edge_sharpness: f32) !void {
        if (mbind_set_ssao_edge_sharpness == null) {
            mbind_set_ssao_edge_sharpness = try api.createMethod("Environment", "set_ssao_edge_sharpness");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_edge_sharpness),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_edge_sharpness, base, cargs, result);
    }

    pub fn setSsaoEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_ssao_enabled == null) {
            mbind_set_ssao_enabled = try api.createMethod("Environment", "set_ssao_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_enabled, base, cargs, result);
    }

    pub fn setSsaoIntensity(self: *const Self, arg_intensity: f32) !void {
        if (mbind_set_ssao_intensity == null) {
            mbind_set_ssao_intensity = try api.createMethod("Environment", "set_ssao_intensity");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_intensity, base, cargs, result);
    }

    pub fn setSsaoIntensity2(self: *const Self, arg_intensity: f32) !void {
        if (mbind_set_ssao_intensity2 == null) {
            mbind_set_ssao_intensity2 = try api.createMethod("Environment", "set_ssao_intensity2");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_intensity2, base, cargs, result);
    }

    pub fn setSsaoQuality(self: *const Self, arg_quality: i32) !void {
        if (mbind_set_ssao_quality == null) {
            mbind_set_ssao_quality = try api.createMethod("Environment", "set_ssao_quality");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_quality),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_quality, base, cargs, result);
    }

    pub fn setSsaoRadius(self: *const Self, arg_radius: f32) !void {
        if (mbind_set_ssao_radius == null) {
            mbind_set_ssao_radius = try api.createMethod("Environment", "set_ssao_radius");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radius),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_radius, base, cargs, result);
    }

    pub fn setSsaoRadius2(self: *const Self, arg_radius: f32) !void {
        if (mbind_set_ssao_radius2 == null) {
            mbind_set_ssao_radius2 = try api.createMethod("Environment", "set_ssao_radius2");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radius),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssao_radius2, base, cargs, result);
    }

    pub fn setSsrDepthTolerance(self: *const Self, arg_depth_tolerance: f32) !void {
        if (mbind_set_ssr_depth_tolerance == null) {
            mbind_set_ssr_depth_tolerance = try api.createMethod("Environment", "set_ssr_depth_tolerance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_depth_tolerance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssr_depth_tolerance, base, cargs, result);
    }

    pub fn setSsrEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_ssr_enabled == null) {
            mbind_set_ssr_enabled = try api.createMethod("Environment", "set_ssr_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssr_enabled, base, cargs, result);
    }

    pub fn setSsrFadeIn(self: *const Self, arg_fade_in: f32) !void {
        if (mbind_set_ssr_fade_in == null) {
            mbind_set_ssr_fade_in = try api.createMethod("Environment", "set_ssr_fade_in");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_fade_in),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssr_fade_in, base, cargs, result);
    }

    pub fn setSsrFadeOut(self: *const Self, arg_fade_out: f32) !void {
        if (mbind_set_ssr_fade_out == null) {
            mbind_set_ssr_fade_out = try api.createMethod("Environment", "set_ssr_fade_out");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_fade_out),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssr_fade_out, base, cargs, result);
    }

    pub fn setSsrMaxSteps(self: *const Self, arg_max_steps: i32) !void {
        if (mbind_set_ssr_max_steps == null) {
            mbind_set_ssr_max_steps = try api.createMethod("Environment", "set_ssr_max_steps");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_max_steps),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssr_max_steps, base, cargs, result);
    }

    pub fn setSsrRough(self: *const Self, arg_rough: bool) !void {
        if (mbind_set_ssr_rough == null) {
            mbind_set_ssr_rough = try api.createMethod("Environment", "set_ssr_rough");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_rough),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssr_rough, base, cargs, result);
    }

    pub fn setTonemapAutoExposure(self: *const Self, arg_auto_exposure: bool) !void {
        if (mbind_set_tonemap_auto_exposure == null) {
            mbind_set_tonemap_auto_exposure = try api.createMethod("Environment", "set_tonemap_auto_exposure");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_auto_exposure),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tonemap_auto_exposure, base, cargs, result);
    }

    pub fn setTonemapAutoExposureGrey(self: *const Self, arg_exposure_grey: f32) !void {
        if (mbind_set_tonemap_auto_exposure_grey == null) {
            mbind_set_tonemap_auto_exposure_grey = try api.createMethod("Environment", "set_tonemap_auto_exposure_grey");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_exposure_grey),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tonemap_auto_exposure_grey, base, cargs, result);
    }

    pub fn setTonemapAutoExposureMax(self: *const Self, arg_exposure_max: f32) !void {
        if (mbind_set_tonemap_auto_exposure_max == null) {
            mbind_set_tonemap_auto_exposure_max = try api.createMethod("Environment", "set_tonemap_auto_exposure_max");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_exposure_max),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tonemap_auto_exposure_max, base, cargs, result);
    }

    pub fn setTonemapAutoExposureMin(self: *const Self, arg_exposure_min: f32) !void {
        if (mbind_set_tonemap_auto_exposure_min == null) {
            mbind_set_tonemap_auto_exposure_min = try api.createMethod("Environment", "set_tonemap_auto_exposure_min");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_exposure_min),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tonemap_auto_exposure_min, base, cargs, result);
    }

    pub fn setTonemapAutoExposureSpeed(self: *const Self, arg_exposure_speed: f32) !void {
        if (mbind_set_tonemap_auto_exposure_speed == null) {
            mbind_set_tonemap_auto_exposure_speed = try api.createMethod("Environment", "set_tonemap_auto_exposure_speed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_exposure_speed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tonemap_auto_exposure_speed, base, cargs, result);
    }

    pub fn setTonemapExposure(self: *const Self, arg_exposure: f32) !void {
        if (mbind_set_tonemap_exposure == null) {
            mbind_set_tonemap_exposure = try api.createMethod("Environment", "set_tonemap_exposure");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_exposure),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tonemap_exposure, base, cargs, result);
    }

    pub fn setTonemapWhite(self: *const Self, arg_white: f32) !void {
        if (mbind_set_tonemap_white == null) {
            mbind_set_tonemap_white = try api.createMethod("Environment", "set_tonemap_white");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_white),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tonemap_white, base, cargs, result);
    }

    pub fn setTonemapper(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_tonemapper == null) {
            mbind_set_tonemapper = try api.createMethod("Environment", "set_tonemapper");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tonemapper, base, cargs, result);
    }
};