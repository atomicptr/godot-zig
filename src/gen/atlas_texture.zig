// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Texture = @import("texture.zig").Texture;

// method bindings
var mbind_get_atlas: ?*c_api.godot_method_bind = null;
var mbind_get_margin: ?*c_api.godot_method_bind = null;
var mbind_get_region: ?*c_api.godot_method_bind = null;
var mbind_has_filter_clip: ?*c_api.godot_method_bind = null;
var mbind_set_atlas: ?*c_api.godot_method_bind = null;
var mbind_set_filter_clip: ?*c_api.godot_method_bind = null;
var mbind_set_margin: ?*c_api.godot_method_bind = null;
var mbind_set_region: ?*c_api.godot_method_bind = null;
var mbind_atlas_texture_constructor: ?fn () ?*c_api.godot_object = null;

pub const AtlasTexture = struct {
    const Self = @This();
    const BaseClass = Texture;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_atlas_texture_constructor == null) {
            mbind_atlas_texture_constructor = try api.createConstructor("AtlasTexture");
        }
        return api.createObject(Self, mbind_atlas_texture_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAtlas(self: *const Self) !godot.Texture {
        if (mbind_get_atlas == null) {
            mbind_get_atlas = try api.createMethod("AtlasTexture", "get_atlas");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_atlas, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getMargin(self: *const Self) !godot.Rect2 {
        if (mbind_get_margin == null) {
            mbind_get_margin = try api.createMethod("AtlasTexture", "get_margin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_margin, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn getRegion(self: *const Self) !godot.Rect2 {
        if (mbind_get_region == null) {
            mbind_get_region = try api.createMethod("AtlasTexture", "get_region");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_region, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn hasFilterClip(self: *const Self) !bool {
        if (mbind_has_filter_clip == null) {
            mbind_has_filter_clip = try api.createMethod("AtlasTexture", "has_filter_clip");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_filter_clip, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setAtlas(self: *const Self, arg_atlas: *const godot.Texture) !void {
        if (mbind_set_atlas == null) {
            mbind_set_atlas = try api.createMethod("AtlasTexture", "set_atlas");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_atlas),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_atlas, base, cargs, result);
    }

    pub fn setFilterClip(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_filter_clip == null) {
            mbind_set_filter_clip = try api.createMethod("AtlasTexture", "set_filter_clip");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_filter_clip, base, cargs, result);
    }

    pub fn setMargin(self: *const Self, arg_margin: *const godot.Rect2) !void {
        if (mbind_set_margin == null) {
            mbind_set_margin = try api.createMethod("AtlasTexture", "set_margin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_margin, base, cargs, result);
    }

    pub fn setRegion(self: *const Self, arg_region: *const godot.Rect2) !void {
        if (mbind_set_region == null) {
            mbind_set_region = try api.createMethod("AtlasTexture", "set_region");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_region),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_region, base, cargs, result);
    }
};