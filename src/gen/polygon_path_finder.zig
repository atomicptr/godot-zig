// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_find_path: ?*c_api.godot_method_bind = null;
var mbind_get_bounds: ?*c_api.godot_method_bind = null;
var mbind_get_closest_point: ?*c_api.godot_method_bind = null;
var mbind_get_intersections: ?*c_api.godot_method_bind = null;
var mbind_get_point_penalty: ?*c_api.godot_method_bind = null;
var mbind_is_point_inside: ?*c_api.godot_method_bind = null;
var mbind_set_point_penalty: ?*c_api.godot_method_bind = null;
var mbind_setup: ?*c_api.godot_method_bind = null;
var mbind_polygon_path_finder_constructor: ?fn () ?*c_api.godot_object = null;

pub const PolygonPathFinder = struct {
    const Self = @This();
    pub const BaseClass = godot.Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_polygon_path_finder_constructor == null) {
            mbind_polygon_path_finder_constructor = try api.createConstructor("PolygonPathFinder");
        }
        return api.createObject(Self, mbind_polygon_path_finder_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn findPath(self: *const Self, arg_from: *const godot.Vector2, arg_to: *const godot.Vector2) !godot.PoolVector2Array {
        if (mbind_find_path == null) {
            mbind_find_path = try api.createMethod("PolygonPathFinder", "find_path");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_from),
            @ptrCast(*const anyopaque, arg_to),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_find_path, base, cargs, result);
        return @ptrCast(*godot.PoolVector2Array, @alignCast(@alignOf(&godot.PoolVector2Array), result)).*;
    }

    pub fn getBounds(self: *const Self) !godot.Rect2 {
        if (mbind_get_bounds == null) {
            mbind_get_bounds = try api.createMethod("PolygonPathFinder", "get_bounds");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bounds, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn getClosestPoint(self: *const Self, arg_point: *const godot.Vector2) !godot.Vector2 {
        if (mbind_get_closest_point == null) {
            mbind_get_closest_point = try api.createMethod("PolygonPathFinder", "get_closest_point");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_closest_point, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getIntersections(self: *const Self, arg_from: *const godot.Vector2, arg_to: *const godot.Vector2) !godot.PoolVector2Array {
        if (mbind_get_intersections == null) {
            mbind_get_intersections = try api.createMethod("PolygonPathFinder", "get_intersections");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_from),
            @ptrCast(*const anyopaque, arg_to),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_intersections, base, cargs, result);
        return @ptrCast(*godot.PoolVector2Array, @alignCast(@alignOf(&godot.PoolVector2Array), result)).*;
    }

    pub fn getPointPenalty(self: *const Self, arg_idx: i32) !f32 {
        if (mbind_get_point_penalty == null) {
            mbind_get_point_penalty = try api.createMethod("PolygonPathFinder", "get_point_penalty");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_point_penalty, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn isPointInside(self: *const Self, arg_point: *const godot.Vector2) !bool {
        if (mbind_is_point_inside == null) {
            mbind_is_point_inside = try api.createMethod("PolygonPathFinder", "is_point_inside");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_point_inside, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setPointPenalty(self: *const Self, arg_idx: i32, arg_penalty: f32) !void {
        if (mbind_set_point_penalty == null) {
            mbind_set_point_penalty = try api.createMethod("PolygonPathFinder", "set_point_penalty");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, *arg_penalty),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_point_penalty, base, cargs, result);
    }

    pub fn setup(self: *const Self, arg_points: *const godot.PoolVector2Array, arg_connections: *const godot.PoolIntArray) !void {
        if (mbind_setup == null) {
            mbind_setup = try api.createMethod("PolygonPathFinder", "setup");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_points),
            @ptrCast(*const anyopaque, arg_connections),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_setup, base, cargs, result);
    }
};