// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Object = @import("object.zig").Object;

// method bindings
var mbind_can_instance: ?*c_api.godot_method_bind = null;
var mbind_class_exists: ?*c_api.godot_method_bind = null;
var mbind_class_get_category: ?*c_api.godot_method_bind = null;
var mbind_class_get_enum_constants: ?*c_api.godot_method_bind = null;
var mbind_class_get_enum_list: ?*c_api.godot_method_bind = null;
var mbind_class_get_integer_constant: ?*c_api.godot_method_bind = null;
var mbind_class_get_integer_constant_enum: ?*c_api.godot_method_bind = null;
var mbind_class_get_integer_constant_list: ?*c_api.godot_method_bind = null;
var mbind_class_get_method_list: ?*c_api.godot_method_bind = null;
var mbind_class_get_property: ?*c_api.godot_method_bind = null;
var mbind_class_get_property_list: ?*c_api.godot_method_bind = null;
var mbind_class_get_signal: ?*c_api.godot_method_bind = null;
var mbind_class_get_signal_list: ?*c_api.godot_method_bind = null;
var mbind_class_has_enum: ?*c_api.godot_method_bind = null;
var mbind_class_has_integer_constant: ?*c_api.godot_method_bind = null;
var mbind_class_has_method: ?*c_api.godot_method_bind = null;
var mbind_class_has_signal: ?*c_api.godot_method_bind = null;
var mbind_class_set_property: ?*c_api.godot_method_bind = null;
var mbind_get_class_list: ?*c_api.godot_method_bind = null;
var mbind_get_inheriters_from_class: ?*c_api.godot_method_bind = null;
var mbind_get_parent_class: ?*c_api.godot_method_bind = null;
var mbind_instance: ?*c_api.godot_method_bind = null;
var mbind_is_class_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_parent_class: ?*c_api.godot_method_bind = null;
var mbind__class_db_constructor: ?fn () ?*c_api.godot_object = null;

pub const _ClassDB = struct {
    const Self = @This();
    const BaseClass = Object;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind__class_db_constructor == null) {
            mbind__class_db_constructor = try api.createConstructor("_ClassDB");
        }
        return api.createObject(Self, mbind__class_db_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn canInstance(self: *const Self, arg_class: *const godot.String) !bool {
        if (mbind_can_instance == null) {
            mbind_can_instance = try api.createMethod("_ClassDB", "can_instance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_can_instance, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn classExists(self: *const Self, arg_class: *const godot.String) !bool {
        if (mbind_class_exists == null) {
            mbind_class_exists = try api.createMethod("_ClassDB", "class_exists");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_exists, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn classGetCategory(self: *const Self, arg_class: *const godot.String) !godot.String {
        if (mbind_class_get_category == null) {
            mbind_class_get_category = try api.createMethod("_ClassDB", "class_get_category");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_category, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn classGetEnumConstants(self: *const Self, arg_class: *const godot.String, arg_enum: *const godot.String, arg_no_inheritance: bool) !godot.PoolStringArray {
        if (mbind_class_get_enum_constants == null) {
            mbind_class_get_enum_constants = try api.createMethod("_ClassDB", "class_get_enum_constants");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, arg_enum),
            @ptrCast(*const anyopaque, *arg_no_inheritance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_enum_constants, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn classGetEnumList(self: *const Self, arg_class: *const godot.String, arg_no_inheritance: bool) !godot.PoolStringArray {
        if (mbind_class_get_enum_list == null) {
            mbind_class_get_enum_list = try api.createMethod("_ClassDB", "class_get_enum_list");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, *arg_no_inheritance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_enum_list, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn classGetIntegerConstant(self: *const Self, arg_class: *const godot.String, arg_name: *const godot.String) !i32 {
        if (mbind_class_get_integer_constant == null) {
            mbind_class_get_integer_constant = try api.createMethod("_ClassDB", "class_get_integer_constant");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_integer_constant, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn classGetIntegerConstantEnum(self: *const Self, arg_class: *const godot.String, arg_name: *const godot.String, arg_no_inheritance: bool) !godot.String {
        if (mbind_class_get_integer_constant_enum == null) {
            mbind_class_get_integer_constant_enum = try api.createMethod("_ClassDB", "class_get_integer_constant_enum");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, *arg_no_inheritance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_integer_constant_enum, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn classGetIntegerConstantList(self: *const Self, arg_class: *const godot.String, arg_no_inheritance: bool) !godot.PoolStringArray {
        if (mbind_class_get_integer_constant_list == null) {
            mbind_class_get_integer_constant_list = try api.createMethod("_ClassDB", "class_get_integer_constant_list");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, *arg_no_inheritance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_integer_constant_list, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn classGetMethodList(self: *const Self, arg_class: *const godot.String, arg_no_inheritance: bool) !godot.Array {
        if (mbind_class_get_method_list == null) {
            mbind_class_get_method_list = try api.createMethod("_ClassDB", "class_get_method_list");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, *arg_no_inheritance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_method_list, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn classGetProperty(self: *const Self, arg_object: *const godot.Object, arg_property: *const godot.String) !godot.Variant {
        if (mbind_class_get_property == null) {
            mbind_class_get_property = try api.createMethod("_ClassDB", "class_get_property");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_object),
            @ptrCast(*const anyopaque, arg_property),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_property, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn classGetPropertyList(self: *const Self, arg_class: *const godot.String, arg_no_inheritance: bool) !godot.Array {
        if (mbind_class_get_property_list == null) {
            mbind_class_get_property_list = try api.createMethod("_ClassDB", "class_get_property_list");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, *arg_no_inheritance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_property_list, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn classGetSignal(self: *const Self, arg_class: *const godot.String, arg_signal: *const godot.String) !godot.Dictionary {
        if (mbind_class_get_signal == null) {
            mbind_class_get_signal = try api.createMethod("_ClassDB", "class_get_signal");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, arg_signal),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_signal, base, cargs, result);
        return @ptrCast(*godot.Dictionary, @alignCast(@alignOf(&godot.Dictionary), result)).*;
    }

    pub fn classGetSignalList(self: *const Self, arg_class: *const godot.String, arg_no_inheritance: bool) !godot.Array {
        if (mbind_class_get_signal_list == null) {
            mbind_class_get_signal_list = try api.createMethod("_ClassDB", "class_get_signal_list");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, *arg_no_inheritance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_get_signal_list, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn classHasEnum(self: *const Self, arg_class: *const godot.String, arg_name: *const godot.String, arg_no_inheritance: bool) !bool {
        if (mbind_class_has_enum == null) {
            mbind_class_has_enum = try api.createMethod("_ClassDB", "class_has_enum");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, *arg_no_inheritance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_has_enum, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn classHasIntegerConstant(self: *const Self, arg_class: *const godot.String, arg_name: *const godot.String) !bool {
        if (mbind_class_has_integer_constant == null) {
            mbind_class_has_integer_constant = try api.createMethod("_ClassDB", "class_has_integer_constant");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_has_integer_constant, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn classHasMethod(self: *const Self, arg_class: *const godot.String, arg_method: *const godot.String, arg_no_inheritance: bool) !bool {
        if (mbind_class_has_method == null) {
            mbind_class_has_method = try api.createMethod("_ClassDB", "class_has_method");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, arg_method),
            @ptrCast(*const anyopaque, *arg_no_inheritance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_has_method, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn classHasSignal(self: *const Self, arg_class: *const godot.String, arg_signal: *const godot.String) !bool {
        if (mbind_class_has_signal == null) {
            mbind_class_has_signal = try api.createMethod("_ClassDB", "class_has_signal");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, arg_signal),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_has_signal, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn classSetProperty(self: *const Self, arg_object: *const godot.Object, arg_property: *const godot.String, arg_value: *const godot.Variant) !i32 {
        if (mbind_class_set_property == null) {
            mbind_class_set_property = try api.createMethod("_ClassDB", "class_set_property");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_object),
            @ptrCast(*const anyopaque, arg_property),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_class_set_property, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getClassList(self: *const Self) !godot.PoolStringArray {
        if (mbind_get_class_list == null) {
            mbind_get_class_list = try api.createMethod("_ClassDB", "get_class_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_class_list, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn getInheritersFromClass(self: *const Self, arg_class: *const godot.String) !godot.PoolStringArray {
        if (mbind_get_inheriters_from_class == null) {
            mbind_get_inheriters_from_class = try api.createMethod("_ClassDB", "get_inheriters_from_class");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_inheriters_from_class, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn getParentClass(self: *const Self, arg_class: *const godot.String) !godot.String {
        if (mbind_get_parent_class == null) {
            mbind_get_parent_class = try api.createMethod("_ClassDB", "get_parent_class");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_parent_class, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn instance(self: *const Self, arg_class: *const godot.String) !godot.Variant {
        if (mbind_instance == null) {
            mbind_instance = try api.createMethod("_ClassDB", "instance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_instance, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn isClassEnabled(self: *const Self, arg_class: *const godot.String) !bool {
        if (mbind_is_class_enabled == null) {
            mbind_is_class_enabled = try api.createMethod("_ClassDB", "is_class_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_class_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isParentClass(self: *const Self, arg_class: *const godot.String, arg_inherits: *const godot.String) !bool {
        if (mbind_is_parent_class == null) {
            mbind_is_parent_class = try api.createMethod("_ClassDB", "is_parent_class");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
            @ptrCast(*const anyopaque, arg_inherits),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_parent_class, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }
};