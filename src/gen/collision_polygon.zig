// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_depth: ?*c_api.godot_method_bind = null;
var mbind_get_margin: ?*c_api.godot_method_bind = null;
var mbind_get_polygon: ?*c_api.godot_method_bind = null;
var mbind_is_disabled: ?*c_api.godot_method_bind = null;
var mbind_set_depth: ?*c_api.godot_method_bind = null;
var mbind_set_disabled: ?*c_api.godot_method_bind = null;
var mbind_set_margin: ?*c_api.godot_method_bind = null;
var mbind_set_polygon: ?*c_api.godot_method_bind = null;
var mbind_collision_polygon_constructor: ?fn () ?*c_api.godot_object = null;

pub const CollisionPolygon = struct {
    const Self = @This();
    pub const BaseClass = godot.Spatial;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_collision_polygon_constructor == null) {
            mbind_collision_polygon_constructor = try api.createConstructor("CollisionPolygon");
        }
        return api.createObject(Self, mbind_collision_polygon_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getDepth(self: *const Self) !f32 {
        if (mbind_get_depth == null) {
            mbind_get_depth = try api.createMethod("CollisionPolygon", "get_depth");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_depth, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getMargin(self: *const Self) !f32 {
        if (mbind_get_margin == null) {
            mbind_get_margin = try api.createMethod("CollisionPolygon", "get_margin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_margin, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getPolygon(self: *const Self) !godot.PoolVector2Array {
        if (mbind_get_polygon == null) {
            mbind_get_polygon = try api.createMethod("CollisionPolygon", "get_polygon");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_polygon, base, cargs, result);
        return @ptrCast(*godot.PoolVector2Array, @alignCast(@alignOf(&godot.PoolVector2Array), result)).*;
    }

    pub fn isDisabled(self: *const Self) !bool {
        if (mbind_is_disabled == null) {
            mbind_is_disabled = try api.createMethod("CollisionPolygon", "is_disabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setDepth(self: *const Self, arg_depth: f32) !void {
        if (mbind_set_depth == null) {
            mbind_set_depth = try api.createMethod("CollisionPolygon", "set_depth");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_depth),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_depth, base, cargs, result);
    }

    pub fn setDisabled(self: *const Self, arg_disabled: bool) !void {
        if (mbind_set_disabled == null) {
            mbind_set_disabled = try api.createMethod("CollisionPolygon", "set_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_disabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disabled, base, cargs, result);
    }

    pub fn setMargin(self: *const Self, arg_margin: f32) !void {
        if (mbind_set_margin == null) {
            mbind_set_margin = try api.createMethod("CollisionPolygon", "set_margin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_margin, base, cargs, result);
    }

    pub fn setPolygon(self: *const Self, arg_polygon: *const godot.PoolVector2Array) !void {
        if (mbind_set_polygon == null) {
            mbind_set_polygon = try api.createMethod("CollisionPolygon", "set_polygon");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_polygon),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_polygon, base, cargs, result);
    }
};