// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Shape2D = @import("shape_2d.zig").Shape2D;

// method bindings
var mbind_get_d: ?*c_api.godot_method_bind = null;
var mbind_get_normal: ?*c_api.godot_method_bind = null;
var mbind_set_d: ?*c_api.godot_method_bind = null;
var mbind_set_normal: ?*c_api.godot_method_bind = null;
var mbind_line_shape_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const LineShape2D = struct {
    const Self = @This();
    const BaseClass = Shape2D;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_line_shape_2d_constructor == null) {
            mbind_line_shape_2d_constructor = try api.createConstructor("LineShape2D");
        }
        return api.createObject(Self, mbind_line_shape_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getD(self: *const Self) !f32 {
        if (mbind_get_d == null) {
            mbind_get_d = try api.createMethod("LineShape2D", "get_d");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_d, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getNormal(self: *const Self) !godot.Vector2 {
        if (mbind_get_normal == null) {
            mbind_get_normal = try api.createMethod("LineShape2D", "get_normal");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_normal, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn setD(self: *const Self, arg_d: f32) !void {
        if (mbind_set_d == null) {
            mbind_set_d = try api.createMethod("LineShape2D", "set_d");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_d),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_d, base, cargs, result);
    }

    pub fn setNormal(self: *const Self, arg_normal: *const godot.Vector2) !void {
        if (mbind_set_normal == null) {
            mbind_set_normal = try api.createMethod("LineShape2D", "set_normal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_normal),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_normal, base, cargs, result);
    }
};