// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const AnimationRootNode = @import("animation_root_node.zig").AnimationRootNode;

// method bindings
var mbind_add_blend_point: ?*c_api.godot_method_bind = null;
var mbind_add_triangle: ?*c_api.godot_method_bind = null;
var mbind_get_auto_triangles: ?*c_api.godot_method_bind = null;
var mbind_get_blend_mode: ?*c_api.godot_method_bind = null;
var mbind_get_blend_point_count: ?*c_api.godot_method_bind = null;
var mbind_get_blend_point_node: ?*c_api.godot_method_bind = null;
var mbind_get_blend_point_position: ?*c_api.godot_method_bind = null;
var mbind_get_max_space: ?*c_api.godot_method_bind = null;
var mbind_get_min_space: ?*c_api.godot_method_bind = null;
var mbind_get_snap: ?*c_api.godot_method_bind = null;
var mbind_get_triangle_count: ?*c_api.godot_method_bind = null;
var mbind_get_triangle_point: ?*c_api.godot_method_bind = null;
var mbind_get_x_label: ?*c_api.godot_method_bind = null;
var mbind_get_y_label: ?*c_api.godot_method_bind = null;
var mbind_remove_blend_point: ?*c_api.godot_method_bind = null;
var mbind_remove_triangle: ?*c_api.godot_method_bind = null;
var mbind_set_auto_triangles: ?*c_api.godot_method_bind = null;
var mbind_set_blend_mode: ?*c_api.godot_method_bind = null;
var mbind_set_blend_point_node: ?*c_api.godot_method_bind = null;
var mbind_set_blend_point_position: ?*c_api.godot_method_bind = null;
var mbind_set_max_space: ?*c_api.godot_method_bind = null;
var mbind_set_min_space: ?*c_api.godot_method_bind = null;
var mbind_set_snap: ?*c_api.godot_method_bind = null;
var mbind_set_x_label: ?*c_api.godot_method_bind = null;
var mbind_set_y_label: ?*c_api.godot_method_bind = null;
var mbind_animation_node_blend_space_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const AnimationNodeBlendSpace2D = struct {
    const Self = @This();
    const BaseClass = AnimationRootNode;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_animation_node_blend_space_2d_constructor == null) {
            mbind_animation_node_blend_space_2d_constructor = try api.createConstructor("AnimationNodeBlendSpace2D");
        }
        return api.createObject(Self, mbind_animation_node_blend_space_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addBlendPoint(self: *const Self, arg_node: *const godot.AnimationRootNode, arg_pos: *const godot.Vector2, arg_at_index: i32) !void {
        if (mbind_add_blend_point == null) {
            mbind_add_blend_point = try api.createMethod("AnimationNodeBlendSpace2D", "add_blend_point");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_node),
            @ptrCast(*const anyopaque, arg_pos),
            @ptrCast(*const anyopaque, *arg_at_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_blend_point, base, cargs, result);
    }

    pub fn addTriangle(self: *const Self, arg_x: i32, arg_y: i32, arg_z: i32, arg_at_index: i32) !void {
        if (mbind_add_triangle == null) {
            mbind_add_triangle = try api.createMethod("AnimationNodeBlendSpace2D", "add_triangle");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_x),
            @ptrCast(*const anyopaque, *arg_y),
            @ptrCast(*const anyopaque, *arg_z),
            @ptrCast(*const anyopaque, *arg_at_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_triangle, base, cargs, result);
    }

    pub fn getAutoTriangles(self: *const Self) !bool {
        if (mbind_get_auto_triangles == null) {
            mbind_get_auto_triangles = try api.createMethod("AnimationNodeBlendSpace2D", "get_auto_triangles");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_auto_triangles, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getBlendMode(self: *const Self) !i32 {
        if (mbind_get_blend_mode == null) {
            mbind_get_blend_mode = try api.createMethod("AnimationNodeBlendSpace2D", "get_blend_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_blend_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBlendPointCount(self: *const Self) !i32 {
        if (mbind_get_blend_point_count == null) {
            mbind_get_blend_point_count = try api.createMethod("AnimationNodeBlendSpace2D", "get_blend_point_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_blend_point_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBlendPointNode(self: *const Self, arg_point: i32) !godot.AnimationRootNode {
        if (mbind_get_blend_point_node == null) {
            mbind_get_blend_point_node = try api.createMethod("AnimationNodeBlendSpace2D", "get_blend_point_node");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_blend_point_node, base, cargs, result);
        return @ptrCast(*godot.AnimationRootNode, @alignCast(@alignOf(&godot.AnimationRootNode), result)).*;
    }

    pub fn getBlendPointPosition(self: *const Self, arg_point: i32) !godot.Vector2 {
        if (mbind_get_blend_point_position == null) {
            mbind_get_blend_point_position = try api.createMethod("AnimationNodeBlendSpace2D", "get_blend_point_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_blend_point_position, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getMaxSpace(self: *const Self) !godot.Vector2 {
        if (mbind_get_max_space == null) {
            mbind_get_max_space = try api.createMethod("AnimationNodeBlendSpace2D", "get_max_space");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_max_space, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getMinSpace(self: *const Self) !godot.Vector2 {
        if (mbind_get_min_space == null) {
            mbind_get_min_space = try api.createMethod("AnimationNodeBlendSpace2D", "get_min_space");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_min_space, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getSnap(self: *const Self) !godot.Vector2 {
        if (mbind_get_snap == null) {
            mbind_get_snap = try api.createMethod("AnimationNodeBlendSpace2D", "get_snap");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_snap, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getTriangleCount(self: *const Self) !i32 {
        if (mbind_get_triangle_count == null) {
            mbind_get_triangle_count = try api.createMethod("AnimationNodeBlendSpace2D", "get_triangle_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_triangle_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTrianglePoint(self: *const Self, arg_triangle: i32, arg_point: i32) !i32 {
        if (mbind_get_triangle_point == null) {
            mbind_get_triangle_point = try api.createMethod("AnimationNodeBlendSpace2D", "get_triangle_point");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_triangle),
            @ptrCast(*const anyopaque, *arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_triangle_point, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getXLabel(self: *const Self) !godot.String {
        if (mbind_get_x_label == null) {
            mbind_get_x_label = try api.createMethod("AnimationNodeBlendSpace2D", "get_x_label");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_x_label, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getYLabel(self: *const Self) !godot.String {
        if (mbind_get_y_label == null) {
            mbind_get_y_label = try api.createMethod("AnimationNodeBlendSpace2D", "get_y_label");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_y_label, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn removeBlendPoint(self: *const Self, arg_point: i32) !void {
        if (mbind_remove_blend_point == null) {
            mbind_remove_blend_point = try api.createMethod("AnimationNodeBlendSpace2D", "remove_blend_point");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_blend_point, base, cargs, result);
    }

    pub fn removeTriangle(self: *const Self, arg_triangle: i32) !void {
        if (mbind_remove_triangle == null) {
            mbind_remove_triangle = try api.createMethod("AnimationNodeBlendSpace2D", "remove_triangle");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_triangle),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_triangle, base, cargs, result);
    }

    pub fn setAutoTriangles(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_auto_triangles == null) {
            mbind_set_auto_triangles = try api.createMethod("AnimationNodeBlendSpace2D", "set_auto_triangles");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_auto_triangles, base, cargs, result);
    }

    pub fn setBlendMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_blend_mode == null) {
            mbind_set_blend_mode = try api.createMethod("AnimationNodeBlendSpace2D", "set_blend_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_blend_mode, base, cargs, result);
    }

    pub fn setBlendPointNode(self: *const Self, arg_point: i32, arg_node: *const godot.AnimationRootNode) !void {
        if (mbind_set_blend_point_node == null) {
            mbind_set_blend_point_node = try api.createMethod("AnimationNodeBlendSpace2D", "set_blend_point_node");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point),
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_blend_point_node, base, cargs, result);
    }

    pub fn setBlendPointPosition(self: *const Self, arg_point: i32, arg_pos: *const godot.Vector2) !void {
        if (mbind_set_blend_point_position == null) {
            mbind_set_blend_point_position = try api.createMethod("AnimationNodeBlendSpace2D", "set_blend_point_position");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point),
            @ptrCast(*const anyopaque, arg_pos),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_blend_point_position, base, cargs, result);
    }

    pub fn setMaxSpace(self: *const Self, arg_max_space: *const godot.Vector2) !void {
        if (mbind_set_max_space == null) {
            mbind_set_max_space = try api.createMethod("AnimationNodeBlendSpace2D", "set_max_space");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_max_space),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_max_space, base, cargs, result);
    }

    pub fn setMinSpace(self: *const Self, arg_min_space: *const godot.Vector2) !void {
        if (mbind_set_min_space == null) {
            mbind_set_min_space = try api.createMethod("AnimationNodeBlendSpace2D", "set_min_space");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_min_space),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_min_space, base, cargs, result);
    }

    pub fn setSnap(self: *const Self, arg_snap: *const godot.Vector2) !void {
        if (mbind_set_snap == null) {
            mbind_set_snap = try api.createMethod("AnimationNodeBlendSpace2D", "set_snap");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_snap),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_snap, base, cargs, result);
    }

    pub fn setXLabel(self: *const Self, arg_text: *const godot.String) !void {
        if (mbind_set_x_label == null) {
            mbind_set_x_label = try api.createMethod("AnimationNodeBlendSpace2D", "set_x_label");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_text),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_x_label, base, cargs, result);
    }

    pub fn setYLabel(self: *const Self, arg_text: *const godot.String) !void {
        if (mbind_set_y_label == null) {
            mbind_set_y_label = try api.createMethod("AnimationNodeBlendSpace2D", "set_y_label");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_text),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_y_label, base, cargs, result);
    }
};