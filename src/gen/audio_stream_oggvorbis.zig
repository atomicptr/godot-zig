// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const AudioStream = @import("audio_stream.zig").AudioStream;

// method bindings
var mbind_get_data: ?*c_api.godot_method_bind = null;
var mbind_get_loop_offset: ?*c_api.godot_method_bind = null;
var mbind_has_loop: ?*c_api.godot_method_bind = null;
var mbind_set_data: ?*c_api.godot_method_bind = null;
var mbind_set_loop: ?*c_api.godot_method_bind = null;
var mbind_set_loop_offset: ?*c_api.godot_method_bind = null;
var mbind_audio_stream_oggvorbis_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioStreamOGGVorbis = struct {
    const Self = @This();
    const BaseClass = AudioStream;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_stream_oggvorbis_constructor == null) {
            mbind_audio_stream_oggvorbis_constructor = try api.createConstructor("AudioStreamOGGVorbis");
        }
        return api.createObject(Self, mbind_audio_stream_oggvorbis_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getData(self: *const Self) !godot.PoolByteArray {
        if (mbind_get_data == null) {
            mbind_get_data = try api.createMethod("AudioStreamOGGVorbis", "get_data");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_data, base, cargs, result);
        return @ptrCast(*godot.PoolByteArray, @alignCast(@alignOf(&godot.PoolByteArray), result)).*;
    }

    pub fn getLoopOffset(self: *const Self) !f32 {
        if (mbind_get_loop_offset == null) {
            mbind_get_loop_offset = try api.createMethod("AudioStreamOGGVorbis", "get_loop_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_loop_offset, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn hasLoop(self: *const Self) !bool {
        if (mbind_has_loop == null) {
            mbind_has_loop = try api.createMethod("AudioStreamOGGVorbis", "has_loop");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_loop, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setData(self: *const Self, arg_data: *const godot.PoolByteArray) !void {
        if (mbind_set_data == null) {
            mbind_set_data = try api.createMethod("AudioStreamOGGVorbis", "set_data");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_data),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_data, base, cargs, result);
    }

    pub fn setLoop(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_loop == null) {
            mbind_set_loop = try api.createMethod("AudioStreamOGGVorbis", "set_loop");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_loop, base, cargs, result);
    }

    pub fn setLoopOffset(self: *const Self, arg_seconds: f32) !void {
        if (mbind_set_loop_offset == null) {
            mbind_set_loop_offset = try api.createMethod("AudioStreamOGGVorbis", "set_loop_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_seconds),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_loop_offset, base, cargs, result);
    }
};