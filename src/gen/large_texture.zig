// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_add_piece: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_get_piece_count: ?*c_api.godot_method_bind = null;
var mbind_get_piece_offset: ?*c_api.godot_method_bind = null;
var mbind_get_piece_texture: ?*c_api.godot_method_bind = null;
var mbind_set_piece_offset: ?*c_api.godot_method_bind = null;
var mbind_set_piece_texture: ?*c_api.godot_method_bind = null;
var mbind_set_size: ?*c_api.godot_method_bind = null;
var mbind_large_texture_constructor: ?fn () ?*c_api.godot_object = null;

pub const LargeTexture = struct {
    const Self = @This();
    pub const BaseClass = godot.Texture;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_large_texture_constructor == null) {
            mbind_large_texture_constructor = try api.createConstructor("LargeTexture");
        }
        return api.createObject(Self, mbind_large_texture_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addPiece(self: *const Self, arg_ofs: *const godot.Vector2, arg_texture: *const godot.Texture) !i32 {
        if (mbind_add_piece == null) {
            mbind_add_piece = try api.createMethod("LargeTexture", "add_piece");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_ofs),
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_piece, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("LargeTexture", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn getPieceCount(self: *const Self) !i32 {
        if (mbind_get_piece_count == null) {
            mbind_get_piece_count = try api.createMethod("LargeTexture", "get_piece_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_piece_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPieceOffset(self: *const Self, arg_idx: i32) !godot.Vector2 {
        if (mbind_get_piece_offset == null) {
            mbind_get_piece_offset = try api.createMethod("LargeTexture", "get_piece_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_piece_offset, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getPieceTexture(self: *const Self, arg_idx: i32) !godot.Texture {
        if (mbind_get_piece_texture == null) {
            mbind_get_piece_texture = try api.createMethod("LargeTexture", "get_piece_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_piece_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn setPieceOffset(self: *const Self, arg_idx: i32, arg_ofs: *const godot.Vector2) !void {
        if (mbind_set_piece_offset == null) {
            mbind_set_piece_offset = try api.createMethod("LargeTexture", "set_piece_offset");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_ofs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_piece_offset, base, cargs, result);
    }

    pub fn setPieceTexture(self: *const Self, arg_idx: i32, arg_texture: *const godot.Texture) !void {
        if (mbind_set_piece_texture == null) {
            mbind_set_piece_texture = try api.createMethod("LargeTexture", "set_piece_texture");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_piece_texture, base, cargs, result);
    }

    pub fn setSize(self: *const Self, arg_size: *const godot.Vector2) !void {
        if (mbind_set_size == null) {
            mbind_set_size = try api.createMethod("LargeTexture", "set_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_size, base, cargs, result);
    }
};