// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node2D = @import("node_2d.zig").Node2D;

// method bindings
var mbind_get_mirroring: ?*c_api.godot_method_bind = null;
var mbind_get_motion_offset: ?*c_api.godot_method_bind = null;
var mbind_get_motion_scale: ?*c_api.godot_method_bind = null;
var mbind_set_mirroring: ?*c_api.godot_method_bind = null;
var mbind_set_motion_offset: ?*c_api.godot_method_bind = null;
var mbind_set_motion_scale: ?*c_api.godot_method_bind = null;
var mbind_parallax_layer_constructor: ?fn () ?*c_api.godot_object = null;

pub const ParallaxLayer = struct {
    const Self = @This();
    const BaseClass = Node2D;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_parallax_layer_constructor == null) {
            mbind_parallax_layer_constructor = try api.createConstructor("ParallaxLayer");
        }
        return api.createObject(Self, mbind_parallax_layer_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getMirroring(self: *const Self) !godot.Vector2 {
        if (mbind_get_mirroring == null) {
            mbind_get_mirroring = try api.createMethod("ParallaxLayer", "get_mirroring");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mirroring, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getMotionOffset(self: *const Self) !godot.Vector2 {
        if (mbind_get_motion_offset == null) {
            mbind_get_motion_offset = try api.createMethod("ParallaxLayer", "get_motion_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_motion_offset, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getMotionScale(self: *const Self) !godot.Vector2 {
        if (mbind_get_motion_scale == null) {
            mbind_get_motion_scale = try api.createMethod("ParallaxLayer", "get_motion_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_motion_scale, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn setMirroring(self: *const Self, arg_mirror: *const godot.Vector2) !void {
        if (mbind_set_mirroring == null) {
            mbind_set_mirroring = try api.createMethod("ParallaxLayer", "set_mirroring");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mirror),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mirroring, base, cargs, result);
    }

    pub fn setMotionOffset(self: *const Self, arg_offset: *const godot.Vector2) !void {
        if (mbind_set_motion_offset == null) {
            mbind_set_motion_offset = try api.createMethod("ParallaxLayer", "set_motion_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_motion_offset, base, cargs, result);
    }

    pub fn setMotionScale(self: *const Self, arg_scale: *const godot.Vector2) !void {
        if (mbind_set_motion_scale == null) {
            mbind_set_motion_scale = try api.createMethod("ParallaxLayer", "set_motion_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_motion_scale, base, cargs, result);
    }
};