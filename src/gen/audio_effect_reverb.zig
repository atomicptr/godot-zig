// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const AudioEffect = @import("audio_effect.zig").AudioEffect;

// method bindings
var mbind_get_damping: ?*c_api.godot_method_bind = null;
var mbind_get_dry: ?*c_api.godot_method_bind = null;
var mbind_get_hpf: ?*c_api.godot_method_bind = null;
var mbind_get_predelay_feedback: ?*c_api.godot_method_bind = null;
var mbind_get_predelay_msec: ?*c_api.godot_method_bind = null;
var mbind_get_room_size: ?*c_api.godot_method_bind = null;
var mbind_get_spread: ?*c_api.godot_method_bind = null;
var mbind_get_wet: ?*c_api.godot_method_bind = null;
var mbind_set_damping: ?*c_api.godot_method_bind = null;
var mbind_set_dry: ?*c_api.godot_method_bind = null;
var mbind_set_hpf: ?*c_api.godot_method_bind = null;
var mbind_set_predelay_feedback: ?*c_api.godot_method_bind = null;
var mbind_set_predelay_msec: ?*c_api.godot_method_bind = null;
var mbind_set_room_size: ?*c_api.godot_method_bind = null;
var mbind_set_spread: ?*c_api.godot_method_bind = null;
var mbind_set_wet: ?*c_api.godot_method_bind = null;
var mbind_audio_effect_reverb_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioEffectReverb = struct {
    const Self = @This();
    const BaseClass = AudioEffect;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_effect_reverb_constructor == null) {
            mbind_audio_effect_reverb_constructor = try api.createConstructor("AudioEffectReverb");
        }
        return api.createObject(Self, mbind_audio_effect_reverb_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getDamping(self: *const Self) !f32 {
        if (mbind_get_damping == null) {
            mbind_get_damping = try api.createMethod("AudioEffectReverb", "get_damping");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_damping, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDry(self: *const Self) !f32 {
        if (mbind_get_dry == null) {
            mbind_get_dry = try api.createMethod("AudioEffectReverb", "get_dry");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dry, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getHpf(self: *const Self) !f32 {
        if (mbind_get_hpf == null) {
            mbind_get_hpf = try api.createMethod("AudioEffectReverb", "get_hpf");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_hpf, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getPredelayFeedback(self: *const Self) !f32 {
        if (mbind_get_predelay_feedback == null) {
            mbind_get_predelay_feedback = try api.createMethod("AudioEffectReverb", "get_predelay_feedback");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_predelay_feedback, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getPredelayMsec(self: *const Self) !f32 {
        if (mbind_get_predelay_msec == null) {
            mbind_get_predelay_msec = try api.createMethod("AudioEffectReverb", "get_predelay_msec");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_predelay_msec, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRoomSize(self: *const Self) !f32 {
        if (mbind_get_room_size == null) {
            mbind_get_room_size = try api.createMethod("AudioEffectReverb", "get_room_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_room_size, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSpread(self: *const Self) !f32 {
        if (mbind_get_spread == null) {
            mbind_get_spread = try api.createMethod("AudioEffectReverb", "get_spread");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_spread, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getWet(self: *const Self) !f32 {
        if (mbind_get_wet == null) {
            mbind_get_wet = try api.createMethod("AudioEffectReverb", "get_wet");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_wet, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn setDamping(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_damping == null) {
            mbind_set_damping = try api.createMethod("AudioEffectReverb", "set_damping");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_damping, base, cargs, result);
    }

    pub fn setDry(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_dry == null) {
            mbind_set_dry = try api.createMethod("AudioEffectReverb", "set_dry");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dry, base, cargs, result);
    }

    pub fn setHpf(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_hpf == null) {
            mbind_set_hpf = try api.createMethod("AudioEffectReverb", "set_hpf");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_hpf, base, cargs, result);
    }

    pub fn setPredelayFeedback(self: *const Self, arg_feedback: f32) !void {
        if (mbind_set_predelay_feedback == null) {
            mbind_set_predelay_feedback = try api.createMethod("AudioEffectReverb", "set_predelay_feedback");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_feedback),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_predelay_feedback, base, cargs, result);
    }

    pub fn setPredelayMsec(self: *const Self, arg_msec: f32) !void {
        if (mbind_set_predelay_msec == null) {
            mbind_set_predelay_msec = try api.createMethod("AudioEffectReverb", "set_predelay_msec");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_msec),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_predelay_msec, base, cargs, result);
    }

    pub fn setRoomSize(self: *const Self, arg_size: f32) !void {
        if (mbind_set_room_size == null) {
            mbind_set_room_size = try api.createMethod("AudioEffectReverb", "set_room_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_room_size, base, cargs, result);
    }

    pub fn setSpread(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_spread == null) {
            mbind_set_spread = try api.createMethod("AudioEffectReverb", "set_spread");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_spread, base, cargs, result);
    }

    pub fn setWet(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_wet == null) {
            mbind_set_wet = try api.createMethod("AudioEffectReverb", "set_wet");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_wet, base, cargs, result);
    }
};