// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const PacketPeer = @import("packet_peer.zig").PacketPeer;

// method bindings
var mbind_close: ?*c_api.godot_method_bind = null;
var mbind_get_connected_host: ?*c_api.godot_method_bind = null;
var mbind_get_connected_port: ?*c_api.godot_method_bind = null;
var mbind_get_current_outbound_buffered_amount: ?*c_api.godot_method_bind = null;
var mbind_get_write_mode: ?*c_api.godot_method_bind = null;
var mbind_is_connected_to_host: ?*c_api.godot_method_bind = null;
var mbind_set_no_delay: ?*c_api.godot_method_bind = null;
var mbind_set_write_mode: ?*c_api.godot_method_bind = null;
var mbind_was_string_packet: ?*c_api.godot_method_bind = null;
var mbind_web_socket_peer_constructor: ?fn () ?*c_api.godot_object = null;

pub const WebSocketPeer = struct {
    const Self = @This();
    const BaseClass = PacketPeer;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_web_socket_peer_constructor == null) {
            mbind_web_socket_peer_constructor = try api.createConstructor("WebSocketPeer");
        }
        return api.createObject(Self, mbind_web_socket_peer_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn close(self: *const Self, arg_code: i32, arg_reason: *const godot.String) !void {
        if (mbind_close == null) {
            mbind_close = try api.createMethod("WebSocketPeer", "close");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_code),
            @ptrCast(*const anyopaque, arg_reason),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_close, base, cargs, result);
    }

    pub fn getConnectedHost(self: *const Self) !godot.String {
        if (mbind_get_connected_host == null) {
            mbind_get_connected_host = try api.createMethod("WebSocketPeer", "get_connected_host");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connected_host, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getConnectedPort(self: *const Self) !i32 {
        if (mbind_get_connected_port == null) {
            mbind_get_connected_port = try api.createMethod("WebSocketPeer", "get_connected_port");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connected_port, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCurrentOutboundBufferedAmount(self: *const Self) !i32 {
        if (mbind_get_current_outbound_buffered_amount == null) {
            mbind_get_current_outbound_buffered_amount = try api.createMethod("WebSocketPeer", "get_current_outbound_buffered_amount");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_current_outbound_buffered_amount, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getWriteMode(self: *const Self) !i32 {
        if (mbind_get_write_mode == null) {
            mbind_get_write_mode = try api.createMethod("WebSocketPeer", "get_write_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_write_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isConnectedToHost(self: *const Self) !bool {
        if (mbind_is_connected_to_host == null) {
            mbind_is_connected_to_host = try api.createMethod("WebSocketPeer", "is_connected_to_host");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_connected_to_host, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setNoDelay(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_no_delay == null) {
            mbind_set_no_delay = try api.createMethod("WebSocketPeer", "set_no_delay");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_no_delay, base, cargs, result);
    }

    pub fn setWriteMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_write_mode == null) {
            mbind_set_write_mode = try api.createMethod("WebSocketPeer", "set_write_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_write_mode, base, cargs, result);
    }

    pub fn wasStringPacket(self: *const Self) !bool {
        if (mbind_was_string_packet == null) {
            mbind_was_string_packet = try api.createMethod("WebSocketPeer", "was_string_packet");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_was_string_packet, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }
};