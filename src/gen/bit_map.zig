// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_create: ?*c_api.godot_method_bind = null;
var mbind_create_from_image_alpha: ?*c_api.godot_method_bind = null;
var mbind_get_bit: ?*c_api.godot_method_bind = null;
var mbind_get_size: ?*c_api.godot_method_bind = null;
var mbind_get_true_bit_count: ?*c_api.godot_method_bind = null;
var mbind_grow_mask: ?*c_api.godot_method_bind = null;
var mbind_opaque_to_polygons: ?*c_api.godot_method_bind = null;
var mbind_set_bit: ?*c_api.godot_method_bind = null;
var mbind_set_bit_rect: ?*c_api.godot_method_bind = null;
var mbind_bit_map_constructor: ?fn () ?*c_api.godot_object = null;

pub const BitMap = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_bit_map_constructor == null) {
            mbind_bit_map_constructor = try api.createConstructor("BitMap");
        }
        return api.createObject(Self, mbind_bit_map_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn create(self: *const Self, arg_size: *const godot.Vector2) !void {
        if (mbind_create == null) {
            mbind_create = try api.createMethod("BitMap", "create");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create, base, cargs, result);
    }

    pub fn createFromImageAlpha(self: *const Self, arg_image: *const godot.Image, arg_threshold: f32) !void {
        if (mbind_create_from_image_alpha == null) {
            mbind_create_from_image_alpha = try api.createMethod("BitMap", "create_from_image_alpha");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_image),
            @ptrCast(*const anyopaque, *arg_threshold),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_from_image_alpha, base, cargs, result);
    }

    pub fn getBit(self: *const Self, arg_position: *const godot.Vector2) !bool {
        if (mbind_get_bit == null) {
            mbind_get_bit = try api.createMethod("BitMap", "get_bit");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bit, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getSize(self: *const Self) !godot.Vector2 {
        if (mbind_get_size == null) {
            mbind_get_size = try api.createMethod("BitMap", "get_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_size, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getTrueBitCount(self: *const Self) !i32 {
        if (mbind_get_true_bit_count == null) {
            mbind_get_true_bit_count = try api.createMethod("BitMap", "get_true_bit_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_true_bit_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn growMask(self: *const Self, arg_pixels: i32, arg_rect: *const godot.Rect2) !void {
        if (mbind_grow_mask == null) {
            mbind_grow_mask = try api.createMethod("BitMap", "grow_mask");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pixels),
            @ptrCast(*const anyopaque, arg_rect),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_grow_mask, base, cargs, result);
    }

    pub fn opaqueToPolygons(self: *const Self, arg_rect: *const godot.Rect2, arg_epsilon: f32) !godot.Array {
        if (mbind_opaque_to_polygons == null) {
            mbind_opaque_to_polygons = try api.createMethod("BitMap", "opaque_to_polygons");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_rect),
            @ptrCast(*const anyopaque, *arg_epsilon),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_opaque_to_polygons, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn setBit(self: *const Self, arg_position: *const godot.Vector2, arg_bit: bool) !void {
        if (mbind_set_bit == null) {
            mbind_set_bit = try api.createMethod("BitMap", "set_bit");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
            @ptrCast(*const anyopaque, *arg_bit),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bit, base, cargs, result);
    }

    pub fn setBitRect(self: *const Self, arg_rect: *const godot.Rect2, arg_bit: bool) !void {
        if (mbind_set_bit_rect == null) {
            mbind_set_bit_rect = try api.createMethod("BitMap", "set_bit_rect");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_rect),
            @ptrCast(*const anyopaque, *arg_bit),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bit_rect, base, cargs, result);
    }
};