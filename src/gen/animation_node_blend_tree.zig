// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const AnimationRootNode = @import("animation_root_node.zig").AnimationRootNode;

// method bindings
var mbind_add_node: ?*c_api.godot_method_bind = null;
var mbind_connect_node: ?*c_api.godot_method_bind = null;
var mbind_disconnect_node: ?*c_api.godot_method_bind = null;
var mbind_get_graph_offset: ?*c_api.godot_method_bind = null;
var mbind_get_node: ?*c_api.godot_method_bind = null;
var mbind_get_node_position: ?*c_api.godot_method_bind = null;
var mbind_has_node: ?*c_api.godot_method_bind = null;
var mbind_remove_node: ?*c_api.godot_method_bind = null;
var mbind_rename_node: ?*c_api.godot_method_bind = null;
var mbind_set_graph_offset: ?*c_api.godot_method_bind = null;
var mbind_set_node_position: ?*c_api.godot_method_bind = null;
var mbind_animation_node_blend_tree_constructor: ?fn () ?*c_api.godot_object = null;

pub const AnimationNodeBlendTree = struct {
    const Self = @This();
    const BaseClass = AnimationRootNode;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_animation_node_blend_tree_constructor == null) {
            mbind_animation_node_blend_tree_constructor = try api.createConstructor("AnimationNodeBlendTree");
        }
        return api.createObject(Self, mbind_animation_node_blend_tree_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addNode(self: *const Self, arg_name: *const godot.String, arg_node: *const godot.AnimationNode, arg_position: *const godot.Vector2) !void {
        if (mbind_add_node == null) {
            mbind_add_node = try api.createMethod("AnimationNodeBlendTree", "add_node");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_node),
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_node, base, cargs, result);
    }

    pub fn connectNode(self: *const Self, arg_input_node: *const godot.String, arg_input_index: i32, arg_output_node: *const godot.String) !void {
        if (mbind_connect_node == null) {
            mbind_connect_node = try api.createMethod("AnimationNodeBlendTree", "connect_node");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_input_node),
            @ptrCast(*const anyopaque, *arg_input_index),
            @ptrCast(*const anyopaque, arg_output_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_connect_node, base, cargs, result);
    }

    pub fn disconnectNode(self: *const Self, arg_input_node: *const godot.String, arg_input_index: i32) !void {
        if (mbind_disconnect_node == null) {
            mbind_disconnect_node = try api.createMethod("AnimationNodeBlendTree", "disconnect_node");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_input_node),
            @ptrCast(*const anyopaque, *arg_input_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_disconnect_node, base, cargs, result);
    }

    pub fn getGraphOffset(self: *const Self) !godot.Vector2 {
        if (mbind_get_graph_offset == null) {
            mbind_get_graph_offset = try api.createMethod("AnimationNodeBlendTree", "get_graph_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_graph_offset, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getNode(self: *const Self, arg_name: *const godot.String) !godot.AnimationNode {
        if (mbind_get_node == null) {
            mbind_get_node = try api.createMethod("AnimationNodeBlendTree", "get_node");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node, base, cargs, result);
        return @ptrCast(*godot.AnimationNode, @alignCast(@alignOf(&godot.AnimationNode), result)).*;
    }

    pub fn getNodePosition(self: *const Self, arg_name: *const godot.String) !godot.Vector2 {
        if (mbind_get_node_position == null) {
            mbind_get_node_position = try api.createMethod("AnimationNodeBlendTree", "get_node_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_position, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn hasNode(self: *const Self, arg_name: *const godot.String) !bool {
        if (mbind_has_node == null) {
            mbind_has_node = try api.createMethod("AnimationNodeBlendTree", "has_node");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_node, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn removeNode(self: *const Self, arg_name: *const godot.String) !void {
        if (mbind_remove_node == null) {
            mbind_remove_node = try api.createMethod("AnimationNodeBlendTree", "remove_node");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_node, base, cargs, result);
    }

    pub fn renameNode(self: *const Self, arg_name: *const godot.String, arg_new_name: *const godot.String) !void {
        if (mbind_rename_node == null) {
            mbind_rename_node = try api.createMethod("AnimationNodeBlendTree", "rename_node");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_new_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_rename_node, base, cargs, result);
    }

    pub fn setGraphOffset(self: *const Self, arg_offset: *const godot.Vector2) !void {
        if (mbind_set_graph_offset == null) {
            mbind_set_graph_offset = try api.createMethod("AnimationNodeBlendTree", "set_graph_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_graph_offset, base, cargs, result);
    }

    pub fn setNodePosition(self: *const Self, arg_name: *const godot.String, arg_position: *const godot.Vector2) !void {
        if (mbind_set_node_position == null) {
            mbind_set_node_position = try api.createMethod("AnimationNodeBlendTree", "set_node_position");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_node_position, base, cargs, result);
    }
};