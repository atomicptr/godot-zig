// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_add_input: ?*c_api.godot_method_bind = null;
var mbind_blend_animation: ?*c_api.godot_method_bind = null;
var mbind_blend_input: ?*c_api.godot_method_bind = null;
var mbind_blend_node: ?*c_api.godot_method_bind = null;
var mbind_get_input_count: ?*c_api.godot_method_bind = null;
var mbind_get_input_name: ?*c_api.godot_method_bind = null;
var mbind_get_parameter: ?*c_api.godot_method_bind = null;
var mbind_is_filter_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_path_filtered: ?*c_api.godot_method_bind = null;
var mbind_remove_input: ?*c_api.godot_method_bind = null;
var mbind_set_filter_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_filter_path: ?*c_api.godot_method_bind = null;
var mbind_set_parameter: ?*c_api.godot_method_bind = null;
var mbind_animation_node_constructor: ?fn () ?*c_api.godot_object = null;

pub const AnimationNode = struct {
    const Self = @This();
    const BaseClass = Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_animation_node_constructor == null) {
            mbind_animation_node_constructor = try api.createConstructor("AnimationNode");
        }
        return api.createObject(Self, mbind_animation_node_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addInput(self: *const Self, arg_name: *const godot.String) !void {
        if (mbind_add_input == null) {
            mbind_add_input = try api.createMethod("AnimationNode", "add_input");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_input, base, cargs, result);
    }

    pub fn blendAnimation(self: *const Self, arg_animation: *const godot.String, arg_time: f32, arg_delta: f32, arg_seeked: bool, arg_blend: f32) !void {
        if (mbind_blend_animation == null) {
            mbind_blend_animation = try api.createMethod("AnimationNode", "blend_animation");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_animation),
            @ptrCast(*const anyopaque, *arg_time),
            @ptrCast(*const anyopaque, *arg_delta),
            @ptrCast(*const anyopaque, *arg_seeked),
            @ptrCast(*const anyopaque, *arg_blend),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_blend_animation, base, cargs, result);
    }

    pub fn blendInput(self: *const Self, arg_input_index: i32, arg_time: f32, arg_seek: bool, arg_blend: f32, arg_filter: i32, arg_optimize: bool) !f32 {
        if (mbind_blend_input == null) {
            mbind_blend_input = try api.createMethod("AnimationNode", "blend_input");
        }

        var result: ?*anyopaque = null;
        var args: [6]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_input_index),
            @ptrCast(*const anyopaque, *arg_time),
            @ptrCast(*const anyopaque, *arg_seek),
            @ptrCast(*const anyopaque, *arg_blend),
            @ptrCast(*const anyopaque, *arg_filter),
            @ptrCast(*const anyopaque, *arg_optimize),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_blend_input, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn blendNode(self: *const Self, arg_name: *const godot.String, arg_node: *const godot.AnimationNode, arg_time: f32, arg_seek: bool, arg_blend: f32, arg_filter: i32, arg_optimize: bool) !f32 {
        if (mbind_blend_node == null) {
            mbind_blend_node = try api.createMethod("AnimationNode", "blend_node");
        }

        var result: ?*anyopaque = null;
        var args: [7]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_node),
            @ptrCast(*const anyopaque, *arg_time),
            @ptrCast(*const anyopaque, *arg_seek),
            @ptrCast(*const anyopaque, *arg_blend),
            @ptrCast(*const anyopaque, *arg_filter),
            @ptrCast(*const anyopaque, *arg_optimize),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_blend_node, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getInputCount(self: *const Self) !i32 {
        if (mbind_get_input_count == null) {
            mbind_get_input_count = try api.createMethod("AnimationNode", "get_input_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_input_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getInputName(self: *const Self, arg_input: i32) !godot.String {
        if (mbind_get_input_name == null) {
            mbind_get_input_name = try api.createMethod("AnimationNode", "get_input_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_input),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_input_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getParameter(self: *const Self, arg_name: *const godot.String) !godot.Variant {
        if (mbind_get_parameter == null) {
            mbind_get_parameter = try api.createMethod("AnimationNode", "get_parameter");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_parameter, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn isFilterEnabled(self: *const Self) !bool {
        if (mbind_is_filter_enabled == null) {
            mbind_is_filter_enabled = try api.createMethod("AnimationNode", "is_filter_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_filter_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isPathFiltered(self: *const Self, arg_path: *const godot.NodePath) !bool {
        if (mbind_is_path_filtered == null) {
            mbind_is_path_filtered = try api.createMethod("AnimationNode", "is_path_filtered");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_path_filtered, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn removeInput(self: *const Self, arg_index: i32) !void {
        if (mbind_remove_input == null) {
            mbind_remove_input = try api.createMethod("AnimationNode", "remove_input");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_input, base, cargs, result);
    }

    pub fn setFilterEnabled(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_filter_enabled == null) {
            mbind_set_filter_enabled = try api.createMethod("AnimationNode", "set_filter_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_filter_enabled, base, cargs, result);
    }

    pub fn setFilterPath(self: *const Self, arg_path: *const godot.NodePath, arg_enable: bool) !void {
        if (mbind_set_filter_path == null) {
            mbind_set_filter_path = try api.createMethod("AnimationNode", "set_filter_path");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_filter_path, base, cargs, result);
    }

    pub fn setParameter(self: *const Self, arg_name: *const godot.String, arg_value: *const godot.Variant) !void {
        if (mbind_set_parameter == null) {
            mbind_set_parameter = try api.createMethod("AnimationNode", "set_parameter");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_parameter, base, cargs, result);
    }
};