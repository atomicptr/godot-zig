// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_hand: ?*c_api.godot_method_bind = null;
var mbind_get_joy_id: ?*c_api.godot_method_bind = null;
var mbind_get_mesh: ?*c_api.godot_method_bind = null;
var mbind_get_name: ?*c_api.godot_method_bind = null;
var mbind_get_orientation: ?*c_api.godot_method_bind = null;
var mbind_get_position: ?*c_api.godot_method_bind = null;
var mbind_get_rumble: ?*c_api.godot_method_bind = null;
var mbind_get_tracker_id: ?*c_api.godot_method_bind = null;
var mbind_get_tracks_orientation: ?*c_api.godot_method_bind = null;
var mbind_get_tracks_position: ?*c_api.godot_method_bind = null;
var mbind_get_transform: ?*c_api.godot_method_bind = null;
var mbind_get_type: ?*c_api.godot_method_bind = null;
var mbind_set_rumble: ?*c_api.godot_method_bind = null;
var mbind_arvrpositional_tracker_constructor: ?fn () ?*c_api.godot_object = null;

pub const ARVRPositionalTracker = struct {
    const Self = @This();
    pub const BaseClass = godot.Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_arvrpositional_tracker_constructor == null) {
            mbind_arvrpositional_tracker_constructor = try api.createConstructor("ARVRPositionalTracker");
        }
        return api.createObject(Self, mbind_arvrpositional_tracker_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getHand(self: *const Self) !i32 {
        if (mbind_get_hand == null) {
            mbind_get_hand = try api.createMethod("ARVRPositionalTracker", "get_hand");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_hand, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getJoyId(self: *const Self) !i32 {
        if (mbind_get_joy_id == null) {
            mbind_get_joy_id = try api.createMethod("ARVRPositionalTracker", "get_joy_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joy_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMesh(self: *const Self) !godot.Mesh {
        if (mbind_get_mesh == null) {
            mbind_get_mesh = try api.createMethod("ARVRPositionalTracker", "get_mesh");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mesh, base, cargs, result);
        return @ptrCast(*godot.Mesh, @alignCast(@alignOf(&godot.Mesh), result)).*;
    }

    pub fn getName(self: *const Self) !godot.String {
        if (mbind_get_name == null) {
            mbind_get_name = try api.createMethod("ARVRPositionalTracker", "get_name");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getOrientation(self: *const Self) !godot.Basis {
        if (mbind_get_orientation == null) {
            mbind_get_orientation = try api.createMethod("ARVRPositionalTracker", "get_orientation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_orientation, base, cargs, result);
        return @ptrCast(*godot.Basis, @alignCast(@alignOf(&godot.Basis), result)).*;
    }

    pub fn getPosition(self: *const Self) !godot.Vector3 {
        if (mbind_get_position == null) {
            mbind_get_position = try api.createMethod("ARVRPositionalTracker", "get_position");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_position, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getRumble(self: *const Self) !f32 {
        if (mbind_get_rumble == null) {
            mbind_get_rumble = try api.createMethod("ARVRPositionalTracker", "get_rumble");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rumble, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTrackerId(self: *const Self) !i32 {
        if (mbind_get_tracker_id == null) {
            mbind_get_tracker_id = try api.createMethod("ARVRPositionalTracker", "get_tracker_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tracker_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTracksOrientation(self: *const Self) !bool {
        if (mbind_get_tracks_orientation == null) {
            mbind_get_tracks_orientation = try api.createMethod("ARVRPositionalTracker", "get_tracks_orientation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tracks_orientation, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getTracksPosition(self: *const Self) !bool {
        if (mbind_get_tracks_position == null) {
            mbind_get_tracks_position = try api.createMethod("ARVRPositionalTracker", "get_tracks_position");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tracks_position, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getTransform(self: *const Self, arg_adjust_by_reference_frame: bool) !godot.Transform {
        if (mbind_get_transform == null) {
            mbind_get_transform = try api.createMethod("ARVRPositionalTracker", "get_transform");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_adjust_by_reference_frame),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_transform, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getType(self: *const Self) !i32 {
        if (mbind_get_type == null) {
            mbind_get_type = try api.createMethod("ARVRPositionalTracker", "get_type");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_type, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setRumble(self: *const Self, arg_rumble: f32) !void {
        if (mbind_set_rumble == null) {
            mbind_set_rumble = try api.createMethod("ARVRPositionalTracker", "set_rumble");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_rumble),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rumble, base, cargs, result);
    }
};