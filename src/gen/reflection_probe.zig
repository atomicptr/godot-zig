// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const VisualInstance = @import("visual_instance.zig").VisualInstance;

// method bindings
var mbind_are_shadows_enabled: ?*c_api.godot_method_bind = null;
var mbind_get_cull_mask: ?*c_api.godot_method_bind = null;
var mbind_get_extents: ?*c_api.godot_method_bind = null;
var mbind_get_intensity: ?*c_api.godot_method_bind = null;
var mbind_get_interior_ambient: ?*c_api.godot_method_bind = null;
var mbind_get_interior_ambient_energy: ?*c_api.godot_method_bind = null;
var mbind_get_interior_ambient_probe_contribution: ?*c_api.godot_method_bind = null;
var mbind_get_max_distance: ?*c_api.godot_method_bind = null;
var mbind_get_origin_offset: ?*c_api.godot_method_bind = null;
var mbind_get_update_mode: ?*c_api.godot_method_bind = null;
var mbind_is_box_projection_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_set_as_interior: ?*c_api.godot_method_bind = null;
var mbind_set_as_interior: ?*c_api.godot_method_bind = null;
var mbind_set_cull_mask: ?*c_api.godot_method_bind = null;
var mbind_set_enable_box_projection: ?*c_api.godot_method_bind = null;
var mbind_set_enable_shadows: ?*c_api.godot_method_bind = null;
var mbind_set_extents: ?*c_api.godot_method_bind = null;
var mbind_set_intensity: ?*c_api.godot_method_bind = null;
var mbind_set_interior_ambient: ?*c_api.godot_method_bind = null;
var mbind_set_interior_ambient_energy: ?*c_api.godot_method_bind = null;
var mbind_set_interior_ambient_probe_contribution: ?*c_api.godot_method_bind = null;
var mbind_set_max_distance: ?*c_api.godot_method_bind = null;
var mbind_set_origin_offset: ?*c_api.godot_method_bind = null;
var mbind_set_update_mode: ?*c_api.godot_method_bind = null;
var mbind_reflection_probe_constructor: ?fn () ?*c_api.godot_object = null;

pub const ReflectionProbe = struct {
    const Self = @This();
    const BaseClass = VisualInstance;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_reflection_probe_constructor == null) {
            mbind_reflection_probe_constructor = try api.createConstructor("ReflectionProbe");
        }
        return api.createObject(Self, mbind_reflection_probe_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn areShadowsEnabled(self: *const Self) !bool {
        if (mbind_are_shadows_enabled == null) {
            mbind_are_shadows_enabled = try api.createMethod("ReflectionProbe", "are_shadows_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_are_shadows_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getCullMask(self: *const Self) !i32 {
        if (mbind_get_cull_mask == null) {
            mbind_get_cull_mask = try api.createMethod("ReflectionProbe", "get_cull_mask");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_cull_mask, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getExtents(self: *const Self) !godot.Vector3 {
        if (mbind_get_extents == null) {
            mbind_get_extents = try api.createMethod("ReflectionProbe", "get_extents");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_extents, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getIntensity(self: *const Self) !f32 {
        if (mbind_get_intensity == null) {
            mbind_get_intensity = try api.createMethod("ReflectionProbe", "get_intensity");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_intensity, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getInteriorAmbient(self: *const Self) !godot.Color {
        if (mbind_get_interior_ambient == null) {
            mbind_get_interior_ambient = try api.createMethod("ReflectionProbe", "get_interior_ambient");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_interior_ambient, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getInteriorAmbientEnergy(self: *const Self) !f32 {
        if (mbind_get_interior_ambient_energy == null) {
            mbind_get_interior_ambient_energy = try api.createMethod("ReflectionProbe", "get_interior_ambient_energy");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_interior_ambient_energy, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getInteriorAmbientProbeContribution(self: *const Self) !f32 {
        if (mbind_get_interior_ambient_probe_contribution == null) {
            mbind_get_interior_ambient_probe_contribution = try api.createMethod("ReflectionProbe", "get_interior_ambient_probe_contribution");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_interior_ambient_probe_contribution, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getMaxDistance(self: *const Self) !f32 {
        if (mbind_get_max_distance == null) {
            mbind_get_max_distance = try api.createMethod("ReflectionProbe", "get_max_distance");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_max_distance, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getOriginOffset(self: *const Self) !godot.Vector3 {
        if (mbind_get_origin_offset == null) {
            mbind_get_origin_offset = try api.createMethod("ReflectionProbe", "get_origin_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_origin_offset, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getUpdateMode(self: *const Self) !i32 {
        if (mbind_get_update_mode == null) {
            mbind_get_update_mode = try api.createMethod("ReflectionProbe", "get_update_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_update_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isBoxProjectionEnabled(self: *const Self) !bool {
        if (mbind_is_box_projection_enabled == null) {
            mbind_is_box_projection_enabled = try api.createMethod("ReflectionProbe", "is_box_projection_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_box_projection_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isSetAsInterior(self: *const Self) !bool {
        if (mbind_is_set_as_interior == null) {
            mbind_is_set_as_interior = try api.createMethod("ReflectionProbe", "is_set_as_interior");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_set_as_interior, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setAsInterior(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_as_interior == null) {
            mbind_set_as_interior = try api.createMethod("ReflectionProbe", "set_as_interior");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_as_interior, base, cargs, result);
    }

    pub fn setCullMask(self: *const Self, arg_layers: i32) !void {
        if (mbind_set_cull_mask == null) {
            mbind_set_cull_mask = try api.createMethod("ReflectionProbe", "set_cull_mask");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_layers),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_cull_mask, base, cargs, result);
    }

    pub fn setEnableBoxProjection(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_enable_box_projection == null) {
            mbind_set_enable_box_projection = try api.createMethod("ReflectionProbe", "set_enable_box_projection");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_enable_box_projection, base, cargs, result);
    }

    pub fn setEnableShadows(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_enable_shadows == null) {
            mbind_set_enable_shadows = try api.createMethod("ReflectionProbe", "set_enable_shadows");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_enable_shadows, base, cargs, result);
    }

    pub fn setExtents(self: *const Self, arg_extents: *const godot.Vector3) !void {
        if (mbind_set_extents == null) {
            mbind_set_extents = try api.createMethod("ReflectionProbe", "set_extents");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_extents),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_extents, base, cargs, result);
    }

    pub fn setIntensity(self: *const Self, arg_intensity: f32) !void {
        if (mbind_set_intensity == null) {
            mbind_set_intensity = try api.createMethod("ReflectionProbe", "set_intensity");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_intensity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_intensity, base, cargs, result);
    }

    pub fn setInteriorAmbient(self: *const Self, arg_ambient: *const godot.Color) !void {
        if (mbind_set_interior_ambient == null) {
            mbind_set_interior_ambient = try api.createMethod("ReflectionProbe", "set_interior_ambient");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_ambient),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_interior_ambient, base, cargs, result);
    }

    pub fn setInteriorAmbientEnergy(self: *const Self, arg_ambient_energy: f32) !void {
        if (mbind_set_interior_ambient_energy == null) {
            mbind_set_interior_ambient_energy = try api.createMethod("ReflectionProbe", "set_interior_ambient_energy");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_ambient_energy),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_interior_ambient_energy, base, cargs, result);
    }

    pub fn setInteriorAmbientProbeContribution(self: *const Self, arg_ambient_probe_contribution: f32) !void {
        if (mbind_set_interior_ambient_probe_contribution == null) {
            mbind_set_interior_ambient_probe_contribution = try api.createMethod("ReflectionProbe", "set_interior_ambient_probe_contribution");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_ambient_probe_contribution),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_interior_ambient_probe_contribution, base, cargs, result);
    }

    pub fn setMaxDistance(self: *const Self, arg_max_distance: f32) !void {
        if (mbind_set_max_distance == null) {
            mbind_set_max_distance = try api.createMethod("ReflectionProbe", "set_max_distance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_max_distance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_max_distance, base, cargs, result);
    }

    pub fn setOriginOffset(self: *const Self, arg_origin_offset: *const godot.Vector3) !void {
        if (mbind_set_origin_offset == null) {
            mbind_set_origin_offset = try api.createMethod("ReflectionProbe", "set_origin_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_origin_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_origin_offset, base, cargs, result);
    }

    pub fn setUpdateMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_update_mode == null) {
            mbind_set_update_mode = try api.createMethod("ReflectionProbe", "set_update_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_update_mode, base, cargs, result);
    }
};