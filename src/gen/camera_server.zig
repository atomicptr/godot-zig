// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_add_feed: ?*c_api.godot_method_bind = null;
var mbind_feeds: ?*c_api.godot_method_bind = null;
var mbind_get_feed: ?*c_api.godot_method_bind = null;
var mbind_get_feed_count: ?*c_api.godot_method_bind = null;
var mbind_remove_feed: ?*c_api.godot_method_bind = null;
var mbind_camera_server_constructor: ?fn () ?*c_api.godot_object = null;

pub const CameraServer = struct {
    const Self = @This();
    pub const BaseClass = godot.Object;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_camera_server_constructor == null) {
            mbind_camera_server_constructor = try api.createConstructor("CameraServer");
        }
        return api.createObject(Self, mbind_camera_server_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addFeed(self: *const Self, arg_feed: *const godot.CameraFeed) !void {
        if (mbind_add_feed == null) {
            mbind_add_feed = try api.createMethod("CameraServer", "add_feed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_feed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_feed, base, cargs, result);
    }

    pub fn feeds(self: *const Self) !godot.Array {
        if (mbind_feeds == null) {
            mbind_feeds = try api.createMethod("CameraServer", "feeds");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_feeds, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getFeed(self: *const Self, arg_index: i32) !godot.CameraFeed {
        if (mbind_get_feed == null) {
            mbind_get_feed = try api.createMethod("CameraServer", "get_feed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_feed, base, cargs, result);
        return @ptrCast(*godot.CameraFeed, @alignCast(@alignOf(&godot.CameraFeed), result)).*;
    }

    pub fn getFeedCount(self: *const Self) !i32 {
        if (mbind_get_feed_count == null) {
            mbind_get_feed_count = try api.createMethod("CameraServer", "get_feed_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_feed_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn removeFeed(self: *const Self, arg_feed: *const godot.CameraFeed) !void {
        if (mbind_remove_feed == null) {
            mbind_remove_feed = try api.createMethod("CameraServer", "remove_feed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_feed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_feed, base, cargs, result);
    }
};