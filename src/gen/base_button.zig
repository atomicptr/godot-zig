// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Control = @import("control.zig").Control;

// method bindings
var mbind_get_action_mode: ?*c_api.godot_method_bind = null;
var mbind_get_button_group: ?*c_api.godot_method_bind = null;
var mbind_get_button_mask: ?*c_api.godot_method_bind = null;
var mbind_get_draw_mode: ?*c_api.godot_method_bind = null;
var mbind_get_enabled_focus_mode: ?*c_api.godot_method_bind = null;
var mbind_get_shortcut: ?*c_api.godot_method_bind = null;
var mbind_is_disabled: ?*c_api.godot_method_bind = null;
var mbind_is_hovered: ?*c_api.godot_method_bind = null;
var mbind_is_keep_pressed_outside: ?*c_api.godot_method_bind = null;
var mbind_is_pressed: ?*c_api.godot_method_bind = null;
var mbind_is_shortcut_in_tooltip_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_toggle_mode: ?*c_api.godot_method_bind = null;
var mbind_set_action_mode: ?*c_api.godot_method_bind = null;
var mbind_set_button_group: ?*c_api.godot_method_bind = null;
var mbind_set_button_mask: ?*c_api.godot_method_bind = null;
var mbind_set_disabled: ?*c_api.godot_method_bind = null;
var mbind_set_enabled_focus_mode: ?*c_api.godot_method_bind = null;
var mbind_set_keep_pressed_outside: ?*c_api.godot_method_bind = null;
var mbind_set_pressed: ?*c_api.godot_method_bind = null;
var mbind_set_pressed_no_signal: ?*c_api.godot_method_bind = null;
var mbind_set_shortcut: ?*c_api.godot_method_bind = null;
var mbind_set_shortcut_in_tooltip: ?*c_api.godot_method_bind = null;
var mbind_set_toggle_mode: ?*c_api.godot_method_bind = null;
var mbind_base_button_constructor: ?fn () ?*c_api.godot_object = null;

pub const BaseButton = struct {
    const Self = @This();
    const BaseClass = Control;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_base_button_constructor == null) {
            mbind_base_button_constructor = try api.createConstructor("BaseButton");
        }
        return api.createObject(Self, mbind_base_button_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getActionMode(self: *const Self) !i32 {
        if (mbind_get_action_mode == null) {
            mbind_get_action_mode = try api.createMethod("BaseButton", "get_action_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_action_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getButtonGroup(self: *const Self) !godot.ButtonGroup {
        if (mbind_get_button_group == null) {
            mbind_get_button_group = try api.createMethod("BaseButton", "get_button_group");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_button_group, base, cargs, result);
        return @ptrCast(*godot.ButtonGroup, @alignCast(@alignOf(&godot.ButtonGroup), result)).*;
    }

    pub fn getButtonMask(self: *const Self) !i32 {
        if (mbind_get_button_mask == null) {
            mbind_get_button_mask = try api.createMethod("BaseButton", "get_button_mask");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_button_mask, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDrawMode(self: *const Self) !i32 {
        if (mbind_get_draw_mode == null) {
            mbind_get_draw_mode = try api.createMethod("BaseButton", "get_draw_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_draw_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getEnabledFocusMode(self: *const Self) !i32 {
        if (mbind_get_enabled_focus_mode == null) {
            mbind_get_enabled_focus_mode = try api.createMethod("BaseButton", "get_enabled_focus_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_enabled_focus_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getShortcut(self: *const Self) !godot.ShortCut {
        if (mbind_get_shortcut == null) {
            mbind_get_shortcut = try api.createMethod("BaseButton", "get_shortcut");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shortcut, base, cargs, result);
        return @ptrCast(*godot.ShortCut, @alignCast(@alignOf(&godot.ShortCut), result)).*;
    }

    pub fn isDisabled(self: *const Self) !bool {
        if (mbind_is_disabled == null) {
            mbind_is_disabled = try api.createMethod("BaseButton", "is_disabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isHovered(self: *const Self) !bool {
        if (mbind_is_hovered == null) {
            mbind_is_hovered = try api.createMethod("BaseButton", "is_hovered");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_hovered, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isKeepPressedOutside(self: *const Self) !bool {
        if (mbind_is_keep_pressed_outside == null) {
            mbind_is_keep_pressed_outside = try api.createMethod("BaseButton", "is_keep_pressed_outside");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_keep_pressed_outside, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isPressed(self: *const Self) !bool {
        if (mbind_is_pressed == null) {
            mbind_is_pressed = try api.createMethod("BaseButton", "is_pressed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_pressed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isShortcutInTooltipEnabled(self: *const Self) !bool {
        if (mbind_is_shortcut_in_tooltip_enabled == null) {
            mbind_is_shortcut_in_tooltip_enabled = try api.createMethod("BaseButton", "is_shortcut_in_tooltip_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_shortcut_in_tooltip_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isToggleMode(self: *const Self) !bool {
        if (mbind_is_toggle_mode == null) {
            mbind_is_toggle_mode = try api.createMethod("BaseButton", "is_toggle_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_toggle_mode, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setActionMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_action_mode == null) {
            mbind_set_action_mode = try api.createMethod("BaseButton", "set_action_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_action_mode, base, cargs, result);
    }

    pub fn setButtonGroup(self: *const Self, arg_button_group: *const godot.ButtonGroup) !void {
        if (mbind_set_button_group == null) {
            mbind_set_button_group = try api.createMethod("BaseButton", "set_button_group");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_button_group),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_button_group, base, cargs, result);
    }

    pub fn setButtonMask(self: *const Self, arg_mask: i32) !void {
        if (mbind_set_button_mask == null) {
            mbind_set_button_mask = try api.createMethod("BaseButton", "set_button_mask");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mask),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_button_mask, base, cargs, result);
    }

    pub fn setDisabled(self: *const Self, arg_disabled: bool) !void {
        if (mbind_set_disabled == null) {
            mbind_set_disabled = try api.createMethod("BaseButton", "set_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_disabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disabled, base, cargs, result);
    }

    pub fn setEnabledFocusMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_enabled_focus_mode == null) {
            mbind_set_enabled_focus_mode = try api.createMethod("BaseButton", "set_enabled_focus_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_enabled_focus_mode, base, cargs, result);
    }

    pub fn setKeepPressedOutside(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_keep_pressed_outside == null) {
            mbind_set_keep_pressed_outside = try api.createMethod("BaseButton", "set_keep_pressed_outside");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_keep_pressed_outside, base, cargs, result);
    }

    pub fn setPressed(self: *const Self, arg_pressed: bool) !void {
        if (mbind_set_pressed == null) {
            mbind_set_pressed = try api.createMethod("BaseButton", "set_pressed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pressed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pressed, base, cargs, result);
    }

    pub fn setPressedNoSignal(self: *const Self, arg_pressed: bool) !void {
        if (mbind_set_pressed_no_signal == null) {
            mbind_set_pressed_no_signal = try api.createMethod("BaseButton", "set_pressed_no_signal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pressed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pressed_no_signal, base, cargs, result);
    }

    pub fn setShortcut(self: *const Self, arg_shortcut: *const godot.ShortCut) !void {
        if (mbind_set_shortcut == null) {
            mbind_set_shortcut = try api.createMethod("BaseButton", "set_shortcut");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_shortcut),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shortcut, base, cargs, result);
    }

    pub fn setShortcutInTooltip(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_shortcut_in_tooltip == null) {
            mbind_set_shortcut_in_tooltip = try api.createMethod("BaseButton", "set_shortcut_in_tooltip");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shortcut_in_tooltip, base, cargs, result);
    }

    pub fn setToggleMode(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_toggle_mode == null) {
            mbind_set_toggle_mode = try api.createMethod("BaseButton", "set_toggle_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_toggle_mode, base, cargs, result);
    }
};