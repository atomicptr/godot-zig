// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Button = @import("button.zig").Button;

// method bindings
var mbind_add_icon_item: ?*c_api.godot_method_bind = null;
var mbind_add_item: ?*c_api.godot_method_bind = null;
var mbind_add_separator: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_get_item_count: ?*c_api.godot_method_bind = null;
var mbind_get_item_icon: ?*c_api.godot_method_bind = null;
var mbind_get_item_id: ?*c_api.godot_method_bind = null;
var mbind_get_item_index: ?*c_api.godot_method_bind = null;
var mbind_get_item_metadata: ?*c_api.godot_method_bind = null;
var mbind_get_item_text: ?*c_api.godot_method_bind = null;
var mbind_get_popup: ?*c_api.godot_method_bind = null;
var mbind_get_selected: ?*c_api.godot_method_bind = null;
var mbind_get_selected_id: ?*c_api.godot_method_bind = null;
var mbind_get_selected_metadata: ?*c_api.godot_method_bind = null;
var mbind_is_item_disabled: ?*c_api.godot_method_bind = null;
var mbind_remove_item: ?*c_api.godot_method_bind = null;
var mbind_select: ?*c_api.godot_method_bind = null;
var mbind_set_item_disabled: ?*c_api.godot_method_bind = null;
var mbind_set_item_icon: ?*c_api.godot_method_bind = null;
var mbind_set_item_id: ?*c_api.godot_method_bind = null;
var mbind_set_item_metadata: ?*c_api.godot_method_bind = null;
var mbind_set_item_text: ?*c_api.godot_method_bind = null;
var mbind_option_button_constructor: ?fn () ?*c_api.godot_object = null;

pub const OptionButton = struct {
    const Self = @This();
    const BaseClass = Button;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_option_button_constructor == null) {
            mbind_option_button_constructor = try api.createConstructor("OptionButton");
        }
        return api.createObject(Self, mbind_option_button_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addIconItem(self: *const Self, arg_texture: *const godot.Texture, arg_label: *const godot.String, arg_id: i32) !void {
        if (mbind_add_icon_item == null) {
            mbind_add_icon_item = try api.createMethod("OptionButton", "add_icon_item");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
            @ptrCast(*const anyopaque, arg_label),
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_icon_item, base, cargs, result);
    }

    pub fn addItem(self: *const Self, arg_label: *const godot.String, arg_id: i32) !void {
        if (mbind_add_item == null) {
            mbind_add_item = try api.createMethod("OptionButton", "add_item");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_label),
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_item, base, cargs, result);
    }

    pub fn addSeparator(self: *const Self) !void {
        if (mbind_add_separator == null) {
            mbind_add_separator = try api.createMethod("OptionButton", "add_separator");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_separator, base, cargs, result);
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("OptionButton", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn getItemCount(self: *const Self) !i32 {
        if (mbind_get_item_count == null) {
            mbind_get_item_count = try api.createMethod("OptionButton", "get_item_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getItemIcon(self: *const Self, arg_idx: i32) !godot.Texture {
        if (mbind_get_item_icon == null) {
            mbind_get_item_icon = try api.createMethod("OptionButton", "get_item_icon");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_icon, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getItemId(self: *const Self, arg_idx: i32) !i32 {
        if (mbind_get_item_id == null) {
            mbind_get_item_id = try api.createMethod("OptionButton", "get_item_id");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getItemIndex(self: *const Self, arg_id: i32) !i32 {
        if (mbind_get_item_index == null) {
            mbind_get_item_index = try api.createMethod("OptionButton", "get_item_index");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_index, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getItemMetadata(self: *const Self, arg_idx: i32) !godot.Variant {
        if (mbind_get_item_metadata == null) {
            mbind_get_item_metadata = try api.createMethod("OptionButton", "get_item_metadata");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_metadata, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getItemText(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_item_text == null) {
            mbind_get_item_text = try api.createMethod("OptionButton", "get_item_text");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_text, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getPopup(self: *const Self) !godot.PopupMenu {
        if (mbind_get_popup == null) {
            mbind_get_popup = try api.createMethod("OptionButton", "get_popup");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_popup, base, cargs, result);
        return @ptrCast(*godot.PopupMenu, @alignCast(@alignOf(&godot.PopupMenu), result)).*;
    }

    pub fn getSelected(self: *const Self) !i32 {
        if (mbind_get_selected == null) {
            mbind_get_selected = try api.createMethod("OptionButton", "get_selected");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_selected, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSelectedId(self: *const Self) !i32 {
        if (mbind_get_selected_id == null) {
            mbind_get_selected_id = try api.createMethod("OptionButton", "get_selected_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_selected_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSelectedMetadata(self: *const Self) !godot.Variant {
        if (mbind_get_selected_metadata == null) {
            mbind_get_selected_metadata = try api.createMethod("OptionButton", "get_selected_metadata");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_selected_metadata, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn isItemDisabled(self: *const Self, arg_idx: i32) !bool {
        if (mbind_is_item_disabled == null) {
            mbind_is_item_disabled = try api.createMethod("OptionButton", "is_item_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_item_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn removeItem(self: *const Self, arg_idx: i32) !void {
        if (mbind_remove_item == null) {
            mbind_remove_item = try api.createMethod("OptionButton", "remove_item");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_item, base, cargs, result);
    }

    pub fn select(self: *const Self, arg_idx: i32) !void {
        if (mbind_select == null) {
            mbind_select = try api.createMethod("OptionButton", "select");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_select, base, cargs, result);
    }

    pub fn setItemDisabled(self: *const Self, arg_idx: i32, arg_disabled: bool) !void {
        if (mbind_set_item_disabled == null) {
            mbind_set_item_disabled = try api.createMethod("OptionButton", "set_item_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, *arg_disabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_disabled, base, cargs, result);
    }

    pub fn setItemIcon(self: *const Self, arg_idx: i32, arg_texture: *const godot.Texture) !void {
        if (mbind_set_item_icon == null) {
            mbind_set_item_icon = try api.createMethod("OptionButton", "set_item_icon");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_icon, base, cargs, result);
    }

    pub fn setItemId(self: *const Self, arg_idx: i32, arg_id: i32) !void {
        if (mbind_set_item_id == null) {
            mbind_set_item_id = try api.createMethod("OptionButton", "set_item_id");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_id, base, cargs, result);
    }

    pub fn setItemMetadata(self: *const Self, arg_idx: i32, arg_metadata: *const godot.Variant) !void {
        if (mbind_set_item_metadata == null) {
            mbind_set_item_metadata = try api.createMethod("OptionButton", "set_item_metadata");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_metadata),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_metadata, base, cargs, result);
    }

    pub fn setItemText(self: *const Self, arg_idx: i32, arg_text: *const godot.String) !void {
        if (mbind_set_item_text == null) {
            mbind_set_item_text = try api.createMethod("OptionButton", "set_item_text");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_text),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_text, base, cargs, result);
    }
};