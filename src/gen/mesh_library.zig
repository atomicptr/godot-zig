// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_create_item: ?*c_api.godot_method_bind = null;
var mbind_find_item_by_name: ?*c_api.godot_method_bind = null;
var mbind_get_item_list: ?*c_api.godot_method_bind = null;
var mbind_get_item_mesh: ?*c_api.godot_method_bind = null;
var mbind_get_item_mesh_transform: ?*c_api.godot_method_bind = null;
var mbind_get_item_name: ?*c_api.godot_method_bind = null;
var mbind_get_item_navmesh: ?*c_api.godot_method_bind = null;
var mbind_get_item_navmesh_transform: ?*c_api.godot_method_bind = null;
var mbind_get_item_preview: ?*c_api.godot_method_bind = null;
var mbind_get_item_shapes: ?*c_api.godot_method_bind = null;
var mbind_get_last_unused_item_id: ?*c_api.godot_method_bind = null;
var mbind_remove_item: ?*c_api.godot_method_bind = null;
var mbind_set_item_mesh: ?*c_api.godot_method_bind = null;
var mbind_set_item_mesh_transform: ?*c_api.godot_method_bind = null;
var mbind_set_item_name: ?*c_api.godot_method_bind = null;
var mbind_set_item_navmesh: ?*c_api.godot_method_bind = null;
var mbind_set_item_navmesh_transform: ?*c_api.godot_method_bind = null;
var mbind_set_item_preview: ?*c_api.godot_method_bind = null;
var mbind_set_item_shapes: ?*c_api.godot_method_bind = null;
var mbind_mesh_library_constructor: ?fn () ?*c_api.godot_object = null;

pub const MeshLibrary = struct {
    const Self = @This();
    const BaseClass = Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_mesh_library_constructor == null) {
            mbind_mesh_library_constructor = try api.createConstructor("MeshLibrary");
        }
        return api.createObject(Self, mbind_mesh_library_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("MeshLibrary", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn createItem(self: *const Self, arg_id: i32) !void {
        if (mbind_create_item == null) {
            mbind_create_item = try api.createMethod("MeshLibrary", "create_item");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_item, base, cargs, result);
    }

    pub fn findItemByName(self: *const Self, arg_name: *const godot.String) !i32 {
        if (mbind_find_item_by_name == null) {
            mbind_find_item_by_name = try api.createMethod("MeshLibrary", "find_item_by_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_find_item_by_name, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getItemList(self: *const Self) !godot.PoolIntArray {
        if (mbind_get_item_list == null) {
            mbind_get_item_list = try api.createMethod("MeshLibrary", "get_item_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_list, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getItemMesh(self: *const Self, arg_id: i32) !godot.Mesh {
        if (mbind_get_item_mesh == null) {
            mbind_get_item_mesh = try api.createMethod("MeshLibrary", "get_item_mesh");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_mesh, base, cargs, result);
        return @ptrCast(*godot.Mesh, @alignCast(@alignOf(&godot.Mesh), result)).*;
    }

    pub fn getItemMeshTransform(self: *const Self, arg_id: i32) !godot.Transform {
        if (mbind_get_item_mesh_transform == null) {
            mbind_get_item_mesh_transform = try api.createMethod("MeshLibrary", "get_item_mesh_transform");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_mesh_transform, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getItemName(self: *const Self, arg_id: i32) !godot.String {
        if (mbind_get_item_name == null) {
            mbind_get_item_name = try api.createMethod("MeshLibrary", "get_item_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getItemNavmesh(self: *const Self, arg_id: i32) !godot.NavigationMesh {
        if (mbind_get_item_navmesh == null) {
            mbind_get_item_navmesh = try api.createMethod("MeshLibrary", "get_item_navmesh");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_navmesh, base, cargs, result);
        return @ptrCast(*godot.NavigationMesh, @alignCast(@alignOf(&godot.NavigationMesh), result)).*;
    }

    pub fn getItemNavmeshTransform(self: *const Self, arg_id: i32) !godot.Transform {
        if (mbind_get_item_navmesh_transform == null) {
            mbind_get_item_navmesh_transform = try api.createMethod("MeshLibrary", "get_item_navmesh_transform");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_navmesh_transform, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getItemPreview(self: *const Self, arg_id: i32) !godot.Texture {
        if (mbind_get_item_preview == null) {
            mbind_get_item_preview = try api.createMethod("MeshLibrary", "get_item_preview");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_preview, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getItemShapes(self: *const Self, arg_id: i32) !godot.Array {
        if (mbind_get_item_shapes == null) {
            mbind_get_item_shapes = try api.createMethod("MeshLibrary", "get_item_shapes");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_shapes, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getLastUnusedItemId(self: *const Self) !i32 {
        if (mbind_get_last_unused_item_id == null) {
            mbind_get_last_unused_item_id = try api.createMethod("MeshLibrary", "get_last_unused_item_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_last_unused_item_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn removeItem(self: *const Self, arg_id: i32) !void {
        if (mbind_remove_item == null) {
            mbind_remove_item = try api.createMethod("MeshLibrary", "remove_item");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_item, base, cargs, result);
    }

    pub fn setItemMesh(self: *const Self, arg_id: i32, arg_mesh: *const godot.Mesh) !void {
        if (mbind_set_item_mesh == null) {
            mbind_set_item_mesh = try api.createMethod("MeshLibrary", "set_item_mesh");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, arg_mesh),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_mesh, base, cargs, result);
    }

    pub fn setItemMeshTransform(self: *const Self, arg_id: i32, arg_mesh_transform: *const godot.Transform) !void {
        if (mbind_set_item_mesh_transform == null) {
            mbind_set_item_mesh_transform = try api.createMethod("MeshLibrary", "set_item_mesh_transform");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, arg_mesh_transform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_mesh_transform, base, cargs, result);
    }

    pub fn setItemName(self: *const Self, arg_id: i32, arg_name: *const godot.String) !void {
        if (mbind_set_item_name == null) {
            mbind_set_item_name = try api.createMethod("MeshLibrary", "set_item_name");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_name, base, cargs, result);
    }

    pub fn setItemNavmesh(self: *const Self, arg_id: i32, arg_navmesh: *const godot.NavigationMesh) !void {
        if (mbind_set_item_navmesh == null) {
            mbind_set_item_navmesh = try api.createMethod("MeshLibrary", "set_item_navmesh");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, arg_navmesh),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_navmesh, base, cargs, result);
    }

    pub fn setItemNavmeshTransform(self: *const Self, arg_id: i32, arg_navmesh: *const godot.Transform) !void {
        if (mbind_set_item_navmesh_transform == null) {
            mbind_set_item_navmesh_transform = try api.createMethod("MeshLibrary", "set_item_navmesh_transform");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, arg_navmesh),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_navmesh_transform, base, cargs, result);
    }

    pub fn setItemPreview(self: *const Self, arg_id: i32, arg_texture: *const godot.Texture) !void {
        if (mbind_set_item_preview == null) {
            mbind_set_item_preview = try api.createMethod("MeshLibrary", "set_item_preview");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_preview, base, cargs, result);
    }

    pub fn setItemShapes(self: *const Self, arg_id: i32, arg_shapes: *const godot.Array) !void {
        if (mbind_set_item_shapes == null) {
            mbind_set_item_shapes = try api.createMethod("MeshLibrary", "set_item_shapes");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, arg_shapes),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_item_shapes, base, cargs, result);
    }
};