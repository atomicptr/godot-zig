// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_add_bind: ?*c_api.godot_method_bind = null;
var mbind_clear_binds: ?*c_api.godot_method_bind = null;
var mbind_get_bind_bone: ?*c_api.godot_method_bind = null;
var mbind_get_bind_count: ?*c_api.godot_method_bind = null;
var mbind_get_bind_name: ?*c_api.godot_method_bind = null;
var mbind_get_bind_pose: ?*c_api.godot_method_bind = null;
var mbind_set_bind_bone: ?*c_api.godot_method_bind = null;
var mbind_set_bind_count: ?*c_api.godot_method_bind = null;
var mbind_set_bind_name: ?*c_api.godot_method_bind = null;
var mbind_set_bind_pose: ?*c_api.godot_method_bind = null;
var mbind_skin_constructor: ?fn () ?*c_api.godot_object = null;

pub const Skin = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_skin_constructor == null) {
            mbind_skin_constructor = try api.createConstructor("Skin");
        }
        return api.createObject(Self, mbind_skin_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addBind(self: *const Self, arg_bone: i32, arg_pose: *const godot.Transform) !void {
        if (mbind_add_bind == null) {
            mbind_add_bind = try api.createMethod("Skin", "add_bind");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone),
            @ptrCast(*const anyopaque, arg_pose),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_bind, base, cargs, result);
    }

    pub fn clearBinds(self: *const Self) !void {
        if (mbind_clear_binds == null) {
            mbind_clear_binds = try api.createMethod("Skin", "clear_binds");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_binds, base, cargs, result);
    }

    pub fn getBindBone(self: *const Self, arg_bind_index: i32) !i32 {
        if (mbind_get_bind_bone == null) {
            mbind_get_bind_bone = try api.createMethod("Skin", "get_bind_bone");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bind_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bind_bone, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBindCount(self: *const Self) !i32 {
        if (mbind_get_bind_count == null) {
            mbind_get_bind_count = try api.createMethod("Skin", "get_bind_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bind_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBindName(self: *const Self, arg_bind_index: i32) !godot.String {
        if (mbind_get_bind_name == null) {
            mbind_get_bind_name = try api.createMethod("Skin", "get_bind_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bind_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bind_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getBindPose(self: *const Self, arg_bind_index: i32) !godot.Transform {
        if (mbind_get_bind_pose == null) {
            mbind_get_bind_pose = try api.createMethod("Skin", "get_bind_pose");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bind_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bind_pose, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn setBindBone(self: *const Self, arg_bind_index: i32, arg_bone: i32) !void {
        if (mbind_set_bind_bone == null) {
            mbind_set_bind_bone = try api.createMethod("Skin", "set_bind_bone");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bind_index),
            @ptrCast(*const anyopaque, *arg_bone),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bind_bone, base, cargs, result);
    }

    pub fn setBindCount(self: *const Self, arg_bind_count: i32) !void {
        if (mbind_set_bind_count == null) {
            mbind_set_bind_count = try api.createMethod("Skin", "set_bind_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bind_count),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bind_count, base, cargs, result);
    }

    pub fn setBindName(self: *const Self, arg_bind_index: i32, arg_name: *const godot.String) !void {
        if (mbind_set_bind_name == null) {
            mbind_set_bind_name = try api.createMethod("Skin", "set_bind_name");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bind_index),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bind_name, base, cargs, result);
    }

    pub fn setBindPose(self: *const Self, arg_bind_index: i32, arg_pose: *const godot.Transform) !void {
        if (mbind_set_bind_pose == null) {
            mbind_set_bind_pose = try api.createMethod("Skin", "set_bind_pose");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bind_index),
            @ptrCast(*const anyopaque, arg_pose),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bind_pose, base, cargs, result);
    }
};