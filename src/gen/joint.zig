// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Spatial = @import("spatial.zig").Spatial;

// method bindings
var mbind_get_exclude_nodes_from_collision: ?*c_api.godot_method_bind = null;
var mbind_get_node_a: ?*c_api.godot_method_bind = null;
var mbind_get_node_b: ?*c_api.godot_method_bind = null;
var mbind_get_solver_priority: ?*c_api.godot_method_bind = null;
var mbind_set_exclude_nodes_from_collision: ?*c_api.godot_method_bind = null;
var mbind_set_node_a: ?*c_api.godot_method_bind = null;
var mbind_set_node_b: ?*c_api.godot_method_bind = null;
var mbind_set_solver_priority: ?*c_api.godot_method_bind = null;
var mbind_joint_constructor: ?fn () ?*c_api.godot_object = null;

pub const Joint = struct {
    const Self = @This();
    const BaseClass = Spatial;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_joint_constructor == null) {
            mbind_joint_constructor = try api.createConstructor("Joint");
        }
        return api.createObject(Self, mbind_joint_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getExcludeNodesFromCollision(self: *const Self) !bool {
        if (mbind_get_exclude_nodes_from_collision == null) {
            mbind_get_exclude_nodes_from_collision = try api.createMethod("Joint", "get_exclude_nodes_from_collision");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_exclude_nodes_from_collision, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getNodeA(self: *const Self) !godot.NodePath {
        if (mbind_get_node_a == null) {
            mbind_get_node_a = try api.createMethod("Joint", "get_node_a");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_a, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn getNodeB(self: *const Self) !godot.NodePath {
        if (mbind_get_node_b == null) {
            mbind_get_node_b = try api.createMethod("Joint", "get_node_b");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_b, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn getSolverPriority(self: *const Self) !i32 {
        if (mbind_get_solver_priority == null) {
            mbind_get_solver_priority = try api.createMethod("Joint", "get_solver_priority");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_solver_priority, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setExcludeNodesFromCollision(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_exclude_nodes_from_collision == null) {
            mbind_set_exclude_nodes_from_collision = try api.createMethod("Joint", "set_exclude_nodes_from_collision");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_exclude_nodes_from_collision, base, cargs, result);
    }

    pub fn setNodeA(self: *const Self, arg_node: *const godot.NodePath) !void {
        if (mbind_set_node_a == null) {
            mbind_set_node_a = try api.createMethod("Joint", "set_node_a");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_node_a, base, cargs, result);
    }

    pub fn setNodeB(self: *const Self, arg_node: *const godot.NodePath) !void {
        if (mbind_set_node_b == null) {
            mbind_set_node_b = try api.createMethod("Joint", "set_node_b");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_node_b, base, cargs, result);
    }

    pub fn setSolverPriority(self: *const Self, arg_priority: i32) !void {
        if (mbind_set_solver_priority == null) {
            mbind_set_solver_priority = try api.createMethod("Joint", "set_solver_priority");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_priority),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_solver_priority, base, cargs, result);
    }
};