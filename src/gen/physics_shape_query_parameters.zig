// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_get_collision_mask: ?*c_api.godot_method_bind = null;
var mbind_get_exclude: ?*c_api.godot_method_bind = null;
var mbind_get_margin: ?*c_api.godot_method_bind = null;
var mbind_get_shape_rid: ?*c_api.godot_method_bind = null;
var mbind_get_transform: ?*c_api.godot_method_bind = null;
var mbind_is_collide_with_areas_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_collide_with_bodies_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_collide_with_areas: ?*c_api.godot_method_bind = null;
var mbind_set_collide_with_bodies: ?*c_api.godot_method_bind = null;
var mbind_set_collision_mask: ?*c_api.godot_method_bind = null;
var mbind_set_exclude: ?*c_api.godot_method_bind = null;
var mbind_set_margin: ?*c_api.godot_method_bind = null;
var mbind_set_shape: ?*c_api.godot_method_bind = null;
var mbind_set_shape_rid: ?*c_api.godot_method_bind = null;
var mbind_set_transform: ?*c_api.godot_method_bind = null;
var mbind_physics_shape_query_parameters_constructor: ?fn () ?*c_api.godot_object = null;

pub const PhysicsShapeQueryParameters = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_physics_shape_query_parameters_constructor == null) {
            mbind_physics_shape_query_parameters_constructor = try api.createConstructor("PhysicsShapeQueryParameters");
        }
        return api.createObject(Self, mbind_physics_shape_query_parameters_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getCollisionMask(self: *const Self) !i32 {
        if (mbind_get_collision_mask == null) {
            mbind_get_collision_mask = try api.createMethod("PhysicsShapeQueryParameters", "get_collision_mask");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_collision_mask, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getExclude(self: *const Self) !godot.Array {
        if (mbind_get_exclude == null) {
            mbind_get_exclude = try api.createMethod("PhysicsShapeQueryParameters", "get_exclude");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_exclude, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getMargin(self: *const Self) !f32 {
        if (mbind_get_margin == null) {
            mbind_get_margin = try api.createMethod("PhysicsShapeQueryParameters", "get_margin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_margin, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getShapeRid(self: *const Self) !godot.RID {
        if (mbind_get_shape_rid == null) {
            mbind_get_shape_rid = try api.createMethod("PhysicsShapeQueryParameters", "get_shape_rid");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shape_rid, base, cargs, result);
        return @ptrCast(*godot.RID, @alignCast(@alignOf(&godot.RID), result)).*;
    }

    pub fn getTransform(self: *const Self) !godot.Transform {
        if (mbind_get_transform == null) {
            mbind_get_transform = try api.createMethod("PhysicsShapeQueryParameters", "get_transform");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_transform, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn isCollideWithAreasEnabled(self: *const Self) !bool {
        if (mbind_is_collide_with_areas_enabled == null) {
            mbind_is_collide_with_areas_enabled = try api.createMethod("PhysicsShapeQueryParameters", "is_collide_with_areas_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_collide_with_areas_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isCollideWithBodiesEnabled(self: *const Self) !bool {
        if (mbind_is_collide_with_bodies_enabled == null) {
            mbind_is_collide_with_bodies_enabled = try api.createMethod("PhysicsShapeQueryParameters", "is_collide_with_bodies_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_collide_with_bodies_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setCollideWithAreas(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_collide_with_areas == null) {
            mbind_set_collide_with_areas = try api.createMethod("PhysicsShapeQueryParameters", "set_collide_with_areas");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_collide_with_areas, base, cargs, result);
    }

    pub fn setCollideWithBodies(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_collide_with_bodies == null) {
            mbind_set_collide_with_bodies = try api.createMethod("PhysicsShapeQueryParameters", "set_collide_with_bodies");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_collide_with_bodies, base, cargs, result);
    }

    pub fn setCollisionMask(self: *const Self, arg_collision_mask: i32) !void {
        if (mbind_set_collision_mask == null) {
            mbind_set_collision_mask = try api.createMethod("PhysicsShapeQueryParameters", "set_collision_mask");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_collision_mask),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_collision_mask, base, cargs, result);
    }

    pub fn setExclude(self: *const Self, arg_exclude: *const godot.Array) !void {
        if (mbind_set_exclude == null) {
            mbind_set_exclude = try api.createMethod("PhysicsShapeQueryParameters", "set_exclude");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_exclude),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_exclude, base, cargs, result);
    }

    pub fn setMargin(self: *const Self, arg_margin: f32) !void {
        if (mbind_set_margin == null) {
            mbind_set_margin = try api.createMethod("PhysicsShapeQueryParameters", "set_margin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_margin, base, cargs, result);
    }

    pub fn setShape(self: *const Self, arg_shape: *const godot.Resource) !void {
        if (mbind_set_shape == null) {
            mbind_set_shape = try api.createMethod("PhysicsShapeQueryParameters", "set_shape");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_shape),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shape, base, cargs, result);
    }

    pub fn setShapeRid(self: *const Self, arg_shape: *const godot.RID) !void {
        if (mbind_set_shape_rid == null) {
            mbind_set_shape_rid = try api.createMethod("PhysicsShapeQueryParameters", "set_shape_rid");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_shape),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shape_rid, base, cargs, result);
    }

    pub fn setTransform(self: *const Self, arg_transform: *const godot.Transform) !void {
        if (mbind_set_transform == null) {
            mbind_set_transform = try api.createMethod("PhysicsShapeQueryParameters", "set_transform");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_transform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_transform, base, cargs, result);
    }
};