// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_add_bone: ?*c_api.godot_method_bind = null;
var mbind_bind_child_node_to_bone: ?*c_api.godot_method_bind = null;
var mbind_clear_bones: ?*c_api.godot_method_bind = null;
var mbind_clear_bones_global_pose_override: ?*c_api.godot_method_bind = null;
var mbind_find_bone: ?*c_api.godot_method_bind = null;
var mbind_get_bone_count: ?*c_api.godot_method_bind = null;
var mbind_get_bone_custom_pose: ?*c_api.godot_method_bind = null;
var mbind_get_bone_global_pose: ?*c_api.godot_method_bind = null;
var mbind_get_bone_global_pose_no_override: ?*c_api.godot_method_bind = null;
var mbind_get_bone_name: ?*c_api.godot_method_bind = null;
var mbind_get_bone_parent: ?*c_api.godot_method_bind = null;
var mbind_get_bone_pose: ?*c_api.godot_method_bind = null;
var mbind_get_bone_rest: ?*c_api.godot_method_bind = null;
var mbind_get_bound_child_nodes_to_bone: ?*c_api.godot_method_bind = null;
var mbind_is_bone_rest_disabled: ?*c_api.godot_method_bind = null;
var mbind_localize_rests: ?*c_api.godot_method_bind = null;
var mbind_physical_bones_add_collision_exception: ?*c_api.godot_method_bind = null;
var mbind_physical_bones_remove_collision_exception: ?*c_api.godot_method_bind = null;
var mbind_physical_bones_start_simulation: ?*c_api.godot_method_bind = null;
var mbind_physical_bones_stop_simulation: ?*c_api.godot_method_bind = null;
var mbind_register_skin: ?*c_api.godot_method_bind = null;
var mbind_set_bone_custom_pose: ?*c_api.godot_method_bind = null;
var mbind_set_bone_disable_rest: ?*c_api.godot_method_bind = null;
var mbind_set_bone_global_pose_override: ?*c_api.godot_method_bind = null;
var mbind_set_bone_name: ?*c_api.godot_method_bind = null;
var mbind_set_bone_parent: ?*c_api.godot_method_bind = null;
var mbind_set_bone_pose: ?*c_api.godot_method_bind = null;
var mbind_set_bone_rest: ?*c_api.godot_method_bind = null;
var mbind_unbind_child_node_from_bone: ?*c_api.godot_method_bind = null;
var mbind_unparent_bone_and_rest: ?*c_api.godot_method_bind = null;
var mbind_skeleton_constructor: ?fn () ?*c_api.godot_object = null;

pub const Skeleton = struct {
    const Self = @This();
    pub const BaseClass = godot.Spatial;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_skeleton_constructor == null) {
            mbind_skeleton_constructor = try api.createConstructor("Skeleton");
        }
        return api.createObject(Self, mbind_skeleton_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addBone(self: *const Self, arg_name: *const godot.String) !void {
        if (mbind_add_bone == null) {
            mbind_add_bone = try api.createMethod("Skeleton", "add_bone");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_bone, base, cargs, result);
    }

    pub fn bindChildNodeToBone(self: *const Self, arg_bone_idx: i32, arg_node: *const godot.Node) !void {
        if (mbind_bind_child_node_to_bone == null) {
            mbind_bind_child_node_to_bone = try api.createMethod("Skeleton", "bind_child_node_to_bone");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bind_child_node_to_bone, base, cargs, result);
    }

    pub fn clearBones(self: *const Self) !void {
        if (mbind_clear_bones == null) {
            mbind_clear_bones = try api.createMethod("Skeleton", "clear_bones");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_bones, base, cargs, result);
    }

    pub fn clearBonesGlobalPoseOverride(self: *const Self) !void {
        if (mbind_clear_bones_global_pose_override == null) {
            mbind_clear_bones_global_pose_override = try api.createMethod("Skeleton", "clear_bones_global_pose_override");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_bones_global_pose_override, base, cargs, result);
    }

    pub fn findBone(self: *const Self, arg_name: *const godot.String) !i32 {
        if (mbind_find_bone == null) {
            mbind_find_bone = try api.createMethod("Skeleton", "find_bone");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_find_bone, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBoneCount(self: *const Self) !i32 {
        if (mbind_get_bone_count == null) {
            mbind_get_bone_count = try api.createMethod("Skeleton", "get_bone_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBoneCustomPose(self: *const Self, arg_bone_idx: i32) !godot.Transform {
        if (mbind_get_bone_custom_pose == null) {
            mbind_get_bone_custom_pose = try api.createMethod("Skeleton", "get_bone_custom_pose");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone_custom_pose, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getBoneGlobalPose(self: *const Self, arg_bone_idx: i32) !godot.Transform {
        if (mbind_get_bone_global_pose == null) {
            mbind_get_bone_global_pose = try api.createMethod("Skeleton", "get_bone_global_pose");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone_global_pose, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getBoneGlobalPoseNoOverride(self: *const Self, arg_bone_idx: i32) !godot.Transform {
        if (mbind_get_bone_global_pose_no_override == null) {
            mbind_get_bone_global_pose_no_override = try api.createMethod("Skeleton", "get_bone_global_pose_no_override");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone_global_pose_no_override, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getBoneName(self: *const Self, arg_bone_idx: i32) !godot.String {
        if (mbind_get_bone_name == null) {
            mbind_get_bone_name = try api.createMethod("Skeleton", "get_bone_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getBoneParent(self: *const Self, arg_bone_idx: i32) !i32 {
        if (mbind_get_bone_parent == null) {
            mbind_get_bone_parent = try api.createMethod("Skeleton", "get_bone_parent");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone_parent, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBonePose(self: *const Self, arg_bone_idx: i32) !godot.Transform {
        if (mbind_get_bone_pose == null) {
            mbind_get_bone_pose = try api.createMethod("Skeleton", "get_bone_pose");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone_pose, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getBoneRest(self: *const Self, arg_bone_idx: i32) !godot.Transform {
        if (mbind_get_bone_rest == null) {
            mbind_get_bone_rest = try api.createMethod("Skeleton", "get_bone_rest");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone_rest, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getBoundChildNodesToBone(self: *const Self, arg_bone_idx: i32) !godot.Array {
        if (mbind_get_bound_child_nodes_to_bone == null) {
            mbind_get_bound_child_nodes_to_bone = try api.createMethod("Skeleton", "get_bound_child_nodes_to_bone");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bound_child_nodes_to_bone, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn isBoneRestDisabled(self: *const Self, arg_bone_idx: i32) !bool {
        if (mbind_is_bone_rest_disabled == null) {
            mbind_is_bone_rest_disabled = try api.createMethod("Skeleton", "is_bone_rest_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_bone_rest_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn localizeRests(self: *const Self) !void {
        if (mbind_localize_rests == null) {
            mbind_localize_rests = try api.createMethod("Skeleton", "localize_rests");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_localize_rests, base, cargs, result);
    }

    pub fn physicalBonesAddCollisionException(self: *const Self, arg_exception: *const godot.RID) !void {
        if (mbind_physical_bones_add_collision_exception == null) {
            mbind_physical_bones_add_collision_exception = try api.createMethod("Skeleton", "physical_bones_add_collision_exception");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_exception),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_physical_bones_add_collision_exception, base, cargs, result);
    }

    pub fn physicalBonesRemoveCollisionException(self: *const Self, arg_exception: *const godot.RID) !void {
        if (mbind_physical_bones_remove_collision_exception == null) {
            mbind_physical_bones_remove_collision_exception = try api.createMethod("Skeleton", "physical_bones_remove_collision_exception");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_exception),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_physical_bones_remove_collision_exception, base, cargs, result);
    }

    pub fn physicalBonesStartSimulation(self: *const Self, arg_bones: *const godot.Array) !void {
        if (mbind_physical_bones_start_simulation == null) {
            mbind_physical_bones_start_simulation = try api.createMethod("Skeleton", "physical_bones_start_simulation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_bones),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_physical_bones_start_simulation, base, cargs, result);
    }

    pub fn physicalBonesStopSimulation(self: *const Self) !void {
        if (mbind_physical_bones_stop_simulation == null) {
            mbind_physical_bones_stop_simulation = try api.createMethod("Skeleton", "physical_bones_stop_simulation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_physical_bones_stop_simulation, base, cargs, result);
    }

    pub fn registerSkin(self: *const Self, arg_skin: *const godot.Skin) !godot.SkinReference {
        if (mbind_register_skin == null) {
            mbind_register_skin = try api.createMethod("Skeleton", "register_skin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_skin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_register_skin, base, cargs, result);
        return @ptrCast(*godot.SkinReference, @alignCast(@alignOf(&godot.SkinReference), result)).*;
    }

    pub fn setBoneCustomPose(self: *const Self, arg_bone_idx: i32, arg_custom_pose: *const godot.Transform) !void {
        if (mbind_set_bone_custom_pose == null) {
            mbind_set_bone_custom_pose = try api.createMethod("Skeleton", "set_bone_custom_pose");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
            @ptrCast(*const anyopaque, arg_custom_pose),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bone_custom_pose, base, cargs, result);
    }

    pub fn setBoneDisableRest(self: *const Self, arg_bone_idx: i32, arg_disable: bool) !void {
        if (mbind_set_bone_disable_rest == null) {
            mbind_set_bone_disable_rest = try api.createMethod("Skeleton", "set_bone_disable_rest");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
            @ptrCast(*const anyopaque, *arg_disable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bone_disable_rest, base, cargs, result);
    }

    pub fn setBoneGlobalPoseOverride(self: *const Self, arg_bone_idx: i32, arg_pose: *const godot.Transform, arg_amount: f32, arg_persistent: bool) !void {
        if (mbind_set_bone_global_pose_override == null) {
            mbind_set_bone_global_pose_override = try api.createMethod("Skeleton", "set_bone_global_pose_override");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
            @ptrCast(*const anyopaque, arg_pose),
            @ptrCast(*const anyopaque, *arg_amount),
            @ptrCast(*const anyopaque, *arg_persistent),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bone_global_pose_override, base, cargs, result);
    }

    pub fn setBoneName(self: *const Self, arg_bone_idx: i32, arg_name: *const godot.String) !void {
        if (mbind_set_bone_name == null) {
            mbind_set_bone_name = try api.createMethod("Skeleton", "set_bone_name");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bone_name, base, cargs, result);
    }

    pub fn setBoneParent(self: *const Self, arg_bone_idx: i32, arg_parent_idx: i32) !void {
        if (mbind_set_bone_parent == null) {
            mbind_set_bone_parent = try api.createMethod("Skeleton", "set_bone_parent");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
            @ptrCast(*const anyopaque, *arg_parent_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bone_parent, base, cargs, result);
    }

    pub fn setBonePose(self: *const Self, arg_bone_idx: i32, arg_pose: *const godot.Transform) !void {
        if (mbind_set_bone_pose == null) {
            mbind_set_bone_pose = try api.createMethod("Skeleton", "set_bone_pose");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
            @ptrCast(*const anyopaque, arg_pose),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bone_pose, base, cargs, result);
    }

    pub fn setBoneRest(self: *const Self, arg_bone_idx: i32, arg_rest: *const godot.Transform) !void {
        if (mbind_set_bone_rest == null) {
            mbind_set_bone_rest = try api.createMethod("Skeleton", "set_bone_rest");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
            @ptrCast(*const anyopaque, arg_rest),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bone_rest, base, cargs, result);
    }

    pub fn unbindChildNodeFromBone(self: *const Self, arg_bone_idx: i32, arg_node: *const godot.Node) !void {
        if (mbind_unbind_child_node_from_bone == null) {
            mbind_unbind_child_node_from_bone = try api.createMethod("Skeleton", "unbind_child_node_from_bone");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_unbind_child_node_from_bone, base, cargs, result);
    }

    pub fn unparentBoneAndRest(self: *const Self, arg_bone_idx: i32) !void {
        if (mbind_unparent_bone_and_rest == null) {
            mbind_unparent_bone_and_rest = try api.createMethod("Skeleton", "unparent_bone_and_rest");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bone_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_unparent_bone_and_rest, base, cargs, result);
    }
};