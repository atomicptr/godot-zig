// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_get_depth: ?*c_api.godot_method_bind = null;
var mbind_get_flags: ?*c_api.godot_method_bind = null;
var mbind_get_format: ?*c_api.godot_method_bind = null;
var mbind_get_height: ?*c_api.godot_method_bind = null;
var mbind_get_layer_data: ?*c_api.godot_method_bind = null;
var mbind_get_width: ?*c_api.godot_method_bind = null;
var mbind_set_data_partial: ?*c_api.godot_method_bind = null;
var mbind_set_flags: ?*c_api.godot_method_bind = null;
var mbind_set_layer_data: ?*c_api.godot_method_bind = null;
var mbind_texture_layered_constructor: ?fn () ?*c_api.godot_object = null;

pub const TextureLayered = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_texture_layered_constructor == null) {
            mbind_texture_layered_constructor = try api.createConstructor("TextureLayered");
        }
        return api.createObject(Self, mbind_texture_layered_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getDepth(self: *const Self) !i32 {
        if (mbind_get_depth == null) {
            mbind_get_depth = try api.createMethod("TextureLayered", "get_depth");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_depth, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFlags(self: *const Self) !i32 {
        if (mbind_get_flags == null) {
            mbind_get_flags = try api.createMethod("TextureLayered", "get_flags");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_flags, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFormat(self: *const Self) !i32 {
        if (mbind_get_format == null) {
            mbind_get_format = try api.createMethod("TextureLayered", "get_format");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_format, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getHeight(self: *const Self) !i32 {
        if (mbind_get_height == null) {
            mbind_get_height = try api.createMethod("TextureLayered", "get_height");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_height, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLayerData(self: *const Self, arg_layer: i32) !godot.Image {
        if (mbind_get_layer_data == null) {
            mbind_get_layer_data = try api.createMethod("TextureLayered", "get_layer_data");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_layer),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_layer_data, base, cargs, result);
        return @ptrCast(*godot.Image, @alignCast(@alignOf(&godot.Image), result)).*;
    }

    pub fn getWidth(self: *const Self) !i32 {
        if (mbind_get_width == null) {
            mbind_get_width = try api.createMethod("TextureLayered", "get_width");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_width, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setDataPartial(self: *const Self, arg_image: *const godot.Image, arg_x_offset: i32, arg_y_offset: i32, arg_layer: i32, arg_mipmap: i32) !void {
        if (mbind_set_data_partial == null) {
            mbind_set_data_partial = try api.createMethod("TextureLayered", "set_data_partial");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_image),
            @ptrCast(*const anyopaque, *arg_x_offset),
            @ptrCast(*const anyopaque, *arg_y_offset),
            @ptrCast(*const anyopaque, *arg_layer),
            @ptrCast(*const anyopaque, *arg_mipmap),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_data_partial, base, cargs, result);
    }

    pub fn setFlags(self: *const Self, arg_flags: i32) !void {
        if (mbind_set_flags == null) {
            mbind_set_flags = try api.createMethod("TextureLayered", "set_flags");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flags),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_flags, base, cargs, result);
    }

    pub fn setLayerData(self: *const Self, arg_image: *const godot.Image, arg_layer: i32) !void {
        if (mbind_set_layer_data == null) {
            mbind_set_layer_data = try api.createMethod("TextureLayered", "set_layer_data");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_image),
            @ptrCast(*const anyopaque, *arg_layer),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_layer_data, base, cargs, result);
    }
};