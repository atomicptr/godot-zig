// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const PackedScene = @import("packed_scene.zig").PackedScene;

// method bindings
var mbind_export_gltf: ?*c_api.godot_method_bind = null;
var mbind_import_gltf_scene: ?*c_api.godot_method_bind = null;
var mbind_pack_gltf: ?*c_api.godot_method_bind = null;
var mbind_packed_scene_gltf_constructor: ?fn () ?*c_api.godot_object = null;

pub const PackedSceneGLTF = struct {
    const Self = @This();
    const BaseClass = PackedScene;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_packed_scene_gltf_constructor == null) {
            mbind_packed_scene_gltf_constructor = try api.createConstructor("PackedSceneGLTF");
        }
        return api.createObject(Self, mbind_packed_scene_gltf_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn exportGltf(self: *const Self, arg_node: *const godot.Node, arg_path: *const godot.String, arg_flags: i32, arg_bake_fps: f32) !i32 {
        if (mbind_export_gltf == null) {
            mbind_export_gltf = try api.createMethod("PackedSceneGLTF", "export_gltf");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_node),
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, *arg_flags),
            @ptrCast(*const anyopaque, *arg_bake_fps),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_export_gltf, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn importGltfScene(self: *const Self, arg_path: *const godot.String, arg_flags: i32, arg_bake_fps: f32, arg_compress_flags: i32, arg_state: *const godot.GLTFState) !godot.Node {
        if (mbind_import_gltf_scene == null) {
            mbind_import_gltf_scene = try api.createMethod("PackedSceneGLTF", "import_gltf_scene");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, *arg_flags),
            @ptrCast(*const anyopaque, *arg_bake_fps),
            @ptrCast(*const anyopaque, *arg_compress_flags),
            @ptrCast(*const anyopaque, arg_state),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_import_gltf_scene, base, cargs, result);
        return @ptrCast(*godot.Node, @alignCast(@alignOf(&godot.Node), result)).*;
    }

    pub fn packGltf(self: *const Self, arg_path: *const godot.String, arg_flags: i32, arg_bake_fps: f32, arg_compress_flags: i32, arg_state: *const godot.GLTFState) !void {
        if (mbind_pack_gltf == null) {
            mbind_pack_gltf = try api.createMethod("PackedSceneGLTF", "pack_gltf");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, *arg_flags),
            @ptrCast(*const anyopaque, *arg_bake_fps),
            @ptrCast(*const anyopaque, *arg_compress_flags),
            @ptrCast(*const anyopaque, arg_state),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_pack_gltf, base, cargs, result);
    }
};