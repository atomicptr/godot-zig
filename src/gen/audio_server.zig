// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Object = @import("object.zig").Object;

// method bindings
var mbind_add_bus: ?*c_api.godot_method_bind = null;
var mbind_add_bus_effect: ?*c_api.godot_method_bind = null;
var mbind_capture_get_device: ?*c_api.godot_method_bind = null;
var mbind_capture_get_device_list: ?*c_api.godot_method_bind = null;
var mbind_capture_set_device: ?*c_api.godot_method_bind = null;
var mbind_generate_bus_layout: ?*c_api.godot_method_bind = null;
var mbind_get_bus_channels: ?*c_api.godot_method_bind = null;
var mbind_get_bus_count: ?*c_api.godot_method_bind = null;
var mbind_get_bus_effect: ?*c_api.godot_method_bind = null;
var mbind_get_bus_effect_count: ?*c_api.godot_method_bind = null;
var mbind_get_bus_effect_instance: ?*c_api.godot_method_bind = null;
var mbind_get_bus_index: ?*c_api.godot_method_bind = null;
var mbind_get_bus_name: ?*c_api.godot_method_bind = null;
var mbind_get_bus_peak_volume_left_db: ?*c_api.godot_method_bind = null;
var mbind_get_bus_peak_volume_right_db: ?*c_api.godot_method_bind = null;
var mbind_get_bus_send: ?*c_api.godot_method_bind = null;
var mbind_get_bus_volume_db: ?*c_api.godot_method_bind = null;
var mbind_get_device: ?*c_api.godot_method_bind = null;
var mbind_get_device_list: ?*c_api.godot_method_bind = null;
var mbind_get_global_rate_scale: ?*c_api.godot_method_bind = null;
var mbind_get_mix_rate: ?*c_api.godot_method_bind = null;
var mbind_get_output_latency: ?*c_api.godot_method_bind = null;
var mbind_get_speaker_mode: ?*c_api.godot_method_bind = null;
var mbind_get_time_since_last_mix: ?*c_api.godot_method_bind = null;
var mbind_get_time_to_next_mix: ?*c_api.godot_method_bind = null;
var mbind_is_bus_bypassing_effects: ?*c_api.godot_method_bind = null;
var mbind_is_bus_effect_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_bus_mute: ?*c_api.godot_method_bind = null;
var mbind_is_bus_solo: ?*c_api.godot_method_bind = null;
var mbind_lock: ?*c_api.godot_method_bind = null;
var mbind_move_bus: ?*c_api.godot_method_bind = null;
var mbind_remove_bus: ?*c_api.godot_method_bind = null;
var mbind_remove_bus_effect: ?*c_api.godot_method_bind = null;
var mbind_set_bus_bypass_effects: ?*c_api.godot_method_bind = null;
var mbind_set_bus_count: ?*c_api.godot_method_bind = null;
var mbind_set_bus_effect_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_bus_layout: ?*c_api.godot_method_bind = null;
var mbind_set_bus_mute: ?*c_api.godot_method_bind = null;
var mbind_set_bus_name: ?*c_api.godot_method_bind = null;
var mbind_set_bus_send: ?*c_api.godot_method_bind = null;
var mbind_set_bus_solo: ?*c_api.godot_method_bind = null;
var mbind_set_bus_volume_db: ?*c_api.godot_method_bind = null;
var mbind_set_device: ?*c_api.godot_method_bind = null;
var mbind_set_global_rate_scale: ?*c_api.godot_method_bind = null;
var mbind_swap_bus_effects: ?*c_api.godot_method_bind = null;
var mbind_unlock: ?*c_api.godot_method_bind = null;
var mbind_audio_server_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioServer = struct {
    const Self = @This();
    const BaseClass = Object;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_server_constructor == null) {
            mbind_audio_server_constructor = try api.createConstructor("AudioServer");
        }
        return api.createObject(Self, mbind_audio_server_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addBus(self: *const Self, arg_at_position: i32) !void {
        if (mbind_add_bus == null) {
            mbind_add_bus = try api.createMethod("AudioServer", "add_bus");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_at_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_bus, base, cargs, result);
    }

    pub fn addBusEffect(self: *const Self, arg_bus_idx: i32, arg_effect: *const godot.AudioEffect, arg_at_position: i32) !void {
        if (mbind_add_bus_effect == null) {
            mbind_add_bus_effect = try api.createMethod("AudioServer", "add_bus_effect");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, arg_effect),
            @ptrCast(*const anyopaque, *arg_at_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_bus_effect, base, cargs, result);
    }

    pub fn captureGetDevice(self: *const Self) !godot.String {
        if (mbind_capture_get_device == null) {
            mbind_capture_get_device = try api.createMethod("AudioServer", "capture_get_device");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_capture_get_device, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn captureGetDeviceList(self: *const Self) !godot.Array {
        if (mbind_capture_get_device_list == null) {
            mbind_capture_get_device_list = try api.createMethod("AudioServer", "capture_get_device_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_capture_get_device_list, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn captureSetDevice(self: *const Self, arg_name: *const godot.String) !void {
        if (mbind_capture_set_device == null) {
            mbind_capture_set_device = try api.createMethod("AudioServer", "capture_set_device");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_capture_set_device, base, cargs, result);
    }

    pub fn generateBusLayout(self: *const Self) !godot.AudioBusLayout {
        if (mbind_generate_bus_layout == null) {
            mbind_generate_bus_layout = try api.createMethod("AudioServer", "generate_bus_layout");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_generate_bus_layout, base, cargs, result);
        return @ptrCast(*godot.AudioBusLayout, @alignCast(@alignOf(&godot.AudioBusLayout), result)).*;
    }

    pub fn getBusChannels(self: *const Self, arg_bus_idx: i32) !i32 {
        if (mbind_get_bus_channels == null) {
            mbind_get_bus_channels = try api.createMethod("AudioServer", "get_bus_channels");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_channels, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBusCount(self: *const Self) !i32 {
        if (mbind_get_bus_count == null) {
            mbind_get_bus_count = try api.createMethod("AudioServer", "get_bus_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBusEffect(self: *const Self, arg_bus_idx: i32, arg_effect_idx: i32) !godot.AudioEffect {
        if (mbind_get_bus_effect == null) {
            mbind_get_bus_effect = try api.createMethod("AudioServer", "get_bus_effect");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_effect_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_effect, base, cargs, result);
        return @ptrCast(*godot.AudioEffect, @alignCast(@alignOf(&godot.AudioEffect), result)).*;
    }

    pub fn getBusEffectCount(self: *const Self, arg_bus_idx: i32) !i32 {
        if (mbind_get_bus_effect_count == null) {
            mbind_get_bus_effect_count = try api.createMethod("AudioServer", "get_bus_effect_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_effect_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBusEffectInstance(self: *const Self, arg_bus_idx: i32, arg_effect_idx: i32, arg_channel: i32) !godot.AudioEffectInstance {
        if (mbind_get_bus_effect_instance == null) {
            mbind_get_bus_effect_instance = try api.createMethod("AudioServer", "get_bus_effect_instance");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_effect_idx),
            @ptrCast(*const anyopaque, *arg_channel),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_effect_instance, base, cargs, result);
        return @ptrCast(*godot.AudioEffectInstance, @alignCast(@alignOf(&godot.AudioEffectInstance), result)).*;
    }

    pub fn getBusIndex(self: *const Self, arg_bus_name: *const godot.String) !i32 {
        if (mbind_get_bus_index == null) {
            mbind_get_bus_index = try api.createMethod("AudioServer", "get_bus_index");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_bus_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_index, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBusName(self: *const Self, arg_bus_idx: i32) !godot.String {
        if (mbind_get_bus_name == null) {
            mbind_get_bus_name = try api.createMethod("AudioServer", "get_bus_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getBusPeakVolumeLeftDb(self: *const Self, arg_bus_idx: i32, arg_channel: i32) !f32 {
        if (mbind_get_bus_peak_volume_left_db == null) {
            mbind_get_bus_peak_volume_left_db = try api.createMethod("AudioServer", "get_bus_peak_volume_left_db");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_channel),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_peak_volume_left_db, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getBusPeakVolumeRightDb(self: *const Self, arg_bus_idx: i32, arg_channel: i32) !f32 {
        if (mbind_get_bus_peak_volume_right_db == null) {
            mbind_get_bus_peak_volume_right_db = try api.createMethod("AudioServer", "get_bus_peak_volume_right_db");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_channel),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_peak_volume_right_db, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getBusSend(self: *const Self, arg_bus_idx: i32) !godot.String {
        if (mbind_get_bus_send == null) {
            mbind_get_bus_send = try api.createMethod("AudioServer", "get_bus_send");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_send, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getBusVolumeDb(self: *const Self, arg_bus_idx: i32) !f32 {
        if (mbind_get_bus_volume_db == null) {
            mbind_get_bus_volume_db = try api.createMethod("AudioServer", "get_bus_volume_db");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus_volume_db, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDevice(self: *const Self) !godot.String {
        if (mbind_get_device == null) {
            mbind_get_device = try api.createMethod("AudioServer", "get_device");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_device, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getDeviceList(self: *const Self) !godot.Array {
        if (mbind_get_device_list == null) {
            mbind_get_device_list = try api.createMethod("AudioServer", "get_device_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_device_list, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getGlobalRateScale(self: *const Self) !f32 {
        if (mbind_get_global_rate_scale == null) {
            mbind_get_global_rate_scale = try api.createMethod("AudioServer", "get_global_rate_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_global_rate_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getMixRate(self: *const Self) !f32 {
        if (mbind_get_mix_rate == null) {
            mbind_get_mix_rate = try api.createMethod("AudioServer", "get_mix_rate");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mix_rate, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getOutputLatency(self: *const Self) !f32 {
        if (mbind_get_output_latency == null) {
            mbind_get_output_latency = try api.createMethod("AudioServer", "get_output_latency");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_output_latency, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSpeakerMode(self: *const Self) !i32 {
        if (mbind_get_speaker_mode == null) {
            mbind_get_speaker_mode = try api.createMethod("AudioServer", "get_speaker_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_speaker_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTimeSinceLastMix(self: *const Self) !f32 {
        if (mbind_get_time_since_last_mix == null) {
            mbind_get_time_since_last_mix = try api.createMethod("AudioServer", "get_time_since_last_mix");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_time_since_last_mix, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTimeToNextMix(self: *const Self) !f32 {
        if (mbind_get_time_to_next_mix == null) {
            mbind_get_time_to_next_mix = try api.createMethod("AudioServer", "get_time_to_next_mix");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_time_to_next_mix, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn isBusBypassingEffects(self: *const Self, arg_bus_idx: i32) !bool {
        if (mbind_is_bus_bypassing_effects == null) {
            mbind_is_bus_bypassing_effects = try api.createMethod("AudioServer", "is_bus_bypassing_effects");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_bus_bypassing_effects, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isBusEffectEnabled(self: *const Self, arg_bus_idx: i32, arg_effect_idx: i32) !bool {
        if (mbind_is_bus_effect_enabled == null) {
            mbind_is_bus_effect_enabled = try api.createMethod("AudioServer", "is_bus_effect_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_effect_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_bus_effect_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isBusMute(self: *const Self, arg_bus_idx: i32) !bool {
        if (mbind_is_bus_mute == null) {
            mbind_is_bus_mute = try api.createMethod("AudioServer", "is_bus_mute");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_bus_mute, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isBusSolo(self: *const Self, arg_bus_idx: i32) !bool {
        if (mbind_is_bus_solo == null) {
            mbind_is_bus_solo = try api.createMethod("AudioServer", "is_bus_solo");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_bus_solo, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn lock(self: *const Self) !void {
        if (mbind_lock == null) {
            mbind_lock = try api.createMethod("AudioServer", "lock");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_lock, base, cargs, result);
    }

    pub fn moveBus(self: *const Self, arg_index: i32, arg_to_index: i32) !void {
        if (mbind_move_bus == null) {
            mbind_move_bus = try api.createMethod("AudioServer", "move_bus");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_index),
            @ptrCast(*const anyopaque, *arg_to_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_move_bus, base, cargs, result);
    }

    pub fn removeBus(self: *const Self, arg_index: i32) !void {
        if (mbind_remove_bus == null) {
            mbind_remove_bus = try api.createMethod("AudioServer", "remove_bus");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_bus, base, cargs, result);
    }

    pub fn removeBusEffect(self: *const Self, arg_bus_idx: i32, arg_effect_idx: i32) !void {
        if (mbind_remove_bus_effect == null) {
            mbind_remove_bus_effect = try api.createMethod("AudioServer", "remove_bus_effect");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_effect_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_bus_effect, base, cargs, result);
    }

    pub fn setBusBypassEffects(self: *const Self, arg_bus_idx: i32, arg_enable: bool) !void {
        if (mbind_set_bus_bypass_effects == null) {
            mbind_set_bus_bypass_effects = try api.createMethod("AudioServer", "set_bus_bypass_effects");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bus_bypass_effects, base, cargs, result);
    }

    pub fn setBusCount(self: *const Self, arg_amount: i32) !void {
        if (mbind_set_bus_count == null) {
            mbind_set_bus_count = try api.createMethod("AudioServer", "set_bus_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bus_count, base, cargs, result);
    }

    pub fn setBusEffectEnabled(self: *const Self, arg_bus_idx: i32, arg_effect_idx: i32, arg_enabled: bool) !void {
        if (mbind_set_bus_effect_enabled == null) {
            mbind_set_bus_effect_enabled = try api.createMethod("AudioServer", "set_bus_effect_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_effect_idx),
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bus_effect_enabled, base, cargs, result);
    }

    pub fn setBusLayout(self: *const Self, arg_bus_layout: *const godot.AudioBusLayout) !void {
        if (mbind_set_bus_layout == null) {
            mbind_set_bus_layout = try api.createMethod("AudioServer", "set_bus_layout");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_bus_layout),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bus_layout, base, cargs, result);
    }

    pub fn setBusMute(self: *const Self, arg_bus_idx: i32, arg_enable: bool) !void {
        if (mbind_set_bus_mute == null) {
            mbind_set_bus_mute = try api.createMethod("AudioServer", "set_bus_mute");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bus_mute, base, cargs, result);
    }

    pub fn setBusName(self: *const Self, arg_bus_idx: i32, arg_name: *const godot.String) !void {
        if (mbind_set_bus_name == null) {
            mbind_set_bus_name = try api.createMethod("AudioServer", "set_bus_name");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bus_name, base, cargs, result);
    }

    pub fn setBusSend(self: *const Self, arg_bus_idx: i32, arg_send: *const godot.String) !void {
        if (mbind_set_bus_send == null) {
            mbind_set_bus_send = try api.createMethod("AudioServer", "set_bus_send");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, arg_send),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bus_send, base, cargs, result);
    }

    pub fn setBusSolo(self: *const Self, arg_bus_idx: i32, arg_enable: bool) !void {
        if (mbind_set_bus_solo == null) {
            mbind_set_bus_solo = try api.createMethod("AudioServer", "set_bus_solo");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bus_solo, base, cargs, result);
    }

    pub fn setBusVolumeDb(self: *const Self, arg_bus_idx: i32, arg_volume_db: f32) !void {
        if (mbind_set_bus_volume_db == null) {
            mbind_set_bus_volume_db = try api.createMethod("AudioServer", "set_bus_volume_db");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_volume_db),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bus_volume_db, base, cargs, result);
    }

    pub fn setDevice(self: *const Self, arg_device: *const godot.String) !void {
        if (mbind_set_device == null) {
            mbind_set_device = try api.createMethod("AudioServer", "set_device");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_device),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_device, base, cargs, result);
    }

    pub fn setGlobalRateScale(self: *const Self, arg_scale: f32) !void {
        if (mbind_set_global_rate_scale == null) {
            mbind_set_global_rate_scale = try api.createMethod("AudioServer", "set_global_rate_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_global_rate_scale, base, cargs, result);
    }

    pub fn swapBusEffects(self: *const Self, arg_bus_idx: i32, arg_effect_idx: i32, arg_by_effect_idx: i32) !void {
        if (mbind_swap_bus_effects == null) {
            mbind_swap_bus_effects = try api.createMethod("AudioServer", "swap_bus_effects");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bus_idx),
            @ptrCast(*const anyopaque, *arg_effect_idx),
            @ptrCast(*const anyopaque, *arg_by_effect_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_swap_bus_effects, base, cargs, result);
    }

    pub fn unlock(self: *const Self) !void {
        if (mbind_unlock == null) {
            mbind_unlock = try api.createMethod("AudioServer", "unlock");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_unlock, base, cargs, result);
    }
};