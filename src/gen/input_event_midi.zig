// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const InputEvent = @import("input_event.zig").InputEvent;

// method bindings
var mbind_get_channel: ?*c_api.godot_method_bind = null;
var mbind_get_controller_number: ?*c_api.godot_method_bind = null;
var mbind_get_controller_value: ?*c_api.godot_method_bind = null;
var mbind_get_instrument: ?*c_api.godot_method_bind = null;
var mbind_get_message: ?*c_api.godot_method_bind = null;
var mbind_get_pitch: ?*c_api.godot_method_bind = null;
var mbind_get_pressure: ?*c_api.godot_method_bind = null;
var mbind_get_velocity: ?*c_api.godot_method_bind = null;
var mbind_set_channel: ?*c_api.godot_method_bind = null;
var mbind_set_controller_number: ?*c_api.godot_method_bind = null;
var mbind_set_controller_value: ?*c_api.godot_method_bind = null;
var mbind_set_instrument: ?*c_api.godot_method_bind = null;
var mbind_set_message: ?*c_api.godot_method_bind = null;
var mbind_set_pitch: ?*c_api.godot_method_bind = null;
var mbind_set_pressure: ?*c_api.godot_method_bind = null;
var mbind_set_velocity: ?*c_api.godot_method_bind = null;
var mbind_input_event_midi_constructor: ?fn () ?*c_api.godot_object = null;

pub const InputEventMIDI = struct {
    const Self = @This();
    const BaseClass = InputEvent;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_input_event_midi_constructor == null) {
            mbind_input_event_midi_constructor = try api.createConstructor("InputEventMIDI");
        }
        return api.createObject(Self, mbind_input_event_midi_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getChannel(self: *const Self) !i32 {
        if (mbind_get_channel == null) {
            mbind_get_channel = try api.createMethod("InputEventMIDI", "get_channel");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_channel, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getControllerNumber(self: *const Self) !i32 {
        if (mbind_get_controller_number == null) {
            mbind_get_controller_number = try api.createMethod("InputEventMIDI", "get_controller_number");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_controller_number, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getControllerValue(self: *const Self) !i32 {
        if (mbind_get_controller_value == null) {
            mbind_get_controller_value = try api.createMethod("InputEventMIDI", "get_controller_value");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_controller_value, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getInstrument(self: *const Self) !i32 {
        if (mbind_get_instrument == null) {
            mbind_get_instrument = try api.createMethod("InputEventMIDI", "get_instrument");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_instrument, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMessage(self: *const Self) !i32 {
        if (mbind_get_message == null) {
            mbind_get_message = try api.createMethod("InputEventMIDI", "get_message");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_message, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPitch(self: *const Self) !i32 {
        if (mbind_get_pitch == null) {
            mbind_get_pitch = try api.createMethod("InputEventMIDI", "get_pitch");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pitch, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPressure(self: *const Self) !i32 {
        if (mbind_get_pressure == null) {
            mbind_get_pressure = try api.createMethod("InputEventMIDI", "get_pressure");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pressure, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getVelocity(self: *const Self) !i32 {
        if (mbind_get_velocity == null) {
            mbind_get_velocity = try api.createMethod("InputEventMIDI", "get_velocity");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_velocity, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setChannel(self: *const Self, arg_channel: i32) !void {
        if (mbind_set_channel == null) {
            mbind_set_channel = try api.createMethod("InputEventMIDI", "set_channel");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_channel),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_channel, base, cargs, result);
    }

    pub fn setControllerNumber(self: *const Self, arg_controller_number: i32) !void {
        if (mbind_set_controller_number == null) {
            mbind_set_controller_number = try api.createMethod("InputEventMIDI", "set_controller_number");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_controller_number),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_controller_number, base, cargs, result);
    }

    pub fn setControllerValue(self: *const Self, arg_controller_value: i32) !void {
        if (mbind_set_controller_value == null) {
            mbind_set_controller_value = try api.createMethod("InputEventMIDI", "set_controller_value");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_controller_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_controller_value, base, cargs, result);
    }

    pub fn setInstrument(self: *const Self, arg_instrument: i32) !void {
        if (mbind_set_instrument == null) {
            mbind_set_instrument = try api.createMethod("InputEventMIDI", "set_instrument");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_instrument),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_instrument, base, cargs, result);
    }

    pub fn setMessage(self: *const Self, arg_message: i32) !void {
        if (mbind_set_message == null) {
            mbind_set_message = try api.createMethod("InputEventMIDI", "set_message");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_message),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_message, base, cargs, result);
    }

    pub fn setPitch(self: *const Self, arg_pitch: i32) !void {
        if (mbind_set_pitch == null) {
            mbind_set_pitch = try api.createMethod("InputEventMIDI", "set_pitch");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pitch),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pitch, base, cargs, result);
    }

    pub fn setPressure(self: *const Self, arg_pressure: i32) !void {
        if (mbind_set_pressure == null) {
            mbind_set_pressure = try api.createMethod("InputEventMIDI", "set_pressure");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pressure),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pressure, base, cargs, result);
    }

    pub fn setVelocity(self: *const Self, arg_velocity: i32) !void {
        if (mbind_set_velocity == null) {
            mbind_set_velocity = try api.createMethod("InputEventMIDI", "set_velocity");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_velocity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_velocity, base, cargs, result);
    }
};