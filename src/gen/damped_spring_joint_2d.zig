// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Joint2D = @import("joint_2d.zig").Joint2D;

// method bindings
var mbind_get_damping: ?*c_api.godot_method_bind = null;
var mbind_get_length: ?*c_api.godot_method_bind = null;
var mbind_get_rest_length: ?*c_api.godot_method_bind = null;
var mbind_get_stiffness: ?*c_api.godot_method_bind = null;
var mbind_set_damping: ?*c_api.godot_method_bind = null;
var mbind_set_length: ?*c_api.godot_method_bind = null;
var mbind_set_rest_length: ?*c_api.godot_method_bind = null;
var mbind_set_stiffness: ?*c_api.godot_method_bind = null;
var mbind_damped_spring_joint_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const DampedSpringJoint2D = struct {
    const Self = @This();
    const BaseClass = Joint2D;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_damped_spring_joint_2d_constructor == null) {
            mbind_damped_spring_joint_2d_constructor = try api.createConstructor("DampedSpringJoint2D");
        }
        return api.createObject(Self, mbind_damped_spring_joint_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getDamping(self: *const Self) !f32 {
        if (mbind_get_damping == null) {
            mbind_get_damping = try api.createMethod("DampedSpringJoint2D", "get_damping");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_damping, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getLength(self: *const Self) !f32 {
        if (mbind_get_length == null) {
            mbind_get_length = try api.createMethod("DampedSpringJoint2D", "get_length");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_length, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRestLength(self: *const Self) !f32 {
        if (mbind_get_rest_length == null) {
            mbind_get_rest_length = try api.createMethod("DampedSpringJoint2D", "get_rest_length");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rest_length, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getStiffness(self: *const Self) !f32 {
        if (mbind_get_stiffness == null) {
            mbind_get_stiffness = try api.createMethod("DampedSpringJoint2D", "get_stiffness");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_stiffness, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn setDamping(self: *const Self, arg_damping: f32) !void {
        if (mbind_set_damping == null) {
            mbind_set_damping = try api.createMethod("DampedSpringJoint2D", "set_damping");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_damping),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_damping, base, cargs, result);
    }

    pub fn setLength(self: *const Self, arg_length: f32) !void {
        if (mbind_set_length == null) {
            mbind_set_length = try api.createMethod("DampedSpringJoint2D", "set_length");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_length, base, cargs, result);
    }

    pub fn setRestLength(self: *const Self, arg_rest_length: f32) !void {
        if (mbind_set_rest_length == null) {
            mbind_set_rest_length = try api.createMethod("DampedSpringJoint2D", "set_rest_length");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_rest_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rest_length, base, cargs, result);
    }

    pub fn setStiffness(self: *const Self, arg_stiffness: f32) !void {
        if (mbind_set_stiffness == null) {
            mbind_set_stiffness = try api.createMethod("DampedSpringJoint2D", "set_stiffness");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_stiffness),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_stiffness, base, cargs, result);
    }
};