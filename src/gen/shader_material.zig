// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_shader: ?*c_api.godot_method_bind = null;
var mbind_get_shader_param: ?*c_api.godot_method_bind = null;
var mbind_property_can_revert: ?*c_api.godot_method_bind = null;
var mbind_property_get_revert: ?*c_api.godot_method_bind = null;
var mbind_set_shader: ?*c_api.godot_method_bind = null;
var mbind_set_shader_param: ?*c_api.godot_method_bind = null;
var mbind_shader_material_constructor: ?fn () ?*c_api.godot_object = null;

pub const ShaderMaterial = struct {
    const Self = @This();
    pub const BaseClass = godot.Material;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_shader_material_constructor == null) {
            mbind_shader_material_constructor = try api.createConstructor("ShaderMaterial");
        }
        return api.createObject(Self, mbind_shader_material_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getShader(self: *const Self) !godot.Shader {
        if (mbind_get_shader == null) {
            mbind_get_shader = try api.createMethod("ShaderMaterial", "get_shader");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shader, base, cargs, result);
        return @ptrCast(*godot.Shader, @alignCast(@alignOf(&godot.Shader), result)).*;
    }

    pub fn getShaderParam(self: *const Self, arg_param: *const godot.String) !godot.Variant {
        if (mbind_get_shader_param == null) {
            mbind_get_shader_param = try api.createMethod("ShaderMaterial", "get_shader_param");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_param),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shader_param, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn propertyCanRevert(self: *const Self, arg_name: *const godot.String) !bool {
        if (mbind_property_can_revert == null) {
            mbind_property_can_revert = try api.createMethod("ShaderMaterial", "property_can_revert");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_property_can_revert, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn propertyGetRevert(self: *const Self, arg_name: *const godot.String) !godot.Variant {
        if (mbind_property_get_revert == null) {
            mbind_property_get_revert = try api.createMethod("ShaderMaterial", "property_get_revert");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_property_get_revert, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn setShader(self: *const Self, arg_shader: *const godot.Shader) !void {
        if (mbind_set_shader == null) {
            mbind_set_shader = try api.createMethod("ShaderMaterial", "set_shader");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_shader),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shader, base, cargs, result);
    }

    pub fn setShaderParam(self: *const Self, arg_param: *const godot.String, arg_value: *const godot.Variant) !void {
        if (mbind_set_shader_param == null) {
            mbind_set_shader_param = try api.createMethod("ShaderMaterial", "set_shader_param");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_param),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shader_param, base, cargs, result);
    }
};