// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Light = @import("light.zig").Light;

// method bindings
var mbind_get_shadow_detail: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_mode: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_detail: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_mode: ?*c_api.godot_method_bind = null;
var mbind_omni_light_constructor: ?fn () ?*c_api.godot_object = null;

pub const OmniLight = struct {
    const Self = @This();
    const BaseClass = Light;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_omni_light_constructor == null) {
            mbind_omni_light_constructor = try api.createConstructor("OmniLight");
        }
        return api.createObject(Self, mbind_omni_light_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getShadowDetail(self: *const Self) !i32 {
        if (mbind_get_shadow_detail == null) {
            mbind_get_shadow_detail = try api.createMethod("OmniLight", "get_shadow_detail");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_detail, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getShadowMode(self: *const Self) !i32 {
        if (mbind_get_shadow_mode == null) {
            mbind_get_shadow_mode = try api.createMethod("OmniLight", "get_shadow_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setShadowDetail(self: *const Self, arg_detail: i32) !void {
        if (mbind_set_shadow_detail == null) {
            mbind_set_shadow_detail = try api.createMethod("OmniLight", "set_shadow_detail");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_detail),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_detail, base, cargs, result);
    }

    pub fn setShadowMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_shadow_mode == null) {
            mbind_set_shadow_mode = try api.createMethod("OmniLight", "set_shadow_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_mode, base, cargs, result);
    }
};