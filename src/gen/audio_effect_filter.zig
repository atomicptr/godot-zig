// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_cutoff: ?*c_api.godot_method_bind = null;
var mbind_get_db: ?*c_api.godot_method_bind = null;
var mbind_get_gain: ?*c_api.godot_method_bind = null;
var mbind_get_resonance: ?*c_api.godot_method_bind = null;
var mbind_set_cutoff: ?*c_api.godot_method_bind = null;
var mbind_set_db: ?*c_api.godot_method_bind = null;
var mbind_set_gain: ?*c_api.godot_method_bind = null;
var mbind_set_resonance: ?*c_api.godot_method_bind = null;
var mbind_audio_effect_filter_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioEffectFilter = struct {
    const Self = @This();
    pub const BaseClass = godot.AudioEffect;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_effect_filter_constructor == null) {
            mbind_audio_effect_filter_constructor = try api.createConstructor("AudioEffectFilter");
        }
        return api.createObject(Self, mbind_audio_effect_filter_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getCutoff(self: *const Self) !f32 {
        if (mbind_get_cutoff == null) {
            mbind_get_cutoff = try api.createMethod("AudioEffectFilter", "get_cutoff");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_cutoff, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDb(self: *const Self) !i32 {
        if (mbind_get_db == null) {
            mbind_get_db = try api.createMethod("AudioEffectFilter", "get_db");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_db, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getGain(self: *const Self) !f32 {
        if (mbind_get_gain == null) {
            mbind_get_gain = try api.createMethod("AudioEffectFilter", "get_gain");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_gain, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getResonance(self: *const Self) !f32 {
        if (mbind_get_resonance == null) {
            mbind_get_resonance = try api.createMethod("AudioEffectFilter", "get_resonance");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_resonance, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn setCutoff(self: *const Self, arg_freq: f32) !void {
        if (mbind_set_cutoff == null) {
            mbind_set_cutoff = try api.createMethod("AudioEffectFilter", "set_cutoff");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_freq),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_cutoff, base, cargs, result);
    }

    pub fn setDb(self: *const Self, arg_amount: i32) !void {
        if (mbind_set_db == null) {
            mbind_set_db = try api.createMethod("AudioEffectFilter", "set_db");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_db, base, cargs, result);
    }

    pub fn setGain(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_gain == null) {
            mbind_set_gain = try api.createMethod("AudioEffectFilter", "set_gain");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_gain, base, cargs, result);
    }

    pub fn setResonance(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_resonance == null) {
            mbind_set_resonance = try api.createMethod("AudioEffectFilter", "set_resonance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_resonance, base, cargs, result);
    }
};