// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node = @import("node.zig").Node;

// method bindings
var mbind_get_file_type: ?*c_api.godot_method_bind = null;
var mbind_get_filesystem: ?*c_api.godot_method_bind = null;
var mbind_get_filesystem_path: ?*c_api.godot_method_bind = null;
var mbind_get_scanning_progress: ?*c_api.godot_method_bind = null;
var mbind_is_scanning: ?*c_api.godot_method_bind = null;
var mbind_scan: ?*c_api.godot_method_bind = null;
var mbind_scan_sources: ?*c_api.godot_method_bind = null;
var mbind_update_file: ?*c_api.godot_method_bind = null;
var mbind_update_script_classes: ?*c_api.godot_method_bind = null;
var mbind_editor_file_system_constructor: ?fn () ?*c_api.godot_object = null;

pub const EditorFileSystem = struct {
    const Self = @This();
    const BaseClass = Node;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_editor_file_system_constructor == null) {
            mbind_editor_file_system_constructor = try api.createConstructor("EditorFileSystem");
        }
        return api.createObject(Self, mbind_editor_file_system_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getFileType(self: *const Self, arg_path: *const godot.String) !godot.String {
        if (mbind_get_file_type == null) {
            mbind_get_file_type = try api.createMethod("EditorFileSystem", "get_file_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_file_type, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getFilesystem(self: *const Self) !godot.EditorFileSystemDirectory {
        if (mbind_get_filesystem == null) {
            mbind_get_filesystem = try api.createMethod("EditorFileSystem", "get_filesystem");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_filesystem, base, cargs, result);
        return @ptrCast(*godot.EditorFileSystemDirectory, @alignCast(@alignOf(&godot.EditorFileSystemDirectory), result)).*;
    }

    pub fn getFilesystemPath(self: *const Self, arg_path: *const godot.String) !godot.EditorFileSystemDirectory {
        if (mbind_get_filesystem_path == null) {
            mbind_get_filesystem_path = try api.createMethod("EditorFileSystem", "get_filesystem_path");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_filesystem_path, base, cargs, result);
        return @ptrCast(*godot.EditorFileSystemDirectory, @alignCast(@alignOf(&godot.EditorFileSystemDirectory), result)).*;
    }

    pub fn getScanningProgress(self: *const Self) !f32 {
        if (mbind_get_scanning_progress == null) {
            mbind_get_scanning_progress = try api.createMethod("EditorFileSystem", "get_scanning_progress");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_scanning_progress, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn isScanning(self: *const Self) !bool {
        if (mbind_is_scanning == null) {
            mbind_is_scanning = try api.createMethod("EditorFileSystem", "is_scanning");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_scanning, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn scan(self: *const Self) !void {
        if (mbind_scan == null) {
            mbind_scan = try api.createMethod("EditorFileSystem", "scan");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_scan, base, cargs, result);
    }

    pub fn scanSources(self: *const Self) !void {
        if (mbind_scan_sources == null) {
            mbind_scan_sources = try api.createMethod("EditorFileSystem", "scan_sources");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_scan_sources, base, cargs, result);
    }

    pub fn updateFile(self: *const Self, arg_path: *const godot.String) !void {
        if (mbind_update_file == null) {
            mbind_update_file = try api.createMethod("EditorFileSystem", "update_file");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_update_file, base, cargs, result);
    }

    pub fn updateScriptClasses(self: *const Self) !void {
        if (mbind_update_script_classes == null) {
            mbind_update_script_classes = try api.createMethod("EditorFileSystem", "update_script_classes");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_update_script_classes, base, cargs, result);
    }
};