// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_resource: ?*c_api.godot_method_bind = null;
var mbind_get_stage: ?*c_api.godot_method_bind = null;
var mbind_get_stage_count: ?*c_api.godot_method_bind = null;
var mbind_poll: ?*c_api.godot_method_bind = null;
var mbind_wait: ?*c_api.godot_method_bind = null;
var mbind_resource_interactive_loader_constructor: ?fn () ?*c_api.godot_object = null;

pub const ResourceInteractiveLoader = struct {
    const Self = @This();
    pub const BaseClass = godot.Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_resource_interactive_loader_constructor == null) {
            mbind_resource_interactive_loader_constructor = try api.createConstructor("ResourceInteractiveLoader");
        }
        return api.createObject(Self, mbind_resource_interactive_loader_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getResource(self: *const Self) !godot.Resource {
        if (mbind_get_resource == null) {
            mbind_get_resource = try api.createMethod("ResourceInteractiveLoader", "get_resource");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_resource, base, cargs, result);
        return @ptrCast(*godot.Resource, @alignCast(@alignOf(&godot.Resource), result)).*;
    }

    pub fn getStage(self: *const Self) !i32 {
        if (mbind_get_stage == null) {
            mbind_get_stage = try api.createMethod("ResourceInteractiveLoader", "get_stage");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_stage, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getStageCount(self: *const Self) !i32 {
        if (mbind_get_stage_count == null) {
            mbind_get_stage_count = try api.createMethod("ResourceInteractiveLoader", "get_stage_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_stage_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn poll(self: *const Self) !i32 {
        if (mbind_poll == null) {
            mbind_poll = try api.createMethod("ResourceInteractiveLoader", "poll");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_poll, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn wait(self: *const Self) !i32 {
        if (mbind_wait == null) {
            mbind_wait = try api.createMethod("ResourceInteractiveLoader", "wait");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_wait, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }
};