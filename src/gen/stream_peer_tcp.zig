// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_connect_to_host: ?*c_api.godot_method_bind = null;
var mbind_disconnect_from_host: ?*c_api.godot_method_bind = null;
var mbind_get_connected_host: ?*c_api.godot_method_bind = null;
var mbind_get_connected_port: ?*c_api.godot_method_bind = null;
var mbind_get_status: ?*c_api.godot_method_bind = null;
var mbind_is_connected_to_host: ?*c_api.godot_method_bind = null;
var mbind_set_no_delay: ?*c_api.godot_method_bind = null;
var mbind_stream_peer_tcp_constructor: ?fn () ?*c_api.godot_object = null;

pub const StreamPeerTCP = struct {
    const Self = @This();
    pub const BaseClass = godot.StreamPeer;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_stream_peer_tcp_constructor == null) {
            mbind_stream_peer_tcp_constructor = try api.createConstructor("StreamPeerTCP");
        }
        return api.createObject(Self, mbind_stream_peer_tcp_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn connectToHost(self: *const Self, arg_host: *const godot.String, arg_port: i32) !i32 {
        if (mbind_connect_to_host == null) {
            mbind_connect_to_host = try api.createMethod("StreamPeerTCP", "connect_to_host");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_host),
            @ptrCast(*const anyopaque, *arg_port),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_connect_to_host, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn disconnectFromHost(self: *const Self) !void {
        if (mbind_disconnect_from_host == null) {
            mbind_disconnect_from_host = try api.createMethod("StreamPeerTCP", "disconnect_from_host");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_disconnect_from_host, base, cargs, result);
    }

    pub fn getConnectedHost(self: *const Self) !godot.String {
        if (mbind_get_connected_host == null) {
            mbind_get_connected_host = try api.createMethod("StreamPeerTCP", "get_connected_host");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connected_host, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getConnectedPort(self: *const Self) !i32 {
        if (mbind_get_connected_port == null) {
            mbind_get_connected_port = try api.createMethod("StreamPeerTCP", "get_connected_port");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connected_port, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getStatus(self: *const Self) !i32 {
        if (mbind_get_status == null) {
            mbind_get_status = try api.createMethod("StreamPeerTCP", "get_status");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_status, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isConnectedToHost(self: *const Self) !bool {
        if (mbind_is_connected_to_host == null) {
            mbind_is_connected_to_host = try api.createMethod("StreamPeerTCP", "is_connected_to_host");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_connected_to_host, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setNoDelay(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_no_delay == null) {
            mbind_set_no_delay = try api.createMethod("StreamPeerTCP", "set_no_delay");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_no_delay, base, cargs, result);
    }
};