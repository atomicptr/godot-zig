// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Camera = @import("camera.zig").Camera;

// method bindings
var mbind_get_speed: ?*c_api.godot_method_bind = null;
var mbind_get_target_path: ?*c_api.godot_method_bind = null;
var mbind_is_interpolation_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_interpolation_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_speed: ?*c_api.godot_method_bind = null;
var mbind_set_target: ?*c_api.godot_method_bind = null;
var mbind_set_target_path: ?*c_api.godot_method_bind = null;
var mbind_interpolated_camera_constructor: ?fn () ?*c_api.godot_object = null;

pub const InterpolatedCamera = struct {
    const Self = @This();
    const BaseClass = Camera;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_interpolated_camera_constructor == null) {
            mbind_interpolated_camera_constructor = try api.createConstructor("InterpolatedCamera");
        }
        return api.createObject(Self, mbind_interpolated_camera_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getSpeed(self: *const Self) !f32 {
        if (mbind_get_speed == null) {
            mbind_get_speed = try api.createMethod("InterpolatedCamera", "get_speed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_speed, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTargetPath(self: *const Self) !godot.NodePath {
        if (mbind_get_target_path == null) {
            mbind_get_target_path = try api.createMethod("InterpolatedCamera", "get_target_path");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_target_path, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn isInterpolationEnabled(self: *const Self) !bool {
        if (mbind_is_interpolation_enabled == null) {
            mbind_is_interpolation_enabled = try api.createMethod("InterpolatedCamera", "is_interpolation_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_interpolation_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setInterpolationEnabled(self: *const Self, arg_target_path: bool) !void {
        if (mbind_set_interpolation_enabled == null) {
            mbind_set_interpolation_enabled = try api.createMethod("InterpolatedCamera", "set_interpolation_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_target_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_interpolation_enabled, base, cargs, result);
    }

    pub fn setSpeed(self: *const Self, arg_speed: f32) !void {
        if (mbind_set_speed == null) {
            mbind_set_speed = try api.createMethod("InterpolatedCamera", "set_speed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_speed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_speed, base, cargs, result);
    }

    pub fn setTarget(self: *const Self, arg_target: *const godot.Object) !void {
        if (mbind_set_target == null) {
            mbind_set_target = try api.createMethod("InterpolatedCamera", "set_target");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_target),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_target, base, cargs, result);
    }

    pub fn setTargetPath(self: *const Self, arg_target_path: *const godot.NodePath) !void {
        if (mbind_set_target_path == null) {
            mbind_set_target_path = try api.createMethod("InterpolatedCamera", "set_target_path");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_target_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_target_path, base, cargs, result);
    }
};