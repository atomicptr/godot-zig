// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const PacketPeer = @import("packet_peer.zig").PacketPeer;

// method bindings
var mbind_close: ?*c_api.godot_method_bind = null;
var mbind_connect_to_host: ?*c_api.godot_method_bind = null;
var mbind_get_packet_ip: ?*c_api.godot_method_bind = null;
var mbind_get_packet_port: ?*c_api.godot_method_bind = null;
var mbind_is_connected_to_host: ?*c_api.godot_method_bind = null;
var mbind_is_listening: ?*c_api.godot_method_bind = null;
var mbind_join_multicast_group: ?*c_api.godot_method_bind = null;
var mbind_leave_multicast_group: ?*c_api.godot_method_bind = null;
var mbind_listen: ?*c_api.godot_method_bind = null;
var mbind_set_broadcast_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_dest_address: ?*c_api.godot_method_bind = null;
var mbind_wait: ?*c_api.godot_method_bind = null;
var mbind_packet_peer_udp_constructor: ?fn () ?*c_api.godot_object = null;

pub const PacketPeerUDP = struct {
    const Self = @This();
    const BaseClass = PacketPeer;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_packet_peer_udp_constructor == null) {
            mbind_packet_peer_udp_constructor = try api.createConstructor("PacketPeerUDP");
        }
        return api.createObject(Self, mbind_packet_peer_udp_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn close(self: *const Self) !void {
        if (mbind_close == null) {
            mbind_close = try api.createMethod("PacketPeerUDP", "close");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_close, base, cargs, result);
    }

    pub fn connectToHost(self: *const Self, arg_host: *const godot.String, arg_port: i32) !i32 {
        if (mbind_connect_to_host == null) {
            mbind_connect_to_host = try api.createMethod("PacketPeerUDP", "connect_to_host");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_host),
            @ptrCast(*const anyopaque, *arg_port),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_connect_to_host, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPacketIp(self: *const Self) !godot.String {
        if (mbind_get_packet_ip == null) {
            mbind_get_packet_ip = try api.createMethod("PacketPeerUDP", "get_packet_ip");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_packet_ip, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getPacketPort(self: *const Self) !i32 {
        if (mbind_get_packet_port == null) {
            mbind_get_packet_port = try api.createMethod("PacketPeerUDP", "get_packet_port");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_packet_port, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isConnectedToHost(self: *const Self) !bool {
        if (mbind_is_connected_to_host == null) {
            mbind_is_connected_to_host = try api.createMethod("PacketPeerUDP", "is_connected_to_host");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_connected_to_host, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isListening(self: *const Self) !bool {
        if (mbind_is_listening == null) {
            mbind_is_listening = try api.createMethod("PacketPeerUDP", "is_listening");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_listening, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn joinMulticastGroup(self: *const Self, arg_multicast_address: *const godot.String, arg_interface_name: *const godot.String) !i32 {
        if (mbind_join_multicast_group == null) {
            mbind_join_multicast_group = try api.createMethod("PacketPeerUDP", "join_multicast_group");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_multicast_address),
            @ptrCast(*const anyopaque, arg_interface_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_join_multicast_group, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn leaveMulticastGroup(self: *const Self, arg_multicast_address: *const godot.String, arg_interface_name: *const godot.String) !i32 {
        if (mbind_leave_multicast_group == null) {
            mbind_leave_multicast_group = try api.createMethod("PacketPeerUDP", "leave_multicast_group");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_multicast_address),
            @ptrCast(*const anyopaque, arg_interface_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_leave_multicast_group, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn listen(self: *const Self, arg_port: i32, arg_bind_address: *const godot.String, arg_recv_buf_size: i32) !i32 {
        if (mbind_listen == null) {
            mbind_listen = try api.createMethod("PacketPeerUDP", "listen");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_port),
            @ptrCast(*const anyopaque, arg_bind_address),
            @ptrCast(*const anyopaque, *arg_recv_buf_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_listen, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setBroadcastEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_broadcast_enabled == null) {
            mbind_set_broadcast_enabled = try api.createMethod("PacketPeerUDP", "set_broadcast_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_broadcast_enabled, base, cargs, result);
    }

    pub fn setDestAddress(self: *const Self, arg_host: *const godot.String, arg_port: i32) !i32 {
        if (mbind_set_dest_address == null) {
            mbind_set_dest_address = try api.createMethod("PacketPeerUDP", "set_dest_address");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_host),
            @ptrCast(*const anyopaque, *arg_port),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dest_address, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn wait(self: *const Self) !i32 {
        if (mbind_wait == null) {
            mbind_wait = try api.createMethod("PacketPeerUDP", "wait");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_wait, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }
};