// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Object = @import("object.zig").Object;

// method bindings
var mbind_add_translation: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_get_loaded_locales: ?*c_api.godot_method_bind = null;
var mbind_get_locale: ?*c_api.godot_method_bind = null;
var mbind_get_locale_name: ?*c_api.godot_method_bind = null;
var mbind_remove_translation: ?*c_api.godot_method_bind = null;
var mbind_set_locale: ?*c_api.godot_method_bind = null;
var mbind_translate: ?*c_api.godot_method_bind = null;
var mbind_translation_server_constructor: ?fn () ?*c_api.godot_object = null;

pub const TranslationServer = struct {
    const Self = @This();
    const BaseClass = Object;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_translation_server_constructor == null) {
            mbind_translation_server_constructor = try api.createConstructor("TranslationServer");
        }
        return api.createObject(Self, mbind_translation_server_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addTranslation(self: *const Self, arg_translation: *const godot.Translation) !void {
        if (mbind_add_translation == null) {
            mbind_add_translation = try api.createMethod("TranslationServer", "add_translation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_translation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_translation, base, cargs, result);
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("TranslationServer", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn getLoadedLocales(self: *const Self) !godot.Array {
        if (mbind_get_loaded_locales == null) {
            mbind_get_loaded_locales = try api.createMethod("TranslationServer", "get_loaded_locales");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_loaded_locales, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getLocale(self: *const Self) !godot.String {
        if (mbind_get_locale == null) {
            mbind_get_locale = try api.createMethod("TranslationServer", "get_locale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_locale, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getLocaleName(self: *const Self, arg_locale: *const godot.String) !godot.String {
        if (mbind_get_locale_name == null) {
            mbind_get_locale_name = try api.createMethod("TranslationServer", "get_locale_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_locale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_locale_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn removeTranslation(self: *const Self, arg_translation: *const godot.Translation) !void {
        if (mbind_remove_translation == null) {
            mbind_remove_translation = try api.createMethod("TranslationServer", "remove_translation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_translation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_translation, base, cargs, result);
    }

    pub fn setLocale(self: *const Self, arg_locale: *const godot.String) !void {
        if (mbind_set_locale == null) {
            mbind_set_locale = try api.createMethod("TranslationServer", "set_locale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_locale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_locale, base, cargs, result);
    }

    pub fn translate(self: *const Self, arg_message: *const godot.String) !godot.String {
        if (mbind_translate == null) {
            mbind_translate = try api.createMethod("TranslationServer", "translate");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_message),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_translate, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }
};