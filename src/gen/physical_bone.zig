// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const PhysicsBody = @import("physics_body.zig").PhysicsBody;

// method bindings
var mbind_apply_central_impulse: ?*c_api.godot_method_bind = null;
var mbind_apply_impulse: ?*c_api.godot_method_bind = null;
var mbind_get_body_offset: ?*c_api.godot_method_bind = null;
var mbind_get_bone_id: ?*c_api.godot_method_bind = null;
var mbind_get_bounce: ?*c_api.godot_method_bind = null;
var mbind_get_friction: ?*c_api.godot_method_bind = null;
var mbind_get_gravity_scale: ?*c_api.godot_method_bind = null;
var mbind_get_joint_offset: ?*c_api.godot_method_bind = null;
var mbind_get_joint_type: ?*c_api.godot_method_bind = null;
var mbind_get_mass: ?*c_api.godot_method_bind = null;
var mbind_get_simulate_physics: ?*c_api.godot_method_bind = null;
var mbind_get_weight: ?*c_api.godot_method_bind = null;
var mbind_is_simulating_physics: ?*c_api.godot_method_bind = null;
var mbind_is_static_body: ?*c_api.godot_method_bind = null;
var mbind_set_body_offset: ?*c_api.godot_method_bind = null;
var mbind_set_bounce: ?*c_api.godot_method_bind = null;
var mbind_set_friction: ?*c_api.godot_method_bind = null;
var mbind_set_gravity_scale: ?*c_api.godot_method_bind = null;
var mbind_set_joint_offset: ?*c_api.godot_method_bind = null;
var mbind_set_joint_type: ?*c_api.godot_method_bind = null;
var mbind_set_mass: ?*c_api.godot_method_bind = null;
var mbind_set_weight: ?*c_api.godot_method_bind = null;
var mbind_physical_bone_constructor: ?fn () ?*c_api.godot_object = null;

pub const PhysicalBone = struct {
    const Self = @This();
    const BaseClass = PhysicsBody;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_physical_bone_constructor == null) {
            mbind_physical_bone_constructor = try api.createConstructor("PhysicalBone");
        }
        return api.createObject(Self, mbind_physical_bone_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn applyCentralImpulse(self: *const Self, arg_impulse: *const godot.Vector3) !void {
        if (mbind_apply_central_impulse == null) {
            mbind_apply_central_impulse = try api.createMethod("PhysicalBone", "apply_central_impulse");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_impulse),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_apply_central_impulse, base, cargs, result);
    }

    pub fn applyImpulse(self: *const Self, arg_position: *const godot.Vector3, arg_impulse: *const godot.Vector3) !void {
        if (mbind_apply_impulse == null) {
            mbind_apply_impulse = try api.createMethod("PhysicalBone", "apply_impulse");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
            @ptrCast(*const anyopaque, arg_impulse),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_apply_impulse, base, cargs, result);
    }

    pub fn getBodyOffset(self: *const Self) !godot.Transform {
        if (mbind_get_body_offset == null) {
            mbind_get_body_offset = try api.createMethod("PhysicalBone", "get_body_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_body_offset, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getBoneId(self: *const Self) !i32 {
        if (mbind_get_bone_id == null) {
            mbind_get_bone_id = try api.createMethod("PhysicalBone", "get_bone_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBounce(self: *const Self) !f32 {
        if (mbind_get_bounce == null) {
            mbind_get_bounce = try api.createMethod("PhysicalBone", "get_bounce");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bounce, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFriction(self: *const Self) !f32 {
        if (mbind_get_friction == null) {
            mbind_get_friction = try api.createMethod("PhysicalBone", "get_friction");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_friction, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGravityScale(self: *const Self) !f32 {
        if (mbind_get_gravity_scale == null) {
            mbind_get_gravity_scale = try api.createMethod("PhysicalBone", "get_gravity_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_gravity_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getJointOffset(self: *const Self) !godot.Transform {
        if (mbind_get_joint_offset == null) {
            mbind_get_joint_offset = try api.createMethod("PhysicalBone", "get_joint_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joint_offset, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getJointType(self: *const Self) !i32 {
        if (mbind_get_joint_type == null) {
            mbind_get_joint_type = try api.createMethod("PhysicalBone", "get_joint_type");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joint_type, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMass(self: *const Self) !f32 {
        if (mbind_get_mass == null) {
            mbind_get_mass = try api.createMethod("PhysicalBone", "get_mass");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mass, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSimulatePhysics(self: *const Self) !bool {
        if (mbind_get_simulate_physics == null) {
            mbind_get_simulate_physics = try api.createMethod("PhysicalBone", "get_simulate_physics");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_simulate_physics, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getWeight(self: *const Self) !f32 {
        if (mbind_get_weight == null) {
            mbind_get_weight = try api.createMethod("PhysicalBone", "get_weight");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_weight, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn isSimulatingPhysics(self: *const Self) !bool {
        if (mbind_is_simulating_physics == null) {
            mbind_is_simulating_physics = try api.createMethod("PhysicalBone", "is_simulating_physics");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_simulating_physics, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isStaticBody(self: *const Self) !bool {
        if (mbind_is_static_body == null) {
            mbind_is_static_body = try api.createMethod("PhysicalBone", "is_static_body");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_static_body, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setBodyOffset(self: *const Self, arg_offset: *const godot.Transform) !void {
        if (mbind_set_body_offset == null) {
            mbind_set_body_offset = try api.createMethod("PhysicalBone", "set_body_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_body_offset, base, cargs, result);
    }

    pub fn setBounce(self: *const Self, arg_bounce: f32) !void {
        if (mbind_set_bounce == null) {
            mbind_set_bounce = try api.createMethod("PhysicalBone", "set_bounce");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bounce),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bounce, base, cargs, result);
    }

    pub fn setFriction(self: *const Self, arg_friction: f32) !void {
        if (mbind_set_friction == null) {
            mbind_set_friction = try api.createMethod("PhysicalBone", "set_friction");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_friction),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_friction, base, cargs, result);
    }

    pub fn setGravityScale(self: *const Self, arg_gravity_scale: f32) !void {
        if (mbind_set_gravity_scale == null) {
            mbind_set_gravity_scale = try api.createMethod("PhysicalBone", "set_gravity_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_gravity_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_gravity_scale, base, cargs, result);
    }

    pub fn setJointOffset(self: *const Self, arg_offset: *const godot.Transform) !void {
        if (mbind_set_joint_offset == null) {
            mbind_set_joint_offset = try api.createMethod("PhysicalBone", "set_joint_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_joint_offset, base, cargs, result);
    }

    pub fn setJointType(self: *const Self, arg_joint_type: i32) !void {
        if (mbind_set_joint_type == null) {
            mbind_set_joint_type = try api.createMethod("PhysicalBone", "set_joint_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_joint_type),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_joint_type, base, cargs, result);
    }

    pub fn setMass(self: *const Self, arg_mass: f32) !void {
        if (mbind_set_mass == null) {
            mbind_set_mass = try api.createMethod("PhysicalBone", "set_mass");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mass),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mass, base, cargs, result);
    }

    pub fn setWeight(self: *const Self, arg_weight: f32) !void {
        if (mbind_set_weight == null) {
            mbind_set_weight = try api.createMethod("PhysicalBone", "set_weight");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_weight),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_weight, base, cargs, result);
    }
};