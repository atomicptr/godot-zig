// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_fft_size: ?*c_api.godot_method_bind = null;
var mbind_get_oversampling: ?*c_api.godot_method_bind = null;
var mbind_get_pitch_scale: ?*c_api.godot_method_bind = null;
var mbind_set_fft_size: ?*c_api.godot_method_bind = null;
var mbind_set_oversampling: ?*c_api.godot_method_bind = null;
var mbind_set_pitch_scale: ?*c_api.godot_method_bind = null;
var mbind_audio_effect_pitch_shift_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioEffectPitchShift = struct {
    const Self = @This();
    pub const BaseClass = godot.AudioEffect;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_effect_pitch_shift_constructor == null) {
            mbind_audio_effect_pitch_shift_constructor = try api.createConstructor("AudioEffectPitchShift");
        }
        return api.createObject(Self, mbind_audio_effect_pitch_shift_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getFftSize(self: *const Self) !i32 {
        if (mbind_get_fft_size == null) {
            mbind_get_fft_size = try api.createMethod("AudioEffectPitchShift", "get_fft_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fft_size, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getOversampling(self: *const Self) !i32 {
        if (mbind_get_oversampling == null) {
            mbind_get_oversampling = try api.createMethod("AudioEffectPitchShift", "get_oversampling");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_oversampling, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPitchScale(self: *const Self) !f32 {
        if (mbind_get_pitch_scale == null) {
            mbind_get_pitch_scale = try api.createMethod("AudioEffectPitchShift", "get_pitch_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pitch_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn setFftSize(self: *const Self, arg_size: i32) !void {
        if (mbind_set_fft_size == null) {
            mbind_set_fft_size = try api.createMethod("AudioEffectPitchShift", "set_fft_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fft_size, base, cargs, result);
    }

    pub fn setOversampling(self: *const Self, arg_amount: i32) !void {
        if (mbind_set_oversampling == null) {
            mbind_set_oversampling = try api.createMethod("AudioEffectPitchShift", "set_oversampling");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_oversampling, base, cargs, result);
    }

    pub fn setPitchScale(self: *const Self, arg_rate: f32) !void {
        if (mbind_set_pitch_scale == null) {
            mbind_set_pitch_scale = try api.createMethod("AudioEffectPitchShift", "set_pitch_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_rate),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pitch_scale, base, cargs, result);
    }
};