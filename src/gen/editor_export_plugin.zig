// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_add_file: ?*c_api.godot_method_bind = null;
var mbind_add_ios_bundle_file: ?*c_api.godot_method_bind = null;
var mbind_add_ios_cpp_code: ?*c_api.godot_method_bind = null;
var mbind_add_ios_embedded_framework: ?*c_api.godot_method_bind = null;
var mbind_add_ios_framework: ?*c_api.godot_method_bind = null;
var mbind_add_ios_linker_flags: ?*c_api.godot_method_bind = null;
var mbind_add_ios_plist_content: ?*c_api.godot_method_bind = null;
var mbind_add_ios_project_static_lib: ?*c_api.godot_method_bind = null;
var mbind_add_shared_object: ?*c_api.godot_method_bind = null;
var mbind_skip: ?*c_api.godot_method_bind = null;
var mbind_editor_export_plugin_constructor: ?fn () ?*c_api.godot_object = null;

pub const EditorExportPlugin = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_editor_export_plugin_constructor == null) {
            mbind_editor_export_plugin_constructor = try api.createConstructor("EditorExportPlugin");
        }
        return api.createObject(Self, mbind_editor_export_plugin_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addFile(self: *const Self, arg_path: *const godot.String, arg_file: *const godot.PoolByteArray, arg_remap: bool) !void {
        if (mbind_add_file == null) {
            mbind_add_file = try api.createMethod("EditorExportPlugin", "add_file");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, arg_file),
            @ptrCast(*const anyopaque, *arg_remap),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_file, base, cargs, result);
    }

    pub fn addIosBundleFile(self: *const Self, arg_path: *const godot.String) !void {
        if (mbind_add_ios_bundle_file == null) {
            mbind_add_ios_bundle_file = try api.createMethod("EditorExportPlugin", "add_ios_bundle_file");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_ios_bundle_file, base, cargs, result);
    }

    pub fn addIosCppCode(self: *const Self, arg_code: *const godot.String) !void {
        if (mbind_add_ios_cpp_code == null) {
            mbind_add_ios_cpp_code = try api.createMethod("EditorExportPlugin", "add_ios_cpp_code");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_code),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_ios_cpp_code, base, cargs, result);
    }

    pub fn addIosEmbeddedFramework(self: *const Self, arg_path: *const godot.String) !void {
        if (mbind_add_ios_embedded_framework == null) {
            mbind_add_ios_embedded_framework = try api.createMethod("EditorExportPlugin", "add_ios_embedded_framework");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_ios_embedded_framework, base, cargs, result);
    }

    pub fn addIosFramework(self: *const Self, arg_path: *const godot.String) !void {
        if (mbind_add_ios_framework == null) {
            mbind_add_ios_framework = try api.createMethod("EditorExportPlugin", "add_ios_framework");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_ios_framework, base, cargs, result);
    }

    pub fn addIosLinkerFlags(self: *const Self, arg_flags: *const godot.String) !void {
        if (mbind_add_ios_linker_flags == null) {
            mbind_add_ios_linker_flags = try api.createMethod("EditorExportPlugin", "add_ios_linker_flags");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_flags),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_ios_linker_flags, base, cargs, result);
    }

    pub fn addIosPlistContent(self: *const Self, arg_plist_content: *const godot.String) !void {
        if (mbind_add_ios_plist_content == null) {
            mbind_add_ios_plist_content = try api.createMethod("EditorExportPlugin", "add_ios_plist_content");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_plist_content),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_ios_plist_content, base, cargs, result);
    }

    pub fn addIosProjectStaticLib(self: *const Self, arg_path: *const godot.String) !void {
        if (mbind_add_ios_project_static_lib == null) {
            mbind_add_ios_project_static_lib = try api.createMethod("EditorExportPlugin", "add_ios_project_static_lib");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_ios_project_static_lib, base, cargs, result);
    }

    pub fn addSharedObject(self: *const Self, arg_path: *const godot.String, arg_tags: *const godot.PoolStringArray) !void {
        if (mbind_add_shared_object == null) {
            mbind_add_shared_object = try api.createMethod("EditorExportPlugin", "add_shared_object");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, arg_tags),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_shared_object, base, cargs, result);
    }

    pub fn skip(self: *const Self) !void {
        if (mbind_skip == null) {
            mbind_skip = try api.createMethod("EditorExportPlugin", "skip");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_skip, base, cargs, result);
    }
};