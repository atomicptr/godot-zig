// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_bake: ?*c_api.godot_method_bind = null;
var mbind_debug_bake: ?*c_api.godot_method_bind = null;
var mbind_get_bias: ?*c_api.godot_method_bind = null;
var mbind_get_dynamic_range: ?*c_api.godot_method_bind = null;
var mbind_get_energy: ?*c_api.godot_method_bind = null;
var mbind_get_extents: ?*c_api.godot_method_bind = null;
var mbind_get_normal_bias: ?*c_api.godot_method_bind = null;
var mbind_get_probe_data: ?*c_api.godot_method_bind = null;
var mbind_get_propagation: ?*c_api.godot_method_bind = null;
var mbind_get_subdiv: ?*c_api.godot_method_bind = null;
var mbind_is_compressed: ?*c_api.godot_method_bind = null;
var mbind_is_interior: ?*c_api.godot_method_bind = null;
var mbind_set_bias: ?*c_api.godot_method_bind = null;
var mbind_set_compress: ?*c_api.godot_method_bind = null;
var mbind_set_dynamic_range: ?*c_api.godot_method_bind = null;
var mbind_set_energy: ?*c_api.godot_method_bind = null;
var mbind_set_extents: ?*c_api.godot_method_bind = null;
var mbind_set_interior: ?*c_api.godot_method_bind = null;
var mbind_set_normal_bias: ?*c_api.godot_method_bind = null;
var mbind_set_probe_data: ?*c_api.godot_method_bind = null;
var mbind_set_propagation: ?*c_api.godot_method_bind = null;
var mbind_set_subdiv: ?*c_api.godot_method_bind = null;
var mbind_giprobe_constructor: ?fn () ?*c_api.godot_object = null;

pub const GIProbe = struct {
    const Self = @This();
    pub const BaseClass = godot.VisualInstance;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_giprobe_constructor == null) {
            mbind_giprobe_constructor = try api.createConstructor("GIProbe");
        }
        return api.createObject(Self, mbind_giprobe_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn bake(self: *const Self, arg_from_node: *const godot.Node, arg_create_visual_debug: bool) !void {
        if (mbind_bake == null) {
            mbind_bake = try api.createMethod("GIProbe", "bake");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_from_node),
            @ptrCast(*const anyopaque, *arg_create_visual_debug),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bake, base, cargs, result);
    }

    pub fn debugBake(self: *const Self) !void {
        if (mbind_debug_bake == null) {
            mbind_debug_bake = try api.createMethod("GIProbe", "debug_bake");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_debug_bake, base, cargs, result);
    }

    pub fn getBias(self: *const Self) !f32 {
        if (mbind_get_bias == null) {
            mbind_get_bias = try api.createMethod("GIProbe", "get_bias");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bias, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDynamicRange(self: *const Self) !i32 {
        if (mbind_get_dynamic_range == null) {
            mbind_get_dynamic_range = try api.createMethod("GIProbe", "get_dynamic_range");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dynamic_range, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getEnergy(self: *const Self) !f32 {
        if (mbind_get_energy == null) {
            mbind_get_energy = try api.createMethod("GIProbe", "get_energy");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_energy, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getExtents(self: *const Self) !godot.Vector3 {
        if (mbind_get_extents == null) {
            mbind_get_extents = try api.createMethod("GIProbe", "get_extents");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_extents, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getNormalBias(self: *const Self) !f32 {
        if (mbind_get_normal_bias == null) {
            mbind_get_normal_bias = try api.createMethod("GIProbe", "get_normal_bias");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_normal_bias, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getProbeData(self: *const Self) !godot.GIProbeData {
        if (mbind_get_probe_data == null) {
            mbind_get_probe_data = try api.createMethod("GIProbe", "get_probe_data");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_probe_data, base, cargs, result);
        return @ptrCast(*godot.GIProbeData, @alignCast(@alignOf(&godot.GIProbeData), result)).*;
    }

    pub fn getPropagation(self: *const Self) !f32 {
        if (mbind_get_propagation == null) {
            mbind_get_propagation = try api.createMethod("GIProbe", "get_propagation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_propagation, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSubdiv(self: *const Self) !i32 {
        if (mbind_get_subdiv == null) {
            mbind_get_subdiv = try api.createMethod("GIProbe", "get_subdiv");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_subdiv, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isCompressed(self: *const Self) !bool {
        if (mbind_is_compressed == null) {
            mbind_is_compressed = try api.createMethod("GIProbe", "is_compressed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_compressed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isInterior(self: *const Self) !bool {
        if (mbind_is_interior == null) {
            mbind_is_interior = try api.createMethod("GIProbe", "is_interior");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_interior, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setBias(self: *const Self, arg_max: f32) !void {
        if (mbind_set_bias == null) {
            mbind_set_bias = try api.createMethod("GIProbe", "set_bias");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_max),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bias, base, cargs, result);
    }

    pub fn setCompress(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_compress == null) {
            mbind_set_compress = try api.createMethod("GIProbe", "set_compress");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_compress, base, cargs, result);
    }

    pub fn setDynamicRange(self: *const Self, arg_max: i32) !void {
        if (mbind_set_dynamic_range == null) {
            mbind_set_dynamic_range = try api.createMethod("GIProbe", "set_dynamic_range");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_max),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dynamic_range, base, cargs, result);
    }

    pub fn setEnergy(self: *const Self, arg_max: f32) !void {
        if (mbind_set_energy == null) {
            mbind_set_energy = try api.createMethod("GIProbe", "set_energy");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_max),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_energy, base, cargs, result);
    }

    pub fn setExtents(self: *const Self, arg_extents: *const godot.Vector3) !void {
        if (mbind_set_extents == null) {
            mbind_set_extents = try api.createMethod("GIProbe", "set_extents");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_extents),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_extents, base, cargs, result);
    }

    pub fn setInterior(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_interior == null) {
            mbind_set_interior = try api.createMethod("GIProbe", "set_interior");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_interior, base, cargs, result);
    }

    pub fn setNormalBias(self: *const Self, arg_max: f32) !void {
        if (mbind_set_normal_bias == null) {
            mbind_set_normal_bias = try api.createMethod("GIProbe", "set_normal_bias");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_max),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_normal_bias, base, cargs, result);
    }

    pub fn setProbeData(self: *const Self, arg_data: *const godot.GIProbeData) !void {
        if (mbind_set_probe_data == null) {
            mbind_set_probe_data = try api.createMethod("GIProbe", "set_probe_data");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_data),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_probe_data, base, cargs, result);
    }

    pub fn setPropagation(self: *const Self, arg_max: f32) !void {
        if (mbind_set_propagation == null) {
            mbind_set_propagation = try api.createMethod("GIProbe", "set_propagation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_max),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_propagation, base, cargs, result);
    }

    pub fn setSubdiv(self: *const Self, arg_subdiv: i32) !void {
        if (mbind_set_subdiv == null) {
            mbind_set_subdiv = try api.createMethod("GIProbe", "set_subdiv");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_subdiv),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_subdiv, base, cargs, result);
    }
};