// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const CullInstance = @import("cull_instance.zig").CullInstance;

// method bindings
var mbind_get_aabb: ?*c_api.godot_method_bind = null;
var mbind_get_base: ?*c_api.godot_method_bind = null;
var mbind_get_instance: ?*c_api.godot_method_bind = null;
var mbind_get_layer_mask: ?*c_api.godot_method_bind = null;
var mbind_get_layer_mask_bit: ?*c_api.godot_method_bind = null;
var mbind_get_transformed_aabb: ?*c_api.godot_method_bind = null;
var mbind_set_base: ?*c_api.godot_method_bind = null;
var mbind_set_layer_mask: ?*c_api.godot_method_bind = null;
var mbind_set_layer_mask_bit: ?*c_api.godot_method_bind = null;
var mbind_visual_instance_constructor: ?fn () ?*c_api.godot_object = null;

pub const VisualInstance = struct {
    const Self = @This();
    const BaseClass = CullInstance;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_visual_instance_constructor == null) {
            mbind_visual_instance_constructor = try api.createConstructor("VisualInstance");
        }
        return api.createObject(Self, mbind_visual_instance_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAabb(self: *const Self) !godot.AABB {
        if (mbind_get_aabb == null) {
            mbind_get_aabb = try api.createMethod("VisualInstance", "get_aabb");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_aabb, base, cargs, result);
        return @ptrCast(*godot.AABB, @alignCast(@alignOf(&godot.AABB), result)).*;
    }

    pub fn getBase(self: *const Self) !godot.RID {
        if (mbind_get_base == null) {
            mbind_get_base = try api.createMethod("VisualInstance", "get_base");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_base, base, cargs, result);
        return @ptrCast(*godot.RID, @alignCast(@alignOf(&godot.RID), result)).*;
    }

    pub fn getInstance(self: *const Self) !godot.RID {
        if (mbind_get_instance == null) {
            mbind_get_instance = try api.createMethod("VisualInstance", "get_instance");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_instance, base, cargs, result);
        return @ptrCast(*godot.RID, @alignCast(@alignOf(&godot.RID), result)).*;
    }

    pub fn getLayerMask(self: *const Self) !i32 {
        if (mbind_get_layer_mask == null) {
            mbind_get_layer_mask = try api.createMethod("VisualInstance", "get_layer_mask");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_layer_mask, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLayerMaskBit(self: *const Self, arg_layer: i32) !bool {
        if (mbind_get_layer_mask_bit == null) {
            mbind_get_layer_mask_bit = try api.createMethod("VisualInstance", "get_layer_mask_bit");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_layer),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_layer_mask_bit, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getTransformedAabb(self: *const Self) !godot.AABB {
        if (mbind_get_transformed_aabb == null) {
            mbind_get_transformed_aabb = try api.createMethod("VisualInstance", "get_transformed_aabb");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_transformed_aabb, base, cargs, result);
        return @ptrCast(*godot.AABB, @alignCast(@alignOf(&godot.AABB), result)).*;
    }

    pub fn setBase(self: *const Self, arg_base: *const godot.RID) !void {
        if (mbind_set_base == null) {
            mbind_set_base = try api.createMethod("VisualInstance", "set_base");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_base),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_base, base, cargs, result);
    }

    pub fn setLayerMask(self: *const Self, arg_mask: i32) !void {
        if (mbind_set_layer_mask == null) {
            mbind_set_layer_mask = try api.createMethod("VisualInstance", "set_layer_mask");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mask),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_layer_mask, base, cargs, result);
    }

    pub fn setLayerMaskBit(self: *const Self, arg_layer: i32, arg_enabled: bool) !void {
        if (mbind_set_layer_mask_bit == null) {
            mbind_set_layer_mask_bit = try api.createMethod("VisualInstance", "set_layer_mask_bit");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_layer),
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_layer_mask_bit, base, cargs, result);
    }
};