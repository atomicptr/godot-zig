// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Range = @import("range.zig").Range;

// method bindings
var mbind_get_ticks: ?*c_api.godot_method_bind = null;
var mbind_get_ticks_on_borders: ?*c_api.godot_method_bind = null;
var mbind_is_editable: ?*c_api.godot_method_bind = null;
var mbind_is_scrollable: ?*c_api.godot_method_bind = null;
var mbind_set_editable: ?*c_api.godot_method_bind = null;
var mbind_set_scrollable: ?*c_api.godot_method_bind = null;
var mbind_set_ticks: ?*c_api.godot_method_bind = null;
var mbind_set_ticks_on_borders: ?*c_api.godot_method_bind = null;
var mbind_slider_constructor: ?fn () ?*c_api.godot_object = null;

pub const Slider = struct {
    const Self = @This();
    const BaseClass = Range;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_slider_constructor == null) {
            mbind_slider_constructor = try api.createConstructor("Slider");
        }
        return api.createObject(Self, mbind_slider_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getTicks(self: *const Self) !i32 {
        if (mbind_get_ticks == null) {
            mbind_get_ticks = try api.createMethod("Slider", "get_ticks");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ticks, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTicksOnBorders(self: *const Self) !bool {
        if (mbind_get_ticks_on_borders == null) {
            mbind_get_ticks_on_borders = try api.createMethod("Slider", "get_ticks_on_borders");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ticks_on_borders, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isEditable(self: *const Self) !bool {
        if (mbind_is_editable == null) {
            mbind_is_editable = try api.createMethod("Slider", "is_editable");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_editable, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isScrollable(self: *const Self) !bool {
        if (mbind_is_scrollable == null) {
            mbind_is_scrollable = try api.createMethod("Slider", "is_scrollable");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_scrollable, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setEditable(self: *const Self, arg_editable: bool) !void {
        if (mbind_set_editable == null) {
            mbind_set_editable = try api.createMethod("Slider", "set_editable");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_editable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_editable, base, cargs, result);
    }

    pub fn setScrollable(self: *const Self, arg_scrollable: bool) !void {
        if (mbind_set_scrollable == null) {
            mbind_set_scrollable = try api.createMethod("Slider", "set_scrollable");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_scrollable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_scrollable, base, cargs, result);
    }

    pub fn setTicks(self: *const Self, arg_count: i32) !void {
        if (mbind_set_ticks == null) {
            mbind_set_ticks = try api.createMethod("Slider", "set_ticks");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_count),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ticks, base, cargs, result);
    }

    pub fn setTicksOnBorders(self: *const Self, arg_ticks_on_border: bool) !void {
        if (mbind_set_ticks_on_borders == null) {
            mbind_set_ticks_on_borders = try api.createMethod("Slider", "set_ticks_on_borders");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_ticks_on_border),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ticks_on_borders, base, cargs, result);
    }
};