// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_get_advance_condition: ?*c_api.godot_method_bind = null;
var mbind_get_priority: ?*c_api.godot_method_bind = null;
var mbind_get_switch_mode: ?*c_api.godot_method_bind = null;
var mbind_get_xfade_time: ?*c_api.godot_method_bind = null;
var mbind_has_auto_advance: ?*c_api.godot_method_bind = null;
var mbind_is_disabled: ?*c_api.godot_method_bind = null;
var mbind_set_advance_condition: ?*c_api.godot_method_bind = null;
var mbind_set_auto_advance: ?*c_api.godot_method_bind = null;
var mbind_set_disabled: ?*c_api.godot_method_bind = null;
var mbind_set_priority: ?*c_api.godot_method_bind = null;
var mbind_set_switch_mode: ?*c_api.godot_method_bind = null;
var mbind_set_xfade_time: ?*c_api.godot_method_bind = null;
var mbind_animation_node_state_machine_transition_constructor: ?fn () ?*c_api.godot_object = null;

pub const AnimationNodeStateMachineTransition = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_animation_node_state_machine_transition_constructor == null) {
            mbind_animation_node_state_machine_transition_constructor = try api.createConstructor("AnimationNodeStateMachineTransition");
        }
        return api.createObject(Self, mbind_animation_node_state_machine_transition_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAdvanceCondition(self: *const Self) !godot.String {
        if (mbind_get_advance_condition == null) {
            mbind_get_advance_condition = try api.createMethod("AnimationNodeStateMachineTransition", "get_advance_condition");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_advance_condition, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getPriority(self: *const Self) !i32 {
        if (mbind_get_priority == null) {
            mbind_get_priority = try api.createMethod("AnimationNodeStateMachineTransition", "get_priority");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_priority, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSwitchMode(self: *const Self) !i32 {
        if (mbind_get_switch_mode == null) {
            mbind_get_switch_mode = try api.createMethod("AnimationNodeStateMachineTransition", "get_switch_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_switch_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getXfadeTime(self: *const Self) !f32 {
        if (mbind_get_xfade_time == null) {
            mbind_get_xfade_time = try api.createMethod("AnimationNodeStateMachineTransition", "get_xfade_time");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_xfade_time, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn hasAutoAdvance(self: *const Self) !bool {
        if (mbind_has_auto_advance == null) {
            mbind_has_auto_advance = try api.createMethod("AnimationNodeStateMachineTransition", "has_auto_advance");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_auto_advance, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isDisabled(self: *const Self) !bool {
        if (mbind_is_disabled == null) {
            mbind_is_disabled = try api.createMethod("AnimationNodeStateMachineTransition", "is_disabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setAdvanceCondition(self: *const Self, arg_name: *const godot.String) !void {
        if (mbind_set_advance_condition == null) {
            mbind_set_advance_condition = try api.createMethod("AnimationNodeStateMachineTransition", "set_advance_condition");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_advance_condition, base, cargs, result);
    }

    pub fn setAutoAdvance(self: *const Self, arg_auto_advance: bool) !void {
        if (mbind_set_auto_advance == null) {
            mbind_set_auto_advance = try api.createMethod("AnimationNodeStateMachineTransition", "set_auto_advance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_auto_advance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_auto_advance, base, cargs, result);
    }

    pub fn setDisabled(self: *const Self, arg_disabled: bool) !void {
        if (mbind_set_disabled == null) {
            mbind_set_disabled = try api.createMethod("AnimationNodeStateMachineTransition", "set_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_disabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disabled, base, cargs, result);
    }

    pub fn setPriority(self: *const Self, arg_priority: i32) !void {
        if (mbind_set_priority == null) {
            mbind_set_priority = try api.createMethod("AnimationNodeStateMachineTransition", "set_priority");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_priority),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_priority, base, cargs, result);
    }

    pub fn setSwitchMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_switch_mode == null) {
            mbind_set_switch_mode = try api.createMethod("AnimationNodeStateMachineTransition", "set_switch_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_switch_mode, base, cargs, result);
    }

    pub fn setXfadeTime(self: *const Self, arg_secs: f32) !void {
        if (mbind_set_xfade_time == null) {
            mbind_set_xfade_time = try api.createMethod("AnimationNodeStateMachineTransition", "set_xfade_time");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_secs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_xfade_time, base, cargs, result);
    }
};