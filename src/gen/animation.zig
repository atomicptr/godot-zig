// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_add_track: ?*c_api.godot_method_bind = null;
var mbind_animation_track_get_key_animation: ?*c_api.godot_method_bind = null;
var mbind_animation_track_insert_key: ?*c_api.godot_method_bind = null;
var mbind_animation_track_set_key_animation: ?*c_api.godot_method_bind = null;
var mbind_audio_track_get_key_end_offset: ?*c_api.godot_method_bind = null;
var mbind_audio_track_get_key_start_offset: ?*c_api.godot_method_bind = null;
var mbind_audio_track_get_key_stream: ?*c_api.godot_method_bind = null;
var mbind_audio_track_insert_key: ?*c_api.godot_method_bind = null;
var mbind_audio_track_set_key_end_offset: ?*c_api.godot_method_bind = null;
var mbind_audio_track_set_key_start_offset: ?*c_api.godot_method_bind = null;
var mbind_audio_track_set_key_stream: ?*c_api.godot_method_bind = null;
var mbind_bezier_track_get_key_in_handle: ?*c_api.godot_method_bind = null;
var mbind_bezier_track_get_key_out_handle: ?*c_api.godot_method_bind = null;
var mbind_bezier_track_get_key_value: ?*c_api.godot_method_bind = null;
var mbind_bezier_track_insert_key: ?*c_api.godot_method_bind = null;
var mbind_bezier_track_interpolate: ?*c_api.godot_method_bind = null;
var mbind_bezier_track_set_key_in_handle: ?*c_api.godot_method_bind = null;
var mbind_bezier_track_set_key_out_handle: ?*c_api.godot_method_bind = null;
var mbind_bezier_track_set_key_value: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_copy_track: ?*c_api.godot_method_bind = null;
var mbind_find_track: ?*c_api.godot_method_bind = null;
var mbind_get_length: ?*c_api.godot_method_bind = null;
var mbind_get_step: ?*c_api.godot_method_bind = null;
var mbind_get_track_count: ?*c_api.godot_method_bind = null;
var mbind_has_loop: ?*c_api.godot_method_bind = null;
var mbind_method_track_get_key_indices: ?*c_api.godot_method_bind = null;
var mbind_method_track_get_name: ?*c_api.godot_method_bind = null;
var mbind_method_track_get_params: ?*c_api.godot_method_bind = null;
var mbind_remove_track: ?*c_api.godot_method_bind = null;
var mbind_set_length: ?*c_api.godot_method_bind = null;
var mbind_set_loop: ?*c_api.godot_method_bind = null;
var mbind_set_step: ?*c_api.godot_method_bind = null;
var mbind_track_find_key: ?*c_api.godot_method_bind = null;
var mbind_track_get_interpolation_loop_wrap: ?*c_api.godot_method_bind = null;
var mbind_track_get_interpolation_type: ?*c_api.godot_method_bind = null;
var mbind_track_get_key_count: ?*c_api.godot_method_bind = null;
var mbind_track_get_key_time: ?*c_api.godot_method_bind = null;
var mbind_track_get_key_transition: ?*c_api.godot_method_bind = null;
var mbind_track_get_key_value: ?*c_api.godot_method_bind = null;
var mbind_track_get_path: ?*c_api.godot_method_bind = null;
var mbind_track_get_type: ?*c_api.godot_method_bind = null;
var mbind_track_insert_key: ?*c_api.godot_method_bind = null;
var mbind_track_is_enabled: ?*c_api.godot_method_bind = null;
var mbind_track_is_imported: ?*c_api.godot_method_bind = null;
var mbind_track_move_down: ?*c_api.godot_method_bind = null;
var mbind_track_move_to: ?*c_api.godot_method_bind = null;
var mbind_track_move_up: ?*c_api.godot_method_bind = null;
var mbind_track_remove_key: ?*c_api.godot_method_bind = null;
var mbind_track_remove_key_at_position: ?*c_api.godot_method_bind = null;
var mbind_track_set_enabled: ?*c_api.godot_method_bind = null;
var mbind_track_set_imported: ?*c_api.godot_method_bind = null;
var mbind_track_set_interpolation_loop_wrap: ?*c_api.godot_method_bind = null;
var mbind_track_set_interpolation_type: ?*c_api.godot_method_bind = null;
var mbind_track_set_key_time: ?*c_api.godot_method_bind = null;
var mbind_track_set_key_transition: ?*c_api.godot_method_bind = null;
var mbind_track_set_key_value: ?*c_api.godot_method_bind = null;
var mbind_track_set_path: ?*c_api.godot_method_bind = null;
var mbind_track_swap: ?*c_api.godot_method_bind = null;
var mbind_transform_track_insert_key: ?*c_api.godot_method_bind = null;
var mbind_transform_track_interpolate: ?*c_api.godot_method_bind = null;
var mbind_value_track_get_key_indices: ?*c_api.godot_method_bind = null;
var mbind_value_track_get_update_mode: ?*c_api.godot_method_bind = null;
var mbind_value_track_interpolate: ?*c_api.godot_method_bind = null;
var mbind_value_track_set_update_mode: ?*c_api.godot_method_bind = null;
var mbind_animation_constructor: ?fn () ?*c_api.godot_object = null;

pub const Animation = struct {
    const Self = @This();
    const BaseClass = Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_animation_constructor == null) {
            mbind_animation_constructor = try api.createConstructor("Animation");
        }
        return api.createObject(Self, mbind_animation_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addTrack(self: *const Self, arg_type: i32, arg_at_position: i32) !i32 {
        if (mbind_add_track == null) {
            mbind_add_track = try api.createMethod("Animation", "add_track");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_type),
            @ptrCast(*const anyopaque, *arg_at_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_track, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn animationTrackGetKeyAnimation(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !godot.String {
        if (mbind_animation_track_get_key_animation == null) {
            mbind_animation_track_get_key_animation = try api.createMethod("Animation", "animation_track_get_key_animation");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_animation_track_get_key_animation, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn animationTrackInsertKey(self: *const Self, arg_track_idx: i32, arg_time: f32, arg_animation: *const godot.String) !i32 {
        if (mbind_animation_track_insert_key == null) {
            mbind_animation_track_insert_key = try api.createMethod("Animation", "animation_track_insert_key");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time),
            @ptrCast(*const anyopaque, arg_animation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_animation_track_insert_key, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn animationTrackSetKeyAnimation(self: *const Self, arg_track_idx: i32, arg_key_idx: i32, arg_animation: *const godot.String) !void {
        if (mbind_animation_track_set_key_animation == null) {
            mbind_animation_track_set_key_animation = try api.createMethod("Animation", "animation_track_set_key_animation");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
            @ptrCast(*const anyopaque, arg_animation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_animation_track_set_key_animation, base, cargs, result);
    }

    pub fn audioTrackGetKeyEndOffset(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !f32 {
        if (mbind_audio_track_get_key_end_offset == null) {
            mbind_audio_track_get_key_end_offset = try api.createMethod("Animation", "audio_track_get_key_end_offset");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_audio_track_get_key_end_offset, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn audioTrackGetKeyStartOffset(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !f32 {
        if (mbind_audio_track_get_key_start_offset == null) {
            mbind_audio_track_get_key_start_offset = try api.createMethod("Animation", "audio_track_get_key_start_offset");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_audio_track_get_key_start_offset, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn audioTrackGetKeyStream(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !godot.Resource {
        if (mbind_audio_track_get_key_stream == null) {
            mbind_audio_track_get_key_stream = try api.createMethod("Animation", "audio_track_get_key_stream");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_audio_track_get_key_stream, base, cargs, result);
        return @ptrCast(*godot.Resource, @alignCast(@alignOf(&godot.Resource), result)).*;
    }

    pub fn audioTrackInsertKey(self: *const Self, arg_track_idx: i32, arg_time: f32, arg_stream: *const godot.Resource, arg_start_offset: f32, arg_end_offset: f32) !i32 {
        if (mbind_audio_track_insert_key == null) {
            mbind_audio_track_insert_key = try api.createMethod("Animation", "audio_track_insert_key");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time),
            @ptrCast(*const anyopaque, arg_stream),
            @ptrCast(*const anyopaque, *arg_start_offset),
            @ptrCast(*const anyopaque, *arg_end_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_audio_track_insert_key, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn audioTrackSetKeyEndOffset(self: *const Self, arg_track_idx: i32, arg_key_idx: i32, arg_offset: f32) !void {
        if (mbind_audio_track_set_key_end_offset == null) {
            mbind_audio_track_set_key_end_offset = try api.createMethod("Animation", "audio_track_set_key_end_offset");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
            @ptrCast(*const anyopaque, *arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_audio_track_set_key_end_offset, base, cargs, result);
    }

    pub fn audioTrackSetKeyStartOffset(self: *const Self, arg_track_idx: i32, arg_key_idx: i32, arg_offset: f32) !void {
        if (mbind_audio_track_set_key_start_offset == null) {
            mbind_audio_track_set_key_start_offset = try api.createMethod("Animation", "audio_track_set_key_start_offset");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
            @ptrCast(*const anyopaque, *arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_audio_track_set_key_start_offset, base, cargs, result);
    }

    pub fn audioTrackSetKeyStream(self: *const Self, arg_track_idx: i32, arg_key_idx: i32, arg_stream: *const godot.Resource) !void {
        if (mbind_audio_track_set_key_stream == null) {
            mbind_audio_track_set_key_stream = try api.createMethod("Animation", "audio_track_set_key_stream");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
            @ptrCast(*const anyopaque, arg_stream),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_audio_track_set_key_stream, base, cargs, result);
    }

    pub fn bezierTrackGetKeyInHandle(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !godot.Vector2 {
        if (mbind_bezier_track_get_key_in_handle == null) {
            mbind_bezier_track_get_key_in_handle = try api.createMethod("Animation", "bezier_track_get_key_in_handle");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bezier_track_get_key_in_handle, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn bezierTrackGetKeyOutHandle(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !godot.Vector2 {
        if (mbind_bezier_track_get_key_out_handle == null) {
            mbind_bezier_track_get_key_out_handle = try api.createMethod("Animation", "bezier_track_get_key_out_handle");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bezier_track_get_key_out_handle, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn bezierTrackGetKeyValue(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !f32 {
        if (mbind_bezier_track_get_key_value == null) {
            mbind_bezier_track_get_key_value = try api.createMethod("Animation", "bezier_track_get_key_value");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bezier_track_get_key_value, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn bezierTrackInsertKey(self: *const Self, arg_track_idx: i32, arg_time: f32, arg_value: f32, arg_in_handle: *const godot.Vector2, arg_out_handle: *const godot.Vector2) !i32 {
        if (mbind_bezier_track_insert_key == null) {
            mbind_bezier_track_insert_key = try api.createMethod("Animation", "bezier_track_insert_key");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time),
            @ptrCast(*const anyopaque, *arg_value),
            @ptrCast(*const anyopaque, arg_in_handle),
            @ptrCast(*const anyopaque, arg_out_handle),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bezier_track_insert_key, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn bezierTrackInterpolate(self: *const Self, arg_track_idx: i32, arg_time: f32) !f32 {
        if (mbind_bezier_track_interpolate == null) {
            mbind_bezier_track_interpolate = try api.createMethod("Animation", "bezier_track_interpolate");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bezier_track_interpolate, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn bezierTrackSetKeyInHandle(self: *const Self, arg_track_idx: i32, arg_key_idx: i32, arg_in_handle: *const godot.Vector2) !void {
        if (mbind_bezier_track_set_key_in_handle == null) {
            mbind_bezier_track_set_key_in_handle = try api.createMethod("Animation", "bezier_track_set_key_in_handle");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
            @ptrCast(*const anyopaque, arg_in_handle),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bezier_track_set_key_in_handle, base, cargs, result);
    }

    pub fn bezierTrackSetKeyOutHandle(self: *const Self, arg_track_idx: i32, arg_key_idx: i32, arg_out_handle: *const godot.Vector2) !void {
        if (mbind_bezier_track_set_key_out_handle == null) {
            mbind_bezier_track_set_key_out_handle = try api.createMethod("Animation", "bezier_track_set_key_out_handle");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
            @ptrCast(*const anyopaque, arg_out_handle),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bezier_track_set_key_out_handle, base, cargs, result);
    }

    pub fn bezierTrackSetKeyValue(self: *const Self, arg_track_idx: i32, arg_key_idx: i32, arg_value: f32) !void {
        if (mbind_bezier_track_set_key_value == null) {
            mbind_bezier_track_set_key_value = try api.createMethod("Animation", "bezier_track_set_key_value");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
            @ptrCast(*const anyopaque, *arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bezier_track_set_key_value, base, cargs, result);
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("Animation", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn copyTrack(self: *const Self, arg_track_idx: i32, arg_to_animation: *const godot.Animation) !void {
        if (mbind_copy_track == null) {
            mbind_copy_track = try api.createMethod("Animation", "copy_track");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, arg_to_animation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_copy_track, base, cargs, result);
    }

    pub fn findTrack(self: *const Self, arg_path: *const godot.NodePath) !i32 {
        if (mbind_find_track == null) {
            mbind_find_track = try api.createMethod("Animation", "find_track");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_find_track, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLength(self: *const Self) !f32 {
        if (mbind_get_length == null) {
            mbind_get_length = try api.createMethod("Animation", "get_length");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_length, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getStep(self: *const Self) !f32 {
        if (mbind_get_step == null) {
            mbind_get_step = try api.createMethod("Animation", "get_step");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_step, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTrackCount(self: *const Self) !i32 {
        if (mbind_get_track_count == null) {
            mbind_get_track_count = try api.createMethod("Animation", "get_track_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_track_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn hasLoop(self: *const Self) !bool {
        if (mbind_has_loop == null) {
            mbind_has_loop = try api.createMethod("Animation", "has_loop");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_loop, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn methodTrackGetKeyIndices(self: *const Self, arg_track_idx: i32, arg_time_sec: f32, arg_delta: f32) !godot.PoolIntArray {
        if (mbind_method_track_get_key_indices == null) {
            mbind_method_track_get_key_indices = try api.createMethod("Animation", "method_track_get_key_indices");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time_sec),
            @ptrCast(*const anyopaque, *arg_delta),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_method_track_get_key_indices, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn methodTrackGetName(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !godot.String {
        if (mbind_method_track_get_name == null) {
            mbind_method_track_get_name = try api.createMethod("Animation", "method_track_get_name");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_method_track_get_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn methodTrackGetParams(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !godot.Array {
        if (mbind_method_track_get_params == null) {
            mbind_method_track_get_params = try api.createMethod("Animation", "method_track_get_params");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_method_track_get_params, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn removeTrack(self: *const Self, arg_track_idx: i32) !void {
        if (mbind_remove_track == null) {
            mbind_remove_track = try api.createMethod("Animation", "remove_track");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_track, base, cargs, result);
    }

    pub fn setLength(self: *const Self, arg_time_sec: f32) !void {
        if (mbind_set_length == null) {
            mbind_set_length = try api.createMethod("Animation", "set_length");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_time_sec),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_length, base, cargs, result);
    }

    pub fn setLoop(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_loop == null) {
            mbind_set_loop = try api.createMethod("Animation", "set_loop");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_loop, base, cargs, result);
    }

    pub fn setStep(self: *const Self, arg_size_sec: f32) !void {
        if (mbind_set_step == null) {
            mbind_set_step = try api.createMethod("Animation", "set_step");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_size_sec),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_step, base, cargs, result);
    }

    pub fn trackFindKey(self: *const Self, arg_track_idx: i32, arg_time: f32, arg_exact: bool) !i32 {
        if (mbind_track_find_key == null) {
            mbind_track_find_key = try api.createMethod("Animation", "track_find_key");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time),
            @ptrCast(*const anyopaque, *arg_exact),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_find_key, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn trackGetInterpolationLoopWrap(self: *const Self, arg_track_idx: i32) !bool {
        if (mbind_track_get_interpolation_loop_wrap == null) {
            mbind_track_get_interpolation_loop_wrap = try api.createMethod("Animation", "track_get_interpolation_loop_wrap");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_get_interpolation_loop_wrap, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn trackGetInterpolationType(self: *const Self, arg_track_idx: i32) !i32 {
        if (mbind_track_get_interpolation_type == null) {
            mbind_track_get_interpolation_type = try api.createMethod("Animation", "track_get_interpolation_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_get_interpolation_type, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn trackGetKeyCount(self: *const Self, arg_track_idx: i32) !i32 {
        if (mbind_track_get_key_count == null) {
            mbind_track_get_key_count = try api.createMethod("Animation", "track_get_key_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_get_key_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn trackGetKeyTime(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !f32 {
        if (mbind_track_get_key_time == null) {
            mbind_track_get_key_time = try api.createMethod("Animation", "track_get_key_time");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_get_key_time, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn trackGetKeyTransition(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !f32 {
        if (mbind_track_get_key_transition == null) {
            mbind_track_get_key_transition = try api.createMethod("Animation", "track_get_key_transition");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_get_key_transition, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn trackGetKeyValue(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !godot.Variant {
        if (mbind_track_get_key_value == null) {
            mbind_track_get_key_value = try api.createMethod("Animation", "track_get_key_value");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_get_key_value, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn trackGetPath(self: *const Self, arg_track_idx: i32) !godot.NodePath {
        if (mbind_track_get_path == null) {
            mbind_track_get_path = try api.createMethod("Animation", "track_get_path");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_get_path, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn trackGetType(self: *const Self, arg_track_idx: i32) !i32 {
        if (mbind_track_get_type == null) {
            mbind_track_get_type = try api.createMethod("Animation", "track_get_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_get_type, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn trackInsertKey(self: *const Self, arg_track_idx: i32, arg_time: f32, arg_key: *const godot.Variant, arg_transition: f32) !void {
        if (mbind_track_insert_key == null) {
            mbind_track_insert_key = try api.createMethod("Animation", "track_insert_key");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time),
            @ptrCast(*const anyopaque, arg_key),
            @ptrCast(*const anyopaque, *arg_transition),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_insert_key, base, cargs, result);
    }

    pub fn trackIsEnabled(self: *const Self, arg_track_idx: i32) !bool {
        if (mbind_track_is_enabled == null) {
            mbind_track_is_enabled = try api.createMethod("Animation", "track_is_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_is_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn trackIsImported(self: *const Self, arg_track_idx: i32) !bool {
        if (mbind_track_is_imported == null) {
            mbind_track_is_imported = try api.createMethod("Animation", "track_is_imported");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_is_imported, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn trackMoveDown(self: *const Self, arg_track_idx: i32) !void {
        if (mbind_track_move_down == null) {
            mbind_track_move_down = try api.createMethod("Animation", "track_move_down");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_move_down, base, cargs, result);
    }

    pub fn trackMoveTo(self: *const Self, arg_track_idx: i32, arg_to_idx: i32) !void {
        if (mbind_track_move_to == null) {
            mbind_track_move_to = try api.createMethod("Animation", "track_move_to");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_to_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_move_to, base, cargs, result);
    }

    pub fn trackMoveUp(self: *const Self, arg_track_idx: i32) !void {
        if (mbind_track_move_up == null) {
            mbind_track_move_up = try api.createMethod("Animation", "track_move_up");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_move_up, base, cargs, result);
    }

    pub fn trackRemoveKey(self: *const Self, arg_track_idx: i32, arg_key_idx: i32) !void {
        if (mbind_track_remove_key == null) {
            mbind_track_remove_key = try api.createMethod("Animation", "track_remove_key");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_remove_key, base, cargs, result);
    }

    pub fn trackRemoveKeyAtPosition(self: *const Self, arg_track_idx: i32, arg_position: f32) !void {
        if (mbind_track_remove_key_at_position == null) {
            mbind_track_remove_key_at_position = try api.createMethod("Animation", "track_remove_key_at_position");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_remove_key_at_position, base, cargs, result);
    }

    pub fn trackSetEnabled(self: *const Self, arg_track_idx: i32, arg_enabled: bool) !void {
        if (mbind_track_set_enabled == null) {
            mbind_track_set_enabled = try api.createMethod("Animation", "track_set_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_set_enabled, base, cargs, result);
    }

    pub fn trackSetImported(self: *const Self, arg_track_idx: i32, arg_imported: bool) !void {
        if (mbind_track_set_imported == null) {
            mbind_track_set_imported = try api.createMethod("Animation", "track_set_imported");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_imported),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_set_imported, base, cargs, result);
    }

    pub fn trackSetInterpolationLoopWrap(self: *const Self, arg_track_idx: i32, arg_interpolation: bool) !void {
        if (mbind_track_set_interpolation_loop_wrap == null) {
            mbind_track_set_interpolation_loop_wrap = try api.createMethod("Animation", "track_set_interpolation_loop_wrap");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_interpolation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_set_interpolation_loop_wrap, base, cargs, result);
    }

    pub fn trackSetInterpolationType(self: *const Self, arg_track_idx: i32, arg_interpolation: i32) !void {
        if (mbind_track_set_interpolation_type == null) {
            mbind_track_set_interpolation_type = try api.createMethod("Animation", "track_set_interpolation_type");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_interpolation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_set_interpolation_type, base, cargs, result);
    }

    pub fn trackSetKeyTime(self: *const Self, arg_track_idx: i32, arg_key_idx: i32, arg_time: f32) !void {
        if (mbind_track_set_key_time == null) {
            mbind_track_set_key_time = try api.createMethod("Animation", "track_set_key_time");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
            @ptrCast(*const anyopaque, *arg_time),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_set_key_time, base, cargs, result);
    }

    pub fn trackSetKeyTransition(self: *const Self, arg_track_idx: i32, arg_key_idx: i32, arg_transition: f32) !void {
        if (mbind_track_set_key_transition == null) {
            mbind_track_set_key_transition = try api.createMethod("Animation", "track_set_key_transition");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key_idx),
            @ptrCast(*const anyopaque, *arg_transition),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_set_key_transition, base, cargs, result);
    }

    pub fn trackSetKeyValue(self: *const Self, arg_track_idx: i32, arg_key: i32, arg_value: *const godot.Variant) !void {
        if (mbind_track_set_key_value == null) {
            mbind_track_set_key_value = try api.createMethod("Animation", "track_set_key_value");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_key),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_set_key_value, base, cargs, result);
    }

    pub fn trackSetPath(self: *const Self, arg_track_idx: i32, arg_path: *const godot.NodePath) !void {
        if (mbind_track_set_path == null) {
            mbind_track_set_path = try api.createMethod("Animation", "track_set_path");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_set_path, base, cargs, result);
    }

    pub fn trackSwap(self: *const Self, arg_track_idx: i32, arg_with_idx: i32) !void {
        if (mbind_track_swap == null) {
            mbind_track_swap = try api.createMethod("Animation", "track_swap");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_with_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_track_swap, base, cargs, result);
    }

    pub fn transformTrackInsertKey(self: *const Self, arg_track_idx: i32, arg_time: f32, arg_location: *const godot.Vector3, arg_rotation: *const godot.Quat, arg_scale: *const godot.Vector3) !i32 {
        if (mbind_transform_track_insert_key == null) {
            mbind_transform_track_insert_key = try api.createMethod("Animation", "transform_track_insert_key");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time),
            @ptrCast(*const anyopaque, arg_location),
            @ptrCast(*const anyopaque, arg_rotation),
            @ptrCast(*const anyopaque, arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_transform_track_insert_key, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn transformTrackInterpolate(self: *const Self, arg_track_idx: i32, arg_time_sec: f32) !godot.Array {
        if (mbind_transform_track_interpolate == null) {
            mbind_transform_track_interpolate = try api.createMethod("Animation", "transform_track_interpolate");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time_sec),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_transform_track_interpolate, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn valueTrackGetKeyIndices(self: *const Self, arg_track_idx: i32, arg_time_sec: f32, arg_delta: f32) !godot.PoolIntArray {
        if (mbind_value_track_get_key_indices == null) {
            mbind_value_track_get_key_indices = try api.createMethod("Animation", "value_track_get_key_indices");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time_sec),
            @ptrCast(*const anyopaque, *arg_delta),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_value_track_get_key_indices, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn valueTrackGetUpdateMode(self: *const Self, arg_track_idx: i32) !i32 {
        if (mbind_value_track_get_update_mode == null) {
            mbind_value_track_get_update_mode = try api.createMethod("Animation", "value_track_get_update_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_value_track_get_update_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn valueTrackInterpolate(self: *const Self, arg_track_idx: i32, arg_time_sec: f32) !godot.Variant {
        if (mbind_value_track_interpolate == null) {
            mbind_value_track_interpolate = try api.createMethod("Animation", "value_track_interpolate");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_time_sec),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_value_track_interpolate, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn valueTrackSetUpdateMode(self: *const Self, arg_track_idx: i32, arg_mode: i32) !void {
        if (mbind_value_track_set_update_mode == null) {
            mbind_value_track_set_update_mode = try api.createMethod("Animation", "value_track_set_update_mode");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_track_idx),
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_value_track_set_update_mode, base, cargs, result);
    }
};