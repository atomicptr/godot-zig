// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const StyleBox = @import("style_box.zig").StyleBox;

// method bindings
var mbind_get_aa_size: ?*c_api.godot_method_bind = null;
var mbind_get_bg_color: ?*c_api.godot_method_bind = null;
var mbind_get_border_blend: ?*c_api.godot_method_bind = null;
var mbind_get_border_color: ?*c_api.godot_method_bind = null;
var mbind_get_border_width: ?*c_api.godot_method_bind = null;
var mbind_get_border_width_min: ?*c_api.godot_method_bind = null;
var mbind_get_corner_detail: ?*c_api.godot_method_bind = null;
var mbind_get_corner_radius: ?*c_api.godot_method_bind = null;
var mbind_get_expand_margin: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_color: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_offset: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_size: ?*c_api.godot_method_bind = null;
var mbind_is_anti_aliased: ?*c_api.godot_method_bind = null;
var mbind_is_draw_center_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_aa_size: ?*c_api.godot_method_bind = null;
var mbind_set_anti_aliased: ?*c_api.godot_method_bind = null;
var mbind_set_bg_color: ?*c_api.godot_method_bind = null;
var mbind_set_border_blend: ?*c_api.godot_method_bind = null;
var mbind_set_border_color: ?*c_api.godot_method_bind = null;
var mbind_set_border_width: ?*c_api.godot_method_bind = null;
var mbind_set_border_width_all: ?*c_api.godot_method_bind = null;
var mbind_set_corner_detail: ?*c_api.godot_method_bind = null;
var mbind_set_corner_radius: ?*c_api.godot_method_bind = null;
var mbind_set_corner_radius_all: ?*c_api.godot_method_bind = null;
var mbind_set_corner_radius_individual: ?*c_api.godot_method_bind = null;
var mbind_set_draw_center: ?*c_api.godot_method_bind = null;
var mbind_set_expand_margin: ?*c_api.godot_method_bind = null;
var mbind_set_expand_margin_all: ?*c_api.godot_method_bind = null;
var mbind_set_expand_margin_individual: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_color: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_offset: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_size: ?*c_api.godot_method_bind = null;
var mbind_style_box_flat_constructor: ?fn () ?*c_api.godot_object = null;

pub const StyleBoxFlat = struct {
    const Self = @This();
    const BaseClass = StyleBox;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_style_box_flat_constructor == null) {
            mbind_style_box_flat_constructor = try api.createConstructor("StyleBoxFlat");
        }
        return api.createObject(Self, mbind_style_box_flat_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAaSize(self: *const Self) !f32 {
        if (mbind_get_aa_size == null) {
            mbind_get_aa_size = try api.createMethod("StyleBoxFlat", "get_aa_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_aa_size, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getBgColor(self: *const Self) !godot.Color {
        if (mbind_get_bg_color == null) {
            mbind_get_bg_color = try api.createMethod("StyleBoxFlat", "get_bg_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bg_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getBorderBlend(self: *const Self) !bool {
        if (mbind_get_border_blend == null) {
            mbind_get_border_blend = try api.createMethod("StyleBoxFlat", "get_border_blend");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_border_blend, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getBorderColor(self: *const Self) !godot.Color {
        if (mbind_get_border_color == null) {
            mbind_get_border_color = try api.createMethod("StyleBoxFlat", "get_border_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_border_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getBorderWidth(self: *const Self, arg_margin: i32) !i32 {
        if (mbind_get_border_width == null) {
            mbind_get_border_width = try api.createMethod("StyleBoxFlat", "get_border_width");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_border_width, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBorderWidthMin(self: *const Self) !i32 {
        if (mbind_get_border_width_min == null) {
            mbind_get_border_width_min = try api.createMethod("StyleBoxFlat", "get_border_width_min");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_border_width_min, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCornerDetail(self: *const Self) !i32 {
        if (mbind_get_corner_detail == null) {
            mbind_get_corner_detail = try api.createMethod("StyleBoxFlat", "get_corner_detail");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_corner_detail, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCornerRadius(self: *const Self, arg_corner: i32) !i32 {
        if (mbind_get_corner_radius == null) {
            mbind_get_corner_radius = try api.createMethod("StyleBoxFlat", "get_corner_radius");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_corner),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_corner_radius, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getExpandMargin(self: *const Self, arg_margin: i32) !f32 {
        if (mbind_get_expand_margin == null) {
            mbind_get_expand_margin = try api.createMethod("StyleBoxFlat", "get_expand_margin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_expand_margin, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getShadowColor(self: *const Self) !godot.Color {
        if (mbind_get_shadow_color == null) {
            mbind_get_shadow_color = try api.createMethod("StyleBoxFlat", "get_shadow_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getShadowOffset(self: *const Self) !godot.Vector2 {
        if (mbind_get_shadow_offset == null) {
            mbind_get_shadow_offset = try api.createMethod("StyleBoxFlat", "get_shadow_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_offset, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getShadowSize(self: *const Self) !i32 {
        if (mbind_get_shadow_size == null) {
            mbind_get_shadow_size = try api.createMethod("StyleBoxFlat", "get_shadow_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_size, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isAntiAliased(self: *const Self) !bool {
        if (mbind_is_anti_aliased == null) {
            mbind_is_anti_aliased = try api.createMethod("StyleBoxFlat", "is_anti_aliased");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_anti_aliased, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isDrawCenterEnabled(self: *const Self) !bool {
        if (mbind_is_draw_center_enabled == null) {
            mbind_is_draw_center_enabled = try api.createMethod("StyleBoxFlat", "is_draw_center_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_draw_center_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setAaSize(self: *const Self, arg_size: f32) !void {
        if (mbind_set_aa_size == null) {
            mbind_set_aa_size = try api.createMethod("StyleBoxFlat", "set_aa_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_aa_size, base, cargs, result);
    }

    pub fn setAntiAliased(self: *const Self, arg_anti_aliased: bool) !void {
        if (mbind_set_anti_aliased == null) {
            mbind_set_anti_aliased = try api.createMethod("StyleBoxFlat", "set_anti_aliased");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_anti_aliased),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_anti_aliased, base, cargs, result);
    }

    pub fn setBgColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_bg_color == null) {
            mbind_set_bg_color = try api.createMethod("StyleBoxFlat", "set_bg_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bg_color, base, cargs, result);
    }

    pub fn setBorderBlend(self: *const Self, arg_blend: bool) !void {
        if (mbind_set_border_blend == null) {
            mbind_set_border_blend = try api.createMethod("StyleBoxFlat", "set_border_blend");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_blend),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_border_blend, base, cargs, result);
    }

    pub fn setBorderColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_border_color == null) {
            mbind_set_border_color = try api.createMethod("StyleBoxFlat", "set_border_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_border_color, base, cargs, result);
    }

    pub fn setBorderWidth(self: *const Self, arg_margin: i32, arg_width: i32) !void {
        if (mbind_set_border_width == null) {
            mbind_set_border_width = try api.createMethod("StyleBoxFlat", "set_border_width");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
            @ptrCast(*const anyopaque, *arg_width),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_border_width, base, cargs, result);
    }

    pub fn setBorderWidthAll(self: *const Self, arg_width: i32) !void {
        if (mbind_set_border_width_all == null) {
            mbind_set_border_width_all = try api.createMethod("StyleBoxFlat", "set_border_width_all");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_width),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_border_width_all, base, cargs, result);
    }

    pub fn setCornerDetail(self: *const Self, arg_detail: i32) !void {
        if (mbind_set_corner_detail == null) {
            mbind_set_corner_detail = try api.createMethod("StyleBoxFlat", "set_corner_detail");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_detail),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_corner_detail, base, cargs, result);
    }

    pub fn setCornerRadius(self: *const Self, arg_corner: i32, arg_radius: i32) !void {
        if (mbind_set_corner_radius == null) {
            mbind_set_corner_radius = try api.createMethod("StyleBoxFlat", "set_corner_radius");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_corner),
            @ptrCast(*const anyopaque, *arg_radius),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_corner_radius, base, cargs, result);
    }

    pub fn setCornerRadiusAll(self: *const Self, arg_radius: i32) !void {
        if (mbind_set_corner_radius_all == null) {
            mbind_set_corner_radius_all = try api.createMethod("StyleBoxFlat", "set_corner_radius_all");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radius),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_corner_radius_all, base, cargs, result);
    }

    pub fn setCornerRadiusIndividual(self: *const Self, arg_radius_top_left: i32, arg_radius_top_right: i32, arg_radius_bottom_right: i32, arg_radius_bottom_left: i32) !void {
        if (mbind_set_corner_radius_individual == null) {
            mbind_set_corner_radius_individual = try api.createMethod("StyleBoxFlat", "set_corner_radius_individual");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radius_top_left),
            @ptrCast(*const anyopaque, *arg_radius_top_right),
            @ptrCast(*const anyopaque, *arg_radius_bottom_right),
            @ptrCast(*const anyopaque, *arg_radius_bottom_left),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_corner_radius_individual, base, cargs, result);
    }

    pub fn setDrawCenter(self: *const Self, arg_draw_center: bool) !void {
        if (mbind_set_draw_center == null) {
            mbind_set_draw_center = try api.createMethod("StyleBoxFlat", "set_draw_center");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_draw_center),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_draw_center, base, cargs, result);
    }

    pub fn setExpandMargin(self: *const Self, arg_margin: i32, arg_size: f32) !void {
        if (mbind_set_expand_margin == null) {
            mbind_set_expand_margin = try api.createMethod("StyleBoxFlat", "set_expand_margin");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
            @ptrCast(*const anyopaque, *arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_expand_margin, base, cargs, result);
    }

    pub fn setExpandMarginAll(self: *const Self, arg_size: f32) !void {
        if (mbind_set_expand_margin_all == null) {
            mbind_set_expand_margin_all = try api.createMethod("StyleBoxFlat", "set_expand_margin_all");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_expand_margin_all, base, cargs, result);
    }

    pub fn setExpandMarginIndividual(self: *const Self, arg_size_left: f32, arg_size_top: f32, arg_size_right: f32, arg_size_bottom: f32) !void {
        if (mbind_set_expand_margin_individual == null) {
            mbind_set_expand_margin_individual = try api.createMethod("StyleBoxFlat", "set_expand_margin_individual");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_size_left),
            @ptrCast(*const anyopaque, *arg_size_top),
            @ptrCast(*const anyopaque, *arg_size_right),
            @ptrCast(*const anyopaque, *arg_size_bottom),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_expand_margin_individual, base, cargs, result);
    }

    pub fn setShadowColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_shadow_color == null) {
            mbind_set_shadow_color = try api.createMethod("StyleBoxFlat", "set_shadow_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_color, base, cargs, result);
    }

    pub fn setShadowOffset(self: *const Self, arg_offset: *const godot.Vector2) !void {
        if (mbind_set_shadow_offset == null) {
            mbind_set_shadow_offset = try api.createMethod("StyleBoxFlat", "set_shadow_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_offset, base, cargs, result);
    }

    pub fn setShadowSize(self: *const Self, arg_size: i32) !void {
        if (mbind_set_shadow_size == null) {
            mbind_set_shadow_size = try api.createMethod("StyleBoxFlat", "set_shadow_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_size, base, cargs, result);
    }
};