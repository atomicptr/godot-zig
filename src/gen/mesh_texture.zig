// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Texture = @import("texture.zig").Texture;

// method bindings
var mbind_get_base_texture: ?*c_api.godot_method_bind = null;
var mbind_get_image_size: ?*c_api.godot_method_bind = null;
var mbind_get_mesh: ?*c_api.godot_method_bind = null;
var mbind_set_base_texture: ?*c_api.godot_method_bind = null;
var mbind_set_image_size: ?*c_api.godot_method_bind = null;
var mbind_set_mesh: ?*c_api.godot_method_bind = null;
var mbind_mesh_texture_constructor: ?fn () ?*c_api.godot_object = null;

pub const MeshTexture = struct {
    const Self = @This();
    const BaseClass = Texture;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_mesh_texture_constructor == null) {
            mbind_mesh_texture_constructor = try api.createConstructor("MeshTexture");
        }
        return api.createObject(Self, mbind_mesh_texture_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBaseTexture(self: *const Self) !godot.Texture {
        if (mbind_get_base_texture == null) {
            mbind_get_base_texture = try api.createMethod("MeshTexture", "get_base_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_base_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getImageSize(self: *const Self) !godot.Vector2 {
        if (mbind_get_image_size == null) {
            mbind_get_image_size = try api.createMethod("MeshTexture", "get_image_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_image_size, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getMesh(self: *const Self) !godot.Mesh {
        if (mbind_get_mesh == null) {
            mbind_get_mesh = try api.createMethod("MeshTexture", "get_mesh");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mesh, base, cargs, result);
        return @ptrCast(*godot.Mesh, @alignCast(@alignOf(&godot.Mesh), result)).*;
    }

    pub fn setBaseTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_base_texture == null) {
            mbind_set_base_texture = try api.createMethod("MeshTexture", "set_base_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_base_texture, base, cargs, result);
    }

    pub fn setImageSize(self: *const Self, arg_size: *const godot.Vector2) !void {
        if (mbind_set_image_size == null) {
            mbind_set_image_size = try api.createMethod("MeshTexture", "set_image_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_image_size, base, cargs, result);
    }

    pub fn setMesh(self: *const Self, arg_mesh: *const godot.Mesh) !void {
        if (mbind_set_mesh == null) {
            mbind_set_mesh = try api.createMethod("MeshTexture", "set_mesh");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mesh),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mesh, base, cargs, result);
    }
};