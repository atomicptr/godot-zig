// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_dry: ?*c_api.godot_method_bind = null;
var mbind_get_feedback_delay_ms: ?*c_api.godot_method_bind = null;
var mbind_get_feedback_level_db: ?*c_api.godot_method_bind = null;
var mbind_get_feedback_lowpass: ?*c_api.godot_method_bind = null;
var mbind_get_tap1_delay_ms: ?*c_api.godot_method_bind = null;
var mbind_get_tap1_level_db: ?*c_api.godot_method_bind = null;
var mbind_get_tap1_pan: ?*c_api.godot_method_bind = null;
var mbind_get_tap2_delay_ms: ?*c_api.godot_method_bind = null;
var mbind_get_tap2_level_db: ?*c_api.godot_method_bind = null;
var mbind_get_tap2_pan: ?*c_api.godot_method_bind = null;
var mbind_is_feedback_active: ?*c_api.godot_method_bind = null;
var mbind_is_tap1_active: ?*c_api.godot_method_bind = null;
var mbind_is_tap2_active: ?*c_api.godot_method_bind = null;
var mbind_set_dry: ?*c_api.godot_method_bind = null;
var mbind_set_feedback_active: ?*c_api.godot_method_bind = null;
var mbind_set_feedback_delay_ms: ?*c_api.godot_method_bind = null;
var mbind_set_feedback_level_db: ?*c_api.godot_method_bind = null;
var mbind_set_feedback_lowpass: ?*c_api.godot_method_bind = null;
var mbind_set_tap1_active: ?*c_api.godot_method_bind = null;
var mbind_set_tap1_delay_ms: ?*c_api.godot_method_bind = null;
var mbind_set_tap1_level_db: ?*c_api.godot_method_bind = null;
var mbind_set_tap1_pan: ?*c_api.godot_method_bind = null;
var mbind_set_tap2_active: ?*c_api.godot_method_bind = null;
var mbind_set_tap2_delay_ms: ?*c_api.godot_method_bind = null;
var mbind_set_tap2_level_db: ?*c_api.godot_method_bind = null;
var mbind_set_tap2_pan: ?*c_api.godot_method_bind = null;
var mbind_audio_effect_delay_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioEffectDelay = struct {
    const Self = @This();
    pub const BaseClass = godot.AudioEffect;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_effect_delay_constructor == null) {
            mbind_audio_effect_delay_constructor = try api.createConstructor("AudioEffectDelay");
        }
        return api.createObject(Self, mbind_audio_effect_delay_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getDry(self: *const Self) !f32 {
        if (mbind_get_dry == null) {
            mbind_get_dry = try api.createMethod("AudioEffectDelay", "get_dry");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_dry, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFeedbackDelayMs(self: *const Self) !f32 {
        if (mbind_get_feedback_delay_ms == null) {
            mbind_get_feedback_delay_ms = try api.createMethod("AudioEffectDelay", "get_feedback_delay_ms");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_feedback_delay_ms, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFeedbackLevelDb(self: *const Self) !f32 {
        if (mbind_get_feedback_level_db == null) {
            mbind_get_feedback_level_db = try api.createMethod("AudioEffectDelay", "get_feedback_level_db");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_feedback_level_db, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFeedbackLowpass(self: *const Self) !f32 {
        if (mbind_get_feedback_lowpass == null) {
            mbind_get_feedback_lowpass = try api.createMethod("AudioEffectDelay", "get_feedback_lowpass");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_feedback_lowpass, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTap1DelayMs(self: *const Self) !f32 {
        if (mbind_get_tap1_delay_ms == null) {
            mbind_get_tap1_delay_ms = try api.createMethod("AudioEffectDelay", "get_tap1_delay_ms");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tap1_delay_ms, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTap1LevelDb(self: *const Self) !f32 {
        if (mbind_get_tap1_level_db == null) {
            mbind_get_tap1_level_db = try api.createMethod("AudioEffectDelay", "get_tap1_level_db");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tap1_level_db, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTap1Pan(self: *const Self) !f32 {
        if (mbind_get_tap1_pan == null) {
            mbind_get_tap1_pan = try api.createMethod("AudioEffectDelay", "get_tap1_pan");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tap1_pan, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTap2DelayMs(self: *const Self) !f32 {
        if (mbind_get_tap2_delay_ms == null) {
            mbind_get_tap2_delay_ms = try api.createMethod("AudioEffectDelay", "get_tap2_delay_ms");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tap2_delay_ms, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTap2LevelDb(self: *const Self) !f32 {
        if (mbind_get_tap2_level_db == null) {
            mbind_get_tap2_level_db = try api.createMethod("AudioEffectDelay", "get_tap2_level_db");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tap2_level_db, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTap2Pan(self: *const Self) !f32 {
        if (mbind_get_tap2_pan == null) {
            mbind_get_tap2_pan = try api.createMethod("AudioEffectDelay", "get_tap2_pan");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tap2_pan, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn isFeedbackActive(self: *const Self) !bool {
        if (mbind_is_feedback_active == null) {
            mbind_is_feedback_active = try api.createMethod("AudioEffectDelay", "is_feedback_active");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_feedback_active, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isTap1Active(self: *const Self) !bool {
        if (mbind_is_tap1_active == null) {
            mbind_is_tap1_active = try api.createMethod("AudioEffectDelay", "is_tap1_active");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_tap1_active, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isTap2Active(self: *const Self) !bool {
        if (mbind_is_tap2_active == null) {
            mbind_is_tap2_active = try api.createMethod("AudioEffectDelay", "is_tap2_active");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_tap2_active, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setDry(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_dry == null) {
            mbind_set_dry = try api.createMethod("AudioEffectDelay", "set_dry");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_dry, base, cargs, result);
    }

    pub fn setFeedbackActive(self: *const Self, arg_amount: bool) !void {
        if (mbind_set_feedback_active == null) {
            mbind_set_feedback_active = try api.createMethod("AudioEffectDelay", "set_feedback_active");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_feedback_active, base, cargs, result);
    }

    pub fn setFeedbackDelayMs(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_feedback_delay_ms == null) {
            mbind_set_feedback_delay_ms = try api.createMethod("AudioEffectDelay", "set_feedback_delay_ms");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_feedback_delay_ms, base, cargs, result);
    }

    pub fn setFeedbackLevelDb(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_feedback_level_db == null) {
            mbind_set_feedback_level_db = try api.createMethod("AudioEffectDelay", "set_feedback_level_db");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_feedback_level_db, base, cargs, result);
    }

    pub fn setFeedbackLowpass(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_feedback_lowpass == null) {
            mbind_set_feedback_lowpass = try api.createMethod("AudioEffectDelay", "set_feedback_lowpass");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_feedback_lowpass, base, cargs, result);
    }

    pub fn setTap1Active(self: *const Self, arg_amount: bool) !void {
        if (mbind_set_tap1_active == null) {
            mbind_set_tap1_active = try api.createMethod("AudioEffectDelay", "set_tap1_active");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tap1_active, base, cargs, result);
    }

    pub fn setTap1DelayMs(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_tap1_delay_ms == null) {
            mbind_set_tap1_delay_ms = try api.createMethod("AudioEffectDelay", "set_tap1_delay_ms");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tap1_delay_ms, base, cargs, result);
    }

    pub fn setTap1LevelDb(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_tap1_level_db == null) {
            mbind_set_tap1_level_db = try api.createMethod("AudioEffectDelay", "set_tap1_level_db");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tap1_level_db, base, cargs, result);
    }

    pub fn setTap1Pan(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_tap1_pan == null) {
            mbind_set_tap1_pan = try api.createMethod("AudioEffectDelay", "set_tap1_pan");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tap1_pan, base, cargs, result);
    }

    pub fn setTap2Active(self: *const Self, arg_amount: bool) !void {
        if (mbind_set_tap2_active == null) {
            mbind_set_tap2_active = try api.createMethod("AudioEffectDelay", "set_tap2_active");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tap2_active, base, cargs, result);
    }

    pub fn setTap2DelayMs(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_tap2_delay_ms == null) {
            mbind_set_tap2_delay_ms = try api.createMethod("AudioEffectDelay", "set_tap2_delay_ms");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tap2_delay_ms, base, cargs, result);
    }

    pub fn setTap2LevelDb(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_tap2_level_db == null) {
            mbind_set_tap2_level_db = try api.createMethod("AudioEffectDelay", "set_tap2_level_db");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tap2_level_db, base, cargs, result);
    }

    pub fn setTap2Pan(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_tap2_pan == null) {
            mbind_set_tap2_pan = try api.createMethod("AudioEffectDelay", "set_tap2_pan");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tap2_pan, base, cargs, result);
    }
};