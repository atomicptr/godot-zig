// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_create_callback: ?*c_api.godot_method_bind = null;
var mbind_create_object: ?*c_api.godot_method_bind = null;
var mbind_download_buffer: ?*c_api.godot_method_bind = null;
var mbind_eval: ?*c_api.godot_method_bind = null;
var mbind_get_interface: ?*c_api.godot_method_bind = null;
var mbind_java_script_constructor: ?fn () ?*c_api.godot_object = null;

pub const JavaScript = struct {
    const Self = @This();
    pub const BaseClass = godot.Object;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_java_script_constructor == null) {
            mbind_java_script_constructor = try api.createConstructor("JavaScript");
        }
        return api.createObject(Self, mbind_java_script_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn createCallback(self: *const Self, arg_object: *const godot.Object, arg_method: *const godot.String) !godot.JavaScriptObject {
        if (mbind_create_callback == null) {
            mbind_create_callback = try api.createMethod("JavaScript", "create_callback");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_object),
            @ptrCast(*const anyopaque, arg_method),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_callback, base, cargs, result);
        return @ptrCast(*godot.JavaScriptObject, @alignCast(@alignOf(&godot.JavaScriptObject), result)).*;
    }

    pub fn createObject(self: *const Self, arg_object: *const godot.String) !godot.Variant {
        if (mbind_create_object == null) {
            mbind_create_object = try api.createMethod("JavaScript", "create_object");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_object),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_object, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn downloadBuffer(self: *const Self, arg_buffer: *const godot.PoolByteArray, arg_name: *const godot.String, arg_mime: *const godot.String) !void {
        if (mbind_download_buffer == null) {
            mbind_download_buffer = try api.createMethod("JavaScript", "download_buffer");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_buffer),
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_mime),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_download_buffer, base, cargs, result);
    }

    pub fn eval(self: *const Self, arg_code: *const godot.String, arg_use_global_execution_context: bool) !godot.Variant {
        if (mbind_eval == null) {
            mbind_eval = try api.createMethod("JavaScript", "eval");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_code),
            @ptrCast(*const anyopaque, *arg_use_global_execution_context),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_eval, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getInterface(self: *const Self, arg_interface: *const godot.String) !godot.JavaScriptObject {
        if (mbind_get_interface == null) {
            mbind_get_interface = try api.createMethod("JavaScript", "get_interface");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_interface),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_interface, base, cargs, result);
        return @ptrCast(*godot.JavaScriptObject, @alignCast(@alignOf(&godot.JavaScriptObject), result)).*;
    }
};