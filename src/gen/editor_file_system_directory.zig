// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Object = @import("object.zig").Object;

// method bindings
var mbind_find_dir_index: ?*c_api.godot_method_bind = null;
var mbind_find_file_index: ?*c_api.godot_method_bind = null;
var mbind_get_file: ?*c_api.godot_method_bind = null;
var mbind_get_file_count: ?*c_api.godot_method_bind = null;
var mbind_get_file_import_is_valid: ?*c_api.godot_method_bind = null;
var mbind_get_file_path: ?*c_api.godot_method_bind = null;
var mbind_get_file_script_class_extends: ?*c_api.godot_method_bind = null;
var mbind_get_file_script_class_name: ?*c_api.godot_method_bind = null;
var mbind_get_file_type: ?*c_api.godot_method_bind = null;
var mbind_get_name: ?*c_api.godot_method_bind = null;
var mbind_get_parent: ?*c_api.godot_method_bind = null;
var mbind_get_path: ?*c_api.godot_method_bind = null;
var mbind_get_subdir: ?*c_api.godot_method_bind = null;
var mbind_get_subdir_count: ?*c_api.godot_method_bind = null;
var mbind_editor_file_system_directory_constructor: ?fn () ?*c_api.godot_object = null;

pub const EditorFileSystemDirectory = struct {
    const Self = @This();
    const BaseClass = Object;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_editor_file_system_directory_constructor == null) {
            mbind_editor_file_system_directory_constructor = try api.createConstructor("EditorFileSystemDirectory");
        }
        return api.createObject(Self, mbind_editor_file_system_directory_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn findDirIndex(self: *const Self, arg_name: *const godot.String) !i32 {
        if (mbind_find_dir_index == null) {
            mbind_find_dir_index = try api.createMethod("EditorFileSystemDirectory", "find_dir_index");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_find_dir_index, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn findFileIndex(self: *const Self, arg_name: *const godot.String) !i32 {
        if (mbind_find_file_index == null) {
            mbind_find_file_index = try api.createMethod("EditorFileSystemDirectory", "find_file_index");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_find_file_index, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFile(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_file == null) {
            mbind_get_file = try api.createMethod("EditorFileSystemDirectory", "get_file");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_file, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getFileCount(self: *const Self) !i32 {
        if (mbind_get_file_count == null) {
            mbind_get_file_count = try api.createMethod("EditorFileSystemDirectory", "get_file_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_file_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFileImportIsValid(self: *const Self, arg_idx: i32) !bool {
        if (mbind_get_file_import_is_valid == null) {
            mbind_get_file_import_is_valid = try api.createMethod("EditorFileSystemDirectory", "get_file_import_is_valid");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_file_import_is_valid, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getFilePath(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_file_path == null) {
            mbind_get_file_path = try api.createMethod("EditorFileSystemDirectory", "get_file_path");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_file_path, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getFileScriptClassExtends(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_file_script_class_extends == null) {
            mbind_get_file_script_class_extends = try api.createMethod("EditorFileSystemDirectory", "get_file_script_class_extends");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_file_script_class_extends, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getFileScriptClassName(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_file_script_class_name == null) {
            mbind_get_file_script_class_name = try api.createMethod("EditorFileSystemDirectory", "get_file_script_class_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_file_script_class_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getFileType(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_file_type == null) {
            mbind_get_file_type = try api.createMethod("EditorFileSystemDirectory", "get_file_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_file_type, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getName(self: *const Self) !godot.String {
        if (mbind_get_name == null) {
            mbind_get_name = try api.createMethod("EditorFileSystemDirectory", "get_name");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getParent(self: *const Self) !godot.EditorFileSystemDirectory {
        if (mbind_get_parent == null) {
            mbind_get_parent = try api.createMethod("EditorFileSystemDirectory", "get_parent");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_parent, base, cargs, result);
        return @ptrCast(*godot.EditorFileSystemDirectory, @alignCast(@alignOf(&godot.EditorFileSystemDirectory), result)).*;
    }

    pub fn getPath(self: *const Self) !godot.String {
        if (mbind_get_path == null) {
            mbind_get_path = try api.createMethod("EditorFileSystemDirectory", "get_path");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_path, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getSubdir(self: *const Self, arg_idx: i32) !godot.EditorFileSystemDirectory {
        if (mbind_get_subdir == null) {
            mbind_get_subdir = try api.createMethod("EditorFileSystemDirectory", "get_subdir");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_subdir, base, cargs, result);
        return @ptrCast(*godot.EditorFileSystemDirectory, @alignCast(@alignOf(&godot.EditorFileSystemDirectory), result)).*;
    }

    pub fn getSubdirCount(self: *const Self) !i32 {
        if (mbind_get_subdir_count == null) {
            mbind_get_subdir_count = try api.createMethod("EditorFileSystemDirectory", "get_subdir_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_subdir_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }
};