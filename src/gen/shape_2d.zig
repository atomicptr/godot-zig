// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_collide: ?*c_api.godot_method_bind = null;
var mbind_collide_and_get_contacts: ?*c_api.godot_method_bind = null;
var mbind_collide_with_motion: ?*c_api.godot_method_bind = null;
var mbind_collide_with_motion_and_get_contacts: ?*c_api.godot_method_bind = null;
var mbind_draw: ?*c_api.godot_method_bind = null;
var mbind_get_custom_solver_bias: ?*c_api.godot_method_bind = null;
var mbind_set_custom_solver_bias: ?*c_api.godot_method_bind = null;
var mbind_shape_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const Shape2D = struct {
    const Self = @This();
    pub const BaseClass = godot.Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_shape_2d_constructor == null) {
            mbind_shape_2d_constructor = try api.createConstructor("Shape2D");
        }
        return api.createObject(Self, mbind_shape_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn collide(self: *const Self, arg_local_xform: *const godot.Transform2D, arg_with_shape: *const godot.Shape2D, arg_shape_xform: *const godot.Transform2D) !bool {
        if (mbind_collide == null) {
            mbind_collide = try api.createMethod("Shape2D", "collide");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_local_xform),
            @ptrCast(*const anyopaque, arg_with_shape),
            @ptrCast(*const anyopaque, arg_shape_xform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_collide, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn collideAndGetContacts(self: *const Self, arg_local_xform: *const godot.Transform2D, arg_with_shape: *const godot.Shape2D, arg_shape_xform: *const godot.Transform2D) !godot.Array {
        if (mbind_collide_and_get_contacts == null) {
            mbind_collide_and_get_contacts = try api.createMethod("Shape2D", "collide_and_get_contacts");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_local_xform),
            @ptrCast(*const anyopaque, arg_with_shape),
            @ptrCast(*const anyopaque, arg_shape_xform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_collide_and_get_contacts, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn collideWithMotion(self: *const Self, arg_local_xform: *const godot.Transform2D, arg_local_motion: *const godot.Vector2, arg_with_shape: *const godot.Shape2D, arg_shape_xform: *const godot.Transform2D, arg_shape_motion: *const godot.Vector2) !bool {
        if (mbind_collide_with_motion == null) {
            mbind_collide_with_motion = try api.createMethod("Shape2D", "collide_with_motion");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_local_xform),
            @ptrCast(*const anyopaque, arg_local_motion),
            @ptrCast(*const anyopaque, arg_with_shape),
            @ptrCast(*const anyopaque, arg_shape_xform),
            @ptrCast(*const anyopaque, arg_shape_motion),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_collide_with_motion, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn collideWithMotionAndGetContacts(self: *const Self, arg_local_xform: *const godot.Transform2D, arg_local_motion: *const godot.Vector2, arg_with_shape: *const godot.Shape2D, arg_shape_xform: *const godot.Transform2D, arg_shape_motion: *const godot.Vector2) !godot.Array {
        if (mbind_collide_with_motion_and_get_contacts == null) {
            mbind_collide_with_motion_and_get_contacts = try api.createMethod("Shape2D", "collide_with_motion_and_get_contacts");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_local_xform),
            @ptrCast(*const anyopaque, arg_local_motion),
            @ptrCast(*const anyopaque, arg_with_shape),
            @ptrCast(*const anyopaque, arg_shape_xform),
            @ptrCast(*const anyopaque, arg_shape_motion),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_collide_with_motion_and_get_contacts, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn draw(self: *const Self, arg_canvas_item: *const godot.RID, arg_color: *const godot.Color) !void {
        if (mbind_draw == null) {
            mbind_draw = try api.createMethod("Shape2D", "draw");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_canvas_item),
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_draw, base, cargs, result);
    }

    pub fn getCustomSolverBias(self: *const Self) !f32 {
        if (mbind_get_custom_solver_bias == null) {
            mbind_get_custom_solver_bias = try api.createMethod("Shape2D", "get_custom_solver_bias");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_custom_solver_bias, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn setCustomSolverBias(self: *const Self, arg_bias: f32) !void {
        if (mbind_set_custom_solver_bias == null) {
            mbind_set_custom_solver_bias = try api.createMethod("Shape2D", "set_custom_solver_bias");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bias),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_solver_bias, base, cargs, result);
    }
};