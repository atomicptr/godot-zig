// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Container = @import("container.zig").Container;

// method bindings
var mbind_ensure_control_visible: ?*c_api.godot_method_bind = null;
var mbind_get_deadzone: ?*c_api.godot_method_bind = null;
var mbind_get_h_scroll: ?*c_api.godot_method_bind = null;
var mbind_get_h_scrollbar: ?*c_api.godot_method_bind = null;
var mbind_get_v_scroll: ?*c_api.godot_method_bind = null;
var mbind_get_v_scrollbar: ?*c_api.godot_method_bind = null;
var mbind_is_following_focus: ?*c_api.godot_method_bind = null;
var mbind_is_h_scroll_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_v_scroll_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_deadzone: ?*c_api.godot_method_bind = null;
var mbind_set_enable_h_scroll: ?*c_api.godot_method_bind = null;
var mbind_set_enable_v_scroll: ?*c_api.godot_method_bind = null;
var mbind_set_follow_focus: ?*c_api.godot_method_bind = null;
var mbind_set_h_scroll: ?*c_api.godot_method_bind = null;
var mbind_set_v_scroll: ?*c_api.godot_method_bind = null;
var mbind_scroll_container_constructor: ?fn () ?*c_api.godot_object = null;

pub const ScrollContainer = struct {
    const Self = @This();
    const BaseClass = Container;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_scroll_container_constructor == null) {
            mbind_scroll_container_constructor = try api.createConstructor("ScrollContainer");
        }
        return api.createObject(Self, mbind_scroll_container_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn ensureControlVisible(self: *const Self, arg_control: *const godot.Control) !void {
        if (mbind_ensure_control_visible == null) {
            mbind_ensure_control_visible = try api.createMethod("ScrollContainer", "ensure_control_visible");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_control),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_ensure_control_visible, base, cargs, result);
    }

    pub fn getDeadzone(self: *const Self) !i32 {
        if (mbind_get_deadzone == null) {
            mbind_get_deadzone = try api.createMethod("ScrollContainer", "get_deadzone");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_deadzone, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getHScroll(self: *const Self) !i32 {
        if (mbind_get_h_scroll == null) {
            mbind_get_h_scroll = try api.createMethod("ScrollContainer", "get_h_scroll");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_h_scroll, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getHScrollbar(self: *const Self) !godot.HScrollBar {
        if (mbind_get_h_scrollbar == null) {
            mbind_get_h_scrollbar = try api.createMethod("ScrollContainer", "get_h_scrollbar");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_h_scrollbar, base, cargs, result);
        return @ptrCast(*godot.HScrollBar, @alignCast(@alignOf(&godot.HScrollBar), result)).*;
    }

    pub fn getVScroll(self: *const Self) !i32 {
        if (mbind_get_v_scroll == null) {
            mbind_get_v_scroll = try api.createMethod("ScrollContainer", "get_v_scroll");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_v_scroll, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getVScrollbar(self: *const Self) !godot.VScrollBar {
        if (mbind_get_v_scrollbar == null) {
            mbind_get_v_scrollbar = try api.createMethod("ScrollContainer", "get_v_scrollbar");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_v_scrollbar, base, cargs, result);
        return @ptrCast(*godot.VScrollBar, @alignCast(@alignOf(&godot.VScrollBar), result)).*;
    }

    pub fn isFollowingFocus(self: *const Self) !bool {
        if (mbind_is_following_focus == null) {
            mbind_is_following_focus = try api.createMethod("ScrollContainer", "is_following_focus");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_following_focus, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isHScrollEnabled(self: *const Self) !bool {
        if (mbind_is_h_scroll_enabled == null) {
            mbind_is_h_scroll_enabled = try api.createMethod("ScrollContainer", "is_h_scroll_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_h_scroll_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isVScrollEnabled(self: *const Self) !bool {
        if (mbind_is_v_scroll_enabled == null) {
            mbind_is_v_scroll_enabled = try api.createMethod("ScrollContainer", "is_v_scroll_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_v_scroll_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setDeadzone(self: *const Self, arg_deadzone: i32) !void {
        if (mbind_set_deadzone == null) {
            mbind_set_deadzone = try api.createMethod("ScrollContainer", "set_deadzone");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_deadzone),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_deadzone, base, cargs, result);
    }

    pub fn setEnableHScroll(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_enable_h_scroll == null) {
            mbind_set_enable_h_scroll = try api.createMethod("ScrollContainer", "set_enable_h_scroll");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_enable_h_scroll, base, cargs, result);
    }

    pub fn setEnableVScroll(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_enable_v_scroll == null) {
            mbind_set_enable_v_scroll = try api.createMethod("ScrollContainer", "set_enable_v_scroll");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_enable_v_scroll, base, cargs, result);
    }

    pub fn setFollowFocus(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_follow_focus == null) {
            mbind_set_follow_focus = try api.createMethod("ScrollContainer", "set_follow_focus");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_follow_focus, base, cargs, result);
    }

    pub fn setHScroll(self: *const Self, arg_value: i32) !void {
        if (mbind_set_h_scroll == null) {
            mbind_set_h_scroll = try api.createMethod("ScrollContainer", "set_h_scroll");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_h_scroll, base, cargs, result);
    }

    pub fn setVScroll(self: *const Self, arg_value: i32) !void {
        if (mbind_set_v_scroll == null) {
            mbind_set_v_scroll = try api.createMethod("ScrollContainer", "set_v_scroll");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_v_scroll, base, cargs, result);
    }
};