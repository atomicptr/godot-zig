// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const AudioEffect = @import("audio_effect.zig").AudioEffect;

// method bindings
var mbind_get_format: ?*c_api.godot_method_bind = null;
var mbind_get_recording: ?*c_api.godot_method_bind = null;
var mbind_is_recording_active: ?*c_api.godot_method_bind = null;
var mbind_set_format: ?*c_api.godot_method_bind = null;
var mbind_set_recording_active: ?*c_api.godot_method_bind = null;
var mbind_audio_effect_record_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioEffectRecord = struct {
    const Self = @This();
    const BaseClass = AudioEffect;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_effect_record_constructor == null) {
            mbind_audio_effect_record_constructor = try api.createConstructor("AudioEffectRecord");
        }
        return api.createObject(Self, mbind_audio_effect_record_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getFormat(self: *const Self) !i32 {
        if (mbind_get_format == null) {
            mbind_get_format = try api.createMethod("AudioEffectRecord", "get_format");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_format, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getRecording(self: *const Self) !godot.AudioStreamSample {
        if (mbind_get_recording == null) {
            mbind_get_recording = try api.createMethod("AudioEffectRecord", "get_recording");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_recording, base, cargs, result);
        return @ptrCast(*godot.AudioStreamSample, @alignCast(@alignOf(&godot.AudioStreamSample), result)).*;
    }

    pub fn isRecordingActive(self: *const Self) !bool {
        if (mbind_is_recording_active == null) {
            mbind_is_recording_active = try api.createMethod("AudioEffectRecord", "is_recording_active");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_recording_active, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setFormat(self: *const Self, arg_format: i32) !void {
        if (mbind_set_format == null) {
            mbind_set_format = try api.createMethod("AudioEffectRecord", "set_format");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_format),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_format, base, cargs, result);
    }

    pub fn setRecordingActive(self: *const Self, arg_record: bool) !void {
        if (mbind_set_recording_active == null) {
            mbind_set_recording_active = try api.createMethod("AudioEffectRecord", "set_recording_active");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_record),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_recording_active, base, cargs, result);
    }
};