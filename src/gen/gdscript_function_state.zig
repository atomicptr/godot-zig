// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_is_valid: ?*c_api.godot_method_bind = null;
var mbind_resume: ?*c_api.godot_method_bind = null;
var mbind_gdscript_function_state_constructor: ?fn () ?*c_api.godot_object = null;

pub const GDScriptFunctionState = struct {
    const Self = @This();
    pub const BaseClass = godot.Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_gdscript_function_state_constructor == null) {
            mbind_gdscript_function_state_constructor = try api.createConstructor("GDScriptFunctionState");
        }
        return api.createObject(Self, mbind_gdscript_function_state_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn isValid(self: *const Self, arg_extended_check: bool) !bool {
        if (mbind_is_valid == null) {
            mbind_is_valid = try api.createMethod("GDScriptFunctionState", "is_valid");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_extended_check),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_valid, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn resumeFn(self: *const Self, arg_arg: *const godot.Variant) !godot.Variant {
        if (mbind_resume == null) {
            mbind_resume = try api.createMethod("GDScriptFunctionState", "resume");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_arg),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_resume, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }
};