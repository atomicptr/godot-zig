// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_get_available_packet_count: ?*c_api.godot_method_bind = null;
var mbind_get_encode_buffer_max_size: ?*c_api.godot_method_bind = null;
var mbind_get_packet: ?*c_api.godot_method_bind = null;
var mbind_get_packet_error: ?*c_api.godot_method_bind = null;
var mbind_get_var: ?*c_api.godot_method_bind = null;
var mbind_is_object_decoding_allowed: ?*c_api.godot_method_bind = null;
var mbind_put_packet: ?*c_api.godot_method_bind = null;
var mbind_put_var: ?*c_api.godot_method_bind = null;
var mbind_set_allow_object_decoding: ?*c_api.godot_method_bind = null;
var mbind_set_encode_buffer_max_size: ?*c_api.godot_method_bind = null;
var mbind_packet_peer_constructor: ?fn () ?*c_api.godot_object = null;

pub const PacketPeer = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_packet_peer_constructor == null) {
            mbind_packet_peer_constructor = try api.createConstructor("PacketPeer");
        }
        return api.createObject(Self, mbind_packet_peer_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAvailablePacketCount(self: *const Self) !i32 {
        if (mbind_get_available_packet_count == null) {
            mbind_get_available_packet_count = try api.createMethod("PacketPeer", "get_available_packet_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_available_packet_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getEncodeBufferMaxSize(self: *const Self) !i32 {
        if (mbind_get_encode_buffer_max_size == null) {
            mbind_get_encode_buffer_max_size = try api.createMethod("PacketPeer", "get_encode_buffer_max_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_encode_buffer_max_size, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPacket(self: *const Self) !godot.PoolByteArray {
        if (mbind_get_packet == null) {
            mbind_get_packet = try api.createMethod("PacketPeer", "get_packet");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_packet, base, cargs, result);
        return @ptrCast(*godot.PoolByteArray, @alignCast(@alignOf(&godot.PoolByteArray), result)).*;
    }

    pub fn getPacketError(self: *const Self) !i32 {
        if (mbind_get_packet_error == null) {
            mbind_get_packet_error = try api.createMethod("PacketPeer", "get_packet_error");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_packet_error, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getVar(self: *const Self, arg_allow_objects: bool) !godot.Variant {
        if (mbind_get_var == null) {
            mbind_get_var = try api.createMethod("PacketPeer", "get_var");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_allow_objects),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_var, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn isObjectDecodingAllowed(self: *const Self) !bool {
        if (mbind_is_object_decoding_allowed == null) {
            mbind_is_object_decoding_allowed = try api.createMethod("PacketPeer", "is_object_decoding_allowed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_object_decoding_allowed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn putPacket(self: *const Self, arg_buffer: *const godot.PoolByteArray) !i32 {
        if (mbind_put_packet == null) {
            mbind_put_packet = try api.createMethod("PacketPeer", "put_packet");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_buffer),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_put_packet, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn putVar(self: *const Self, arg_var: *const godot.Variant, arg_full_objects: bool) !i32 {
        if (mbind_put_var == null) {
            mbind_put_var = try api.createMethod("PacketPeer", "put_var");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_var),
            @ptrCast(*const anyopaque, *arg_full_objects),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_put_var, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setAllowObjectDecoding(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_allow_object_decoding == null) {
            mbind_set_allow_object_decoding = try api.createMethod("PacketPeer", "set_allow_object_decoding");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_allow_object_decoding, base, cargs, result);
    }

    pub fn setEncodeBufferMaxSize(self: *const Self, arg_max_size: i32) !void {
        if (mbind_set_encode_buffer_max_size == null) {
            mbind_set_encode_buffer_max_size = try api.createMethod("PacketPeer", "set_encode_buffer_max_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_max_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_encode_buffer_max_size, base, cargs, result);
    }
};