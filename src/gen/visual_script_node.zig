// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_get_default_input_value: ?*c_api.godot_method_bind = null;
var mbind_get_visual_script: ?*c_api.godot_method_bind = null;
var mbind_ports_changed_notify: ?*c_api.godot_method_bind = null;
var mbind_set_default_input_value: ?*c_api.godot_method_bind = null;
var mbind_visual_script_node_constructor: ?fn () ?*c_api.godot_object = null;

pub const VisualScriptNode = struct {
    const Self = @This();
    const BaseClass = Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_visual_script_node_constructor == null) {
            mbind_visual_script_node_constructor = try api.createConstructor("VisualScriptNode");
        }
        return api.createObject(Self, mbind_visual_script_node_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getDefaultInputValue(self: *const Self, arg_port_idx: i32) !godot.Variant {
        if (mbind_get_default_input_value == null) {
            mbind_get_default_input_value = try api.createMethod("VisualScriptNode", "get_default_input_value");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_port_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_default_input_value, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getVisualScript(self: *const Self) !godot.VisualScript {
        if (mbind_get_visual_script == null) {
            mbind_get_visual_script = try api.createMethod("VisualScriptNode", "get_visual_script");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_visual_script, base, cargs, result);
        return @ptrCast(*godot.VisualScript, @alignCast(@alignOf(&godot.VisualScript), result)).*;
    }

    pub fn portsChangedNotify(self: *const Self) !void {
        if (mbind_ports_changed_notify == null) {
            mbind_ports_changed_notify = try api.createMethod("VisualScriptNode", "ports_changed_notify");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_ports_changed_notify, base, cargs, result);
    }

    pub fn setDefaultInputValue(self: *const Self, arg_port_idx: i32, arg_value: *const godot.Variant) !void {
        if (mbind_set_default_input_value == null) {
            mbind_set_default_input_value = try api.createMethod("VisualScriptNode", "set_default_input_value");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_port_idx),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_default_input_value, base, cargs, result);
    }
};