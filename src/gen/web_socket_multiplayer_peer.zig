// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const NetworkedMultiplayerPeer = @import("networked_multiplayer_peer.zig").NetworkedMultiplayerPeer;

// method bindings
var mbind_get_peer: ?*c_api.godot_method_bind = null;
var mbind_set_buffers: ?*c_api.godot_method_bind = null;
var mbind_web_socket_multiplayer_peer_constructor: ?fn () ?*c_api.godot_object = null;

pub const WebSocketMultiplayerPeer = struct {
    const Self = @This();
    const BaseClass = NetworkedMultiplayerPeer;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_web_socket_multiplayer_peer_constructor == null) {
            mbind_web_socket_multiplayer_peer_constructor = try api.createConstructor("WebSocketMultiplayerPeer");
        }
        return api.createObject(Self, mbind_web_socket_multiplayer_peer_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getPeer(self: *const Self, arg_peer_id: i32) !godot.WebSocketPeer {
        if (mbind_get_peer == null) {
            mbind_get_peer = try api.createMethod("WebSocketMultiplayerPeer", "get_peer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_peer_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_peer, base, cargs, result);
        return @ptrCast(*godot.WebSocketPeer, @alignCast(@alignOf(&godot.WebSocketPeer), result)).*;
    }

    pub fn setBuffers(self: *const Self, arg_input_buffer_size_kb: i32, arg_input_max_packets: i32, arg_output_buffer_size_kb: i32, arg_output_max_packets: i32) !i32 {
        if (mbind_set_buffers == null) {
            mbind_set_buffers = try api.createMethod("WebSocketMultiplayerPeer", "set_buffers");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_input_buffer_size_kb),
            @ptrCast(*const anyopaque, *arg_input_max_packets),
            @ptrCast(*const anyopaque, *arg_output_buffer_size_kb),
            @ptrCast(*const anyopaque, *arg_output_max_packets),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_buffers, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }
};