// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Control = @import("control.zig").Control;

// method bindings
var mbind_is_exclusive: ?*c_api.godot_method_bind = null;
var mbind_popup: ?*c_api.godot_method_bind = null;
var mbind_popup_centered: ?*c_api.godot_method_bind = null;
var mbind_popup_centered_clamped: ?*c_api.godot_method_bind = null;
var mbind_popup_centered_minsize: ?*c_api.godot_method_bind = null;
var mbind_popup_centered_ratio: ?*c_api.godot_method_bind = null;
var mbind_set_as_minsize: ?*c_api.godot_method_bind = null;
var mbind_set_exclusive: ?*c_api.godot_method_bind = null;
var mbind_popup_constructor: ?fn () ?*c_api.godot_object = null;

pub const Popup = struct {
    const Self = @This();
    const BaseClass = Control;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_popup_constructor == null) {
            mbind_popup_constructor = try api.createConstructor("Popup");
        }
        return api.createObject(Self, mbind_popup_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn isExclusive(self: *const Self) !bool {
        if (mbind_is_exclusive == null) {
            mbind_is_exclusive = try api.createMethod("Popup", "is_exclusive");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_exclusive, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn popup(self: *const Self, arg_bounds: *const godot.Rect2) !void {
        if (mbind_popup == null) {
            mbind_popup = try api.createMethod("Popup", "popup");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_bounds),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_popup, base, cargs, result);
    }

    pub fn popupCentered(self: *const Self, arg_size: *const godot.Vector2) !void {
        if (mbind_popup_centered == null) {
            mbind_popup_centered = try api.createMethod("Popup", "popup_centered");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_popup_centered, base, cargs, result);
    }

    pub fn popupCenteredClamped(self: *const Self, arg_size: *const godot.Vector2, arg_fallback_ratio: f32) !void {
        if (mbind_popup_centered_clamped == null) {
            mbind_popup_centered_clamped = try api.createMethod("Popup", "popup_centered_clamped");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_size),
            @ptrCast(*const anyopaque, *arg_fallback_ratio),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_popup_centered_clamped, base, cargs, result);
    }

    pub fn popupCenteredMinsize(self: *const Self, arg_minsize: *const godot.Vector2) !void {
        if (mbind_popup_centered_minsize == null) {
            mbind_popup_centered_minsize = try api.createMethod("Popup", "popup_centered_minsize");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_minsize),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_popup_centered_minsize, base, cargs, result);
    }

    pub fn popupCenteredRatio(self: *const Self, arg_ratio: f32) !void {
        if (mbind_popup_centered_ratio == null) {
            mbind_popup_centered_ratio = try api.createMethod("Popup", "popup_centered_ratio");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_ratio),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_popup_centered_ratio, base, cargs, result);
    }

    pub fn setAsMinsize(self: *const Self) !void {
        if (mbind_set_as_minsize == null) {
            mbind_set_as_minsize = try api.createMethod("Popup", "set_as_minsize");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_as_minsize, base, cargs, result);
    }

    pub fn setExclusive(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_exclusive == null) {
            mbind_set_exclusive = try api.createMethod("Popup", "set_exclusive");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_exclusive, base, cargs, result);
    }
};