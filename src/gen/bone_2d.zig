// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node2D = @import("node_2d.zig").Node2D;

// method bindings
var mbind_apply_rest: ?*c_api.godot_method_bind = null;
var mbind_get_default_length: ?*c_api.godot_method_bind = null;
var mbind_get_index_in_skeleton: ?*c_api.godot_method_bind = null;
var mbind_get_rest: ?*c_api.godot_method_bind = null;
var mbind_get_skeleton_rest: ?*c_api.godot_method_bind = null;
var mbind_set_default_length: ?*c_api.godot_method_bind = null;
var mbind_set_rest: ?*c_api.godot_method_bind = null;
var mbind_bone_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const Bone2D = struct {
    const Self = @This();
    const BaseClass = Node2D;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_bone_2d_constructor == null) {
            mbind_bone_2d_constructor = try api.createConstructor("Bone2D");
        }
        return api.createObject(Self, mbind_bone_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn applyRest(self: *const Self) !void {
        if (mbind_apply_rest == null) {
            mbind_apply_rest = try api.createMethod("Bone2D", "apply_rest");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_apply_rest, base, cargs, result);
    }

    pub fn getDefaultLength(self: *const Self) !f32 {
        if (mbind_get_default_length == null) {
            mbind_get_default_length = try api.createMethod("Bone2D", "get_default_length");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_default_length, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getIndexInSkeleton(self: *const Self) !i32 {
        if (mbind_get_index_in_skeleton == null) {
            mbind_get_index_in_skeleton = try api.createMethod("Bone2D", "get_index_in_skeleton");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_index_in_skeleton, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getRest(self: *const Self) !godot.Transform2D {
        if (mbind_get_rest == null) {
            mbind_get_rest = try api.createMethod("Bone2D", "get_rest");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rest, base, cargs, result);
        return @ptrCast(*godot.Transform2D, @alignCast(@alignOf(&godot.Transform2D), result)).*;
    }

    pub fn getSkeletonRest(self: *const Self) !godot.Transform2D {
        if (mbind_get_skeleton_rest == null) {
            mbind_get_skeleton_rest = try api.createMethod("Bone2D", "get_skeleton_rest");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_skeleton_rest, base, cargs, result);
        return @ptrCast(*godot.Transform2D, @alignCast(@alignOf(&godot.Transform2D), result)).*;
    }

    pub fn setDefaultLength(self: *const Self, arg_default_length: f32) !void {
        if (mbind_set_default_length == null) {
            mbind_set_default_length = try api.createMethod("Bone2D", "set_default_length");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_default_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_default_length, base, cargs, result);
    }

    pub fn setRest(self: *const Self, arg_rest: *const godot.Transform2D) !void {
        if (mbind_set_rest == null) {
            mbind_set_rest = try api.createMethod("Bone2D", "set_rest");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_rest),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rest, base, cargs, result);
    }
};