// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node = @import("node.zig").Node;

// method bindings
var mbind_get_time_left: ?*c_api.godot_method_bind = null;
var mbind_get_timer_process_mode: ?*c_api.godot_method_bind = null;
var mbind_get_wait_time: ?*c_api.godot_method_bind = null;
var mbind_has_autostart: ?*c_api.godot_method_bind = null;
var mbind_is_one_shot: ?*c_api.godot_method_bind = null;
var mbind_is_paused: ?*c_api.godot_method_bind = null;
var mbind_is_stopped: ?*c_api.godot_method_bind = null;
var mbind_set_autostart: ?*c_api.godot_method_bind = null;
var mbind_set_one_shot: ?*c_api.godot_method_bind = null;
var mbind_set_paused: ?*c_api.godot_method_bind = null;
var mbind_set_timer_process_mode: ?*c_api.godot_method_bind = null;
var mbind_set_wait_time: ?*c_api.godot_method_bind = null;
var mbind_start: ?*c_api.godot_method_bind = null;
var mbind_stop: ?*c_api.godot_method_bind = null;
var mbind_timer_constructor: ?fn () ?*c_api.godot_object = null;

pub const Timer = struct {
    const Self = @This();
    const BaseClass = Node;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_timer_constructor == null) {
            mbind_timer_constructor = try api.createConstructor("Timer");
        }
        return api.createObject(Self, mbind_timer_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getTimeLeft(self: *const Self) !f32 {
        if (mbind_get_time_left == null) {
            mbind_get_time_left = try api.createMethod("Timer", "get_time_left");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_time_left, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTimerProcessMode(self: *const Self) !i32 {
        if (mbind_get_timer_process_mode == null) {
            mbind_get_timer_process_mode = try api.createMethod("Timer", "get_timer_process_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_timer_process_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getWaitTime(self: *const Self) !f32 {
        if (mbind_get_wait_time == null) {
            mbind_get_wait_time = try api.createMethod("Timer", "get_wait_time");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_wait_time, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn hasAutostart(self: *const Self) !bool {
        if (mbind_has_autostart == null) {
            mbind_has_autostart = try api.createMethod("Timer", "has_autostart");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_autostart, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isOneShot(self: *const Self) !bool {
        if (mbind_is_one_shot == null) {
            mbind_is_one_shot = try api.createMethod("Timer", "is_one_shot");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_one_shot, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isPaused(self: *const Self) !bool {
        if (mbind_is_paused == null) {
            mbind_is_paused = try api.createMethod("Timer", "is_paused");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_paused, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isStopped(self: *const Self) !bool {
        if (mbind_is_stopped == null) {
            mbind_is_stopped = try api.createMethod("Timer", "is_stopped");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_stopped, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setAutostart(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_autostart == null) {
            mbind_set_autostart = try api.createMethod("Timer", "set_autostart");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_autostart, base, cargs, result);
    }

    pub fn setOneShot(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_one_shot == null) {
            mbind_set_one_shot = try api.createMethod("Timer", "set_one_shot");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_one_shot, base, cargs, result);
    }

    pub fn setPaused(self: *const Self, arg_paused: bool) !void {
        if (mbind_set_paused == null) {
            mbind_set_paused = try api.createMethod("Timer", "set_paused");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_paused),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_paused, base, cargs, result);
    }

    pub fn setTimerProcessMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_timer_process_mode == null) {
            mbind_set_timer_process_mode = try api.createMethod("Timer", "set_timer_process_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_timer_process_mode, base, cargs, result);
    }

    pub fn setWaitTime(self: *const Self, arg_time_sec: f32) !void {
        if (mbind_set_wait_time == null) {
            mbind_set_wait_time = try api.createMethod("Timer", "set_wait_time");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_time_sec),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_wait_time, base, cargs, result);
    }

    pub fn start(self: *const Self, arg_time_sec: f32) !void {
        if (mbind_start == null) {
            mbind_start = try api.createMethod("Timer", "start");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_time_sec),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_start, base, cargs, result);
    }

    pub fn stop(self: *const Self) !void {
        if (mbind_stop == null) {
            mbind_stop = try api.createMethod("Timer", "stop");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_stop, base, cargs, result);
    }
};