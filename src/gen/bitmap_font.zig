// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Font = @import("font.zig").Font;

// method bindings
var mbind_add_char: ?*c_api.godot_method_bind = null;
var mbind_add_kerning_pair: ?*c_api.godot_method_bind = null;
var mbind_add_texture: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_create_from_fnt: ?*c_api.godot_method_bind = null;
var mbind_get_fallback: ?*c_api.godot_method_bind = null;
var mbind_get_kerning_pair: ?*c_api.godot_method_bind = null;
var mbind_get_texture: ?*c_api.godot_method_bind = null;
var mbind_get_texture_count: ?*c_api.godot_method_bind = null;
var mbind_set_ascent: ?*c_api.godot_method_bind = null;
var mbind_set_distance_field_hint: ?*c_api.godot_method_bind = null;
var mbind_set_fallback: ?*c_api.godot_method_bind = null;
var mbind_set_height: ?*c_api.godot_method_bind = null;
var mbind_bitmap_font_constructor: ?fn () ?*c_api.godot_object = null;

pub const BitmapFont = struct {
    const Self = @This();
    const BaseClass = Font;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_bitmap_font_constructor == null) {
            mbind_bitmap_font_constructor = try api.createConstructor("BitmapFont");
        }
        return api.createObject(Self, mbind_bitmap_font_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addChar(self: *const Self, arg_character: i32, arg_texture: i32, arg_rect: *const godot.Rect2, arg_align: *const godot.Vector2, arg_advance: f32) !void {
        if (mbind_add_char == null) {
            mbind_add_char = try api.createMethod("BitmapFont", "add_char");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_character),
            @ptrCast(*const anyopaque, *arg_texture),
            @ptrCast(*const anyopaque, arg_rect),
            @ptrCast(*const anyopaque, arg_align),
            @ptrCast(*const anyopaque, *arg_advance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_char, base, cargs, result);
    }

    pub fn addKerningPair(self: *const Self, arg_char_a: i32, arg_char_b: i32, arg_kerning: i32) !void {
        if (mbind_add_kerning_pair == null) {
            mbind_add_kerning_pair = try api.createMethod("BitmapFont", "add_kerning_pair");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_char_a),
            @ptrCast(*const anyopaque, *arg_char_b),
            @ptrCast(*const anyopaque, *arg_kerning),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_kerning_pair, base, cargs, result);
    }

    pub fn addTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_add_texture == null) {
            mbind_add_texture = try api.createMethod("BitmapFont", "add_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_texture, base, cargs, result);
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("BitmapFont", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn createFromFnt(self: *const Self, arg_path: *const godot.String) !i32 {
        if (mbind_create_from_fnt == null) {
            mbind_create_from_fnt = try api.createMethod("BitmapFont", "create_from_fnt");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_from_fnt, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFallback(self: *const Self) !godot.BitmapFont {
        if (mbind_get_fallback == null) {
            mbind_get_fallback = try api.createMethod("BitmapFont", "get_fallback");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fallback, base, cargs, result);
        return @ptrCast(*godot.BitmapFont, @alignCast(@alignOf(&godot.BitmapFont), result)).*;
    }

    pub fn getKerningPair(self: *const Self, arg_char_a: i32, arg_char_b: i32) !i32 {
        if (mbind_get_kerning_pair == null) {
            mbind_get_kerning_pair = try api.createMethod("BitmapFont", "get_kerning_pair");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_char_a),
            @ptrCast(*const anyopaque, *arg_char_b),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_kerning_pair, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTexture(self: *const Self, arg_idx: i32) !godot.Texture {
        if (mbind_get_texture == null) {
            mbind_get_texture = try api.createMethod("BitmapFont", "get_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getTextureCount(self: *const Self) !i32 {
        if (mbind_get_texture_count == null) {
            mbind_get_texture_count = try api.createMethod("BitmapFont", "get_texture_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_texture_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setAscent(self: *const Self, arg_px: f32) !void {
        if (mbind_set_ascent == null) {
            mbind_set_ascent = try api.createMethod("BitmapFont", "set_ascent");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_px),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ascent, base, cargs, result);
    }

    pub fn setDistanceFieldHint(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_distance_field_hint == null) {
            mbind_set_distance_field_hint = try api.createMethod("BitmapFont", "set_distance_field_hint");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_distance_field_hint, base, cargs, result);
    }

    pub fn setFallback(self: *const Self, arg_fallback: *const godot.BitmapFont) !void {
        if (mbind_set_fallback == null) {
            mbind_set_fallback = try api.createMethod("BitmapFont", "set_fallback");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_fallback),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fallback, base, cargs, result);
    }

    pub fn setHeight(self: *const Self, arg_px: f32) !void {
        if (mbind_set_height == null) {
            mbind_set_height = try api.createMethod("BitmapFont", "set_height");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_px),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_height, base, cargs, result);
    }
};