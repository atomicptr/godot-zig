// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_align: ?*c_api.godot_method_bind = null;
var mbind_clear_current: ?*c_api.godot_method_bind = null;
var mbind_force_update_scroll: ?*c_api.godot_method_bind = null;
var mbind_get_anchor_mode: ?*c_api.godot_method_bind = null;
var mbind_get_camera_position: ?*c_api.godot_method_bind = null;
var mbind_get_camera_screen_center: ?*c_api.godot_method_bind = null;
var mbind_get_custom_viewport: ?*c_api.godot_method_bind = null;
var mbind_get_drag_margin: ?*c_api.godot_method_bind = null;
var mbind_get_follow_smoothing: ?*c_api.godot_method_bind = null;
var mbind_get_h_offset: ?*c_api.godot_method_bind = null;
var mbind_get_limit: ?*c_api.godot_method_bind = null;
var mbind_get_offset: ?*c_api.godot_method_bind = null;
var mbind_get_process_mode: ?*c_api.godot_method_bind = null;
var mbind_get_v_offset: ?*c_api.godot_method_bind = null;
var mbind_get_zoom: ?*c_api.godot_method_bind = null;
var mbind_is_current: ?*c_api.godot_method_bind = null;
var mbind_is_follow_smoothing_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_h_drag_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_limit_drawing_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_limit_smoothing_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_margin_drawing_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_rotating: ?*c_api.godot_method_bind = null;
var mbind_is_screen_drawing_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_v_drag_enabled: ?*c_api.godot_method_bind = null;
var mbind_make_current: ?*c_api.godot_method_bind = null;
var mbind_reset_smoothing: ?*c_api.godot_method_bind = null;
var mbind_set_anchor_mode: ?*c_api.godot_method_bind = null;
var mbind_set_custom_viewport: ?*c_api.godot_method_bind = null;
var mbind_set_drag_margin: ?*c_api.godot_method_bind = null;
var mbind_set_enable_follow_smoothing: ?*c_api.godot_method_bind = null;
var mbind_set_follow_smoothing: ?*c_api.godot_method_bind = null;
var mbind_set_h_drag_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_h_offset: ?*c_api.godot_method_bind = null;
var mbind_set_limit: ?*c_api.godot_method_bind = null;
var mbind_set_limit_drawing_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_limit_smoothing_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_margin_drawing_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_offset: ?*c_api.godot_method_bind = null;
var mbind_set_process_mode: ?*c_api.godot_method_bind = null;
var mbind_set_rotating: ?*c_api.godot_method_bind = null;
var mbind_set_screen_drawing_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_v_drag_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_v_offset: ?*c_api.godot_method_bind = null;
var mbind_set_zoom: ?*c_api.godot_method_bind = null;
var mbind_camera_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const Camera2D = struct {
    const Self = @This();
    pub const BaseClass = godot.Node2D;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_camera_2d_constructor == null) {
            mbind_camera_2d_constructor = try api.createConstructor("Camera2D");
        }
        return api.createObject(Self, mbind_camera_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn alignFn(self: *const Self) !void {
        if (mbind_align == null) {
            mbind_align = try api.createMethod("Camera2D", "align");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_align, base, cargs, result);
    }

    pub fn clearCurrent(self: *const Self) !void {
        if (mbind_clear_current == null) {
            mbind_clear_current = try api.createMethod("Camera2D", "clear_current");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_current, base, cargs, result);
    }

    pub fn forceUpdateScroll(self: *const Self) !void {
        if (mbind_force_update_scroll == null) {
            mbind_force_update_scroll = try api.createMethod("Camera2D", "force_update_scroll");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_force_update_scroll, base, cargs, result);
    }

    pub fn getAnchorMode(self: *const Self) !i32 {
        if (mbind_get_anchor_mode == null) {
            mbind_get_anchor_mode = try api.createMethod("Camera2D", "get_anchor_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_anchor_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCameraPosition(self: *const Self) !godot.Vector2 {
        if (mbind_get_camera_position == null) {
            mbind_get_camera_position = try api.createMethod("Camera2D", "get_camera_position");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_camera_position, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getCameraScreenCenter(self: *const Self) !godot.Vector2 {
        if (mbind_get_camera_screen_center == null) {
            mbind_get_camera_screen_center = try api.createMethod("Camera2D", "get_camera_screen_center");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_camera_screen_center, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getCustomViewport(self: *const Self) !godot.Node {
        if (mbind_get_custom_viewport == null) {
            mbind_get_custom_viewport = try api.createMethod("Camera2D", "get_custom_viewport");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_custom_viewport, base, cargs, result);
        return @ptrCast(*godot.Node, @alignCast(@alignOf(&godot.Node), result)).*;
    }

    pub fn getDragMargin(self: *const Self, arg_margin: i32) !f32 {
        if (mbind_get_drag_margin == null) {
            mbind_get_drag_margin = try api.createMethod("Camera2D", "get_drag_margin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_drag_margin, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFollowSmoothing(self: *const Self) !f32 {
        if (mbind_get_follow_smoothing == null) {
            mbind_get_follow_smoothing = try api.createMethod("Camera2D", "get_follow_smoothing");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_follow_smoothing, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getHOffset(self: *const Self) !f32 {
        if (mbind_get_h_offset == null) {
            mbind_get_h_offset = try api.createMethod("Camera2D", "get_h_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_h_offset, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getLimit(self: *const Self, arg_margin: i32) !i32 {
        if (mbind_get_limit == null) {
            mbind_get_limit = try api.createMethod("Camera2D", "get_limit");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_limit, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getOffset(self: *const Self) !godot.Vector2 {
        if (mbind_get_offset == null) {
            mbind_get_offset = try api.createMethod("Camera2D", "get_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_offset, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getProcessMode(self: *const Self) !i32 {
        if (mbind_get_process_mode == null) {
            mbind_get_process_mode = try api.createMethod("Camera2D", "get_process_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_process_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getVOffset(self: *const Self) !f32 {
        if (mbind_get_v_offset == null) {
            mbind_get_v_offset = try api.createMethod("Camera2D", "get_v_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_v_offset, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getZoom(self: *const Self) !godot.Vector2 {
        if (mbind_get_zoom == null) {
            mbind_get_zoom = try api.createMethod("Camera2D", "get_zoom");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_zoom, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn isCurrent(self: *const Self) !bool {
        if (mbind_is_current == null) {
            mbind_is_current = try api.createMethod("Camera2D", "is_current");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_current, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFollowSmoothingEnabled(self: *const Self) !bool {
        if (mbind_is_follow_smoothing_enabled == null) {
            mbind_is_follow_smoothing_enabled = try api.createMethod("Camera2D", "is_follow_smoothing_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_follow_smoothing_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isHDragEnabled(self: *const Self) !bool {
        if (mbind_is_h_drag_enabled == null) {
            mbind_is_h_drag_enabled = try api.createMethod("Camera2D", "is_h_drag_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_h_drag_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isLimitDrawingEnabled(self: *const Self) !bool {
        if (mbind_is_limit_drawing_enabled == null) {
            mbind_is_limit_drawing_enabled = try api.createMethod("Camera2D", "is_limit_drawing_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_limit_drawing_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isLimitSmoothingEnabled(self: *const Self) !bool {
        if (mbind_is_limit_smoothing_enabled == null) {
            mbind_is_limit_smoothing_enabled = try api.createMethod("Camera2D", "is_limit_smoothing_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_limit_smoothing_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isMarginDrawingEnabled(self: *const Self) !bool {
        if (mbind_is_margin_drawing_enabled == null) {
            mbind_is_margin_drawing_enabled = try api.createMethod("Camera2D", "is_margin_drawing_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_margin_drawing_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isRotating(self: *const Self) !bool {
        if (mbind_is_rotating == null) {
            mbind_is_rotating = try api.createMethod("Camera2D", "is_rotating");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_rotating, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isScreenDrawingEnabled(self: *const Self) !bool {
        if (mbind_is_screen_drawing_enabled == null) {
            mbind_is_screen_drawing_enabled = try api.createMethod("Camera2D", "is_screen_drawing_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_screen_drawing_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isVDragEnabled(self: *const Self) !bool {
        if (mbind_is_v_drag_enabled == null) {
            mbind_is_v_drag_enabled = try api.createMethod("Camera2D", "is_v_drag_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_v_drag_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn makeCurrent(self: *const Self) !void {
        if (mbind_make_current == null) {
            mbind_make_current = try api.createMethod("Camera2D", "make_current");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_make_current, base, cargs, result);
    }

    pub fn resetSmoothing(self: *const Self) !void {
        if (mbind_reset_smoothing == null) {
            mbind_reset_smoothing = try api.createMethod("Camera2D", "reset_smoothing");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_reset_smoothing, base, cargs, result);
    }

    pub fn setAnchorMode(self: *const Self, arg_anchor_mode: i32) !void {
        if (mbind_set_anchor_mode == null) {
            mbind_set_anchor_mode = try api.createMethod("Camera2D", "set_anchor_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_anchor_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_anchor_mode, base, cargs, result);
    }

    pub fn setCustomViewport(self: *const Self, arg_viewport: *const godot.Node) !void {
        if (mbind_set_custom_viewport == null) {
            mbind_set_custom_viewport = try api.createMethod("Camera2D", "set_custom_viewport");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_viewport),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_viewport, base, cargs, result);
    }

    pub fn setDragMargin(self: *const Self, arg_margin: i32, arg_drag_margin: f32) !void {
        if (mbind_set_drag_margin == null) {
            mbind_set_drag_margin = try api.createMethod("Camera2D", "set_drag_margin");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
            @ptrCast(*const anyopaque, *arg_drag_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_drag_margin, base, cargs, result);
    }

    pub fn setEnableFollowSmoothing(self: *const Self, arg_follow_smoothing: bool) !void {
        if (mbind_set_enable_follow_smoothing == null) {
            mbind_set_enable_follow_smoothing = try api.createMethod("Camera2D", "set_enable_follow_smoothing");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_follow_smoothing),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_enable_follow_smoothing, base, cargs, result);
    }

    pub fn setFollowSmoothing(self: *const Self, arg_follow_smoothing: f32) !void {
        if (mbind_set_follow_smoothing == null) {
            mbind_set_follow_smoothing = try api.createMethod("Camera2D", "set_follow_smoothing");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_follow_smoothing),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_follow_smoothing, base, cargs, result);
    }

    pub fn setHDragEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_h_drag_enabled == null) {
            mbind_set_h_drag_enabled = try api.createMethod("Camera2D", "set_h_drag_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_h_drag_enabled, base, cargs, result);
    }

    pub fn setHOffset(self: *const Self, arg_ofs: f32) !void {
        if (mbind_set_h_offset == null) {
            mbind_set_h_offset = try api.createMethod("Camera2D", "set_h_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_ofs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_h_offset, base, cargs, result);
    }

    pub fn setLimit(self: *const Self, arg_margin: i32, arg_limit: i32) !void {
        if (mbind_set_limit == null) {
            mbind_set_limit = try api.createMethod("Camera2D", "set_limit");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
            @ptrCast(*const anyopaque, *arg_limit),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_limit, base, cargs, result);
    }

    pub fn setLimitDrawingEnabled(self: *const Self, arg_limit_drawing_enabled: bool) !void {
        if (mbind_set_limit_drawing_enabled == null) {
            mbind_set_limit_drawing_enabled = try api.createMethod("Camera2D", "set_limit_drawing_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_limit_drawing_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_limit_drawing_enabled, base, cargs, result);
    }

    pub fn setLimitSmoothingEnabled(self: *const Self, arg_limit_smoothing_enabled: bool) !void {
        if (mbind_set_limit_smoothing_enabled == null) {
            mbind_set_limit_smoothing_enabled = try api.createMethod("Camera2D", "set_limit_smoothing_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_limit_smoothing_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_limit_smoothing_enabled, base, cargs, result);
    }

    pub fn setMarginDrawingEnabled(self: *const Self, arg_margin_drawing_enabled: bool) !void {
        if (mbind_set_margin_drawing_enabled == null) {
            mbind_set_margin_drawing_enabled = try api.createMethod("Camera2D", "set_margin_drawing_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin_drawing_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_margin_drawing_enabled, base, cargs, result);
    }

    pub fn setOffset(self: *const Self, arg_offset: *const godot.Vector2) !void {
        if (mbind_set_offset == null) {
            mbind_set_offset = try api.createMethod("Camera2D", "set_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_offset, base, cargs, result);
    }

    pub fn setProcessMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_process_mode == null) {
            mbind_set_process_mode = try api.createMethod("Camera2D", "set_process_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_process_mode, base, cargs, result);
    }

    pub fn setRotating(self: *const Self, arg_rotating: bool) !void {
        if (mbind_set_rotating == null) {
            mbind_set_rotating = try api.createMethod("Camera2D", "set_rotating");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_rotating),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rotating, base, cargs, result);
    }

    pub fn setScreenDrawingEnabled(self: *const Self, arg_screen_drawing_enabled: bool) !void {
        if (mbind_set_screen_drawing_enabled == null) {
            mbind_set_screen_drawing_enabled = try api.createMethod("Camera2D", "set_screen_drawing_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_screen_drawing_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_screen_drawing_enabled, base, cargs, result);
    }

    pub fn setVDragEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_v_drag_enabled == null) {
            mbind_set_v_drag_enabled = try api.createMethod("Camera2D", "set_v_drag_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_v_drag_enabled, base, cargs, result);
    }

    pub fn setVOffset(self: *const Self, arg_ofs: f32) !void {
        if (mbind_set_v_offset == null) {
            mbind_set_v_offset = try api.createMethod("Camera2D", "set_v_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_ofs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_v_offset, base, cargs, result);
    }

    pub fn setZoom(self: *const Self, arg_zoom: *const godot.Vector2) !void {
        if (mbind_set_zoom == null) {
            mbind_set_zoom = try api.createMethod("Camera2D", "set_zoom");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_zoom),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_zoom, base, cargs, result);
    }
};