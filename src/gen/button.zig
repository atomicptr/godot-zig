// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const BaseButton = @import("base_button.zig").BaseButton;

// method bindings
var mbind_get_button_icon: ?*c_api.godot_method_bind = null;
var mbind_get_clip_text: ?*c_api.godot_method_bind = null;
var mbind_get_text: ?*c_api.godot_method_bind = null;
var mbind_get_text_align: ?*c_api.godot_method_bind = null;
var mbind_is_expand_icon: ?*c_api.godot_method_bind = null;
var mbind_is_flat: ?*c_api.godot_method_bind = null;
var mbind_set_button_icon: ?*c_api.godot_method_bind = null;
var mbind_set_clip_text: ?*c_api.godot_method_bind = null;
var mbind_set_expand_icon: ?*c_api.godot_method_bind = null;
var mbind_set_flat: ?*c_api.godot_method_bind = null;
var mbind_set_text: ?*c_api.godot_method_bind = null;
var mbind_set_text_align: ?*c_api.godot_method_bind = null;
var mbind_button_constructor: ?fn () ?*c_api.godot_object = null;

pub const Button = struct {
    const Self = @This();
    const BaseClass = BaseButton;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_button_constructor == null) {
            mbind_button_constructor = try api.createConstructor("Button");
        }
        return api.createObject(Self, mbind_button_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getButtonIcon(self: *const Self) !godot.Texture {
        if (mbind_get_button_icon == null) {
            mbind_get_button_icon = try api.createMethod("Button", "get_button_icon");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_button_icon, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getClipText(self: *const Self) !bool {
        if (mbind_get_clip_text == null) {
            mbind_get_clip_text = try api.createMethod("Button", "get_clip_text");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_clip_text, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getText(self: *const Self) !godot.String {
        if (mbind_get_text == null) {
            mbind_get_text = try api.createMethod("Button", "get_text");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_text, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getTextAlign(self: *const Self) !i32 {
        if (mbind_get_text_align == null) {
            mbind_get_text_align = try api.createMethod("Button", "get_text_align");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_text_align, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isExpandIcon(self: *const Self) !bool {
        if (mbind_is_expand_icon == null) {
            mbind_is_expand_icon = try api.createMethod("Button", "is_expand_icon");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_expand_icon, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFlat(self: *const Self) !bool {
        if (mbind_is_flat == null) {
            mbind_is_flat = try api.createMethod("Button", "is_flat");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_flat, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setButtonIcon(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_button_icon == null) {
            mbind_set_button_icon = try api.createMethod("Button", "set_button_icon");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_button_icon, base, cargs, result);
    }

    pub fn setClipText(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_clip_text == null) {
            mbind_set_clip_text = try api.createMethod("Button", "set_clip_text");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_clip_text, base, cargs, result);
    }

    pub fn setExpandIcon(self: *const Self, arg_arg0: bool) !void {
        if (mbind_set_expand_icon == null) {
            mbind_set_expand_icon = try api.createMethod("Button", "set_expand_icon");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_arg0),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_expand_icon, base, cargs, result);
    }

    pub fn setFlat(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_flat == null) {
            mbind_set_flat = try api.createMethod("Button", "set_flat");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_flat, base, cargs, result);
    }

    pub fn setText(self: *const Self, arg_text: *const godot.String) !void {
        if (mbind_set_text == null) {
            mbind_set_text = try api.createMethod("Button", "set_text");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_text),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_text, base, cargs, result);
    }

    pub fn setTextAlign(self: *const Self, arg_align: i32) !void {
        if (mbind_set_text_align == null) {
            mbind_set_text_align = try api.createMethod("Button", "set_text_align");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_align),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_text_align, base, cargs, result);
    }
};