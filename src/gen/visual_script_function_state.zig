// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_connect_to_signal: ?*c_api.godot_method_bind = null;
var mbind_is_valid: ?*c_api.godot_method_bind = null;
var mbind_resume: ?*c_api.godot_method_bind = null;
var mbind_visual_script_function_state_constructor: ?fn () ?*c_api.godot_object = null;

pub const VisualScriptFunctionState = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_visual_script_function_state_constructor == null) {
            mbind_visual_script_function_state_constructor = try api.createConstructor("VisualScriptFunctionState");
        }
        return api.createObject(Self, mbind_visual_script_function_state_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn connectToSignal(self: *const Self, arg_obj: *const godot.Object, arg_signals: *const godot.String, arg_args: *const godot.Array) !void {
        if (mbind_connect_to_signal == null) {
            mbind_connect_to_signal = try api.createMethod("VisualScriptFunctionState", "connect_to_signal");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_obj),
            @ptrCast(*const anyopaque, arg_signals),
            @ptrCast(*const anyopaque, arg_args),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_connect_to_signal, base, cargs, result);
    }

    pub fn isValid(self: *const Self) !bool {
        if (mbind_is_valid == null) {
            mbind_is_valid = try api.createMethod("VisualScriptFunctionState", "is_valid");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_valid, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn resumeFn(self: *const Self, arg_args: *const godot.Array) !godot.Variant {
        if (mbind_resume == null) {
            mbind_resume = try api.createMethod("VisualScriptFunctionState", "resume");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_args),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_resume, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }
};