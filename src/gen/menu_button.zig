// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_popup: ?*c_api.godot_method_bind = null;
var mbind_is_switch_on_hover: ?*c_api.godot_method_bind = null;
var mbind_set_disable_shortcuts: ?*c_api.godot_method_bind = null;
var mbind_set_switch_on_hover: ?*c_api.godot_method_bind = null;
var mbind_menu_button_constructor: ?fn () ?*c_api.godot_object = null;

pub const MenuButton = struct {
    const Self = @This();
    pub const BaseClass = godot.Button;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_menu_button_constructor == null) {
            mbind_menu_button_constructor = try api.createConstructor("MenuButton");
        }
        return api.createObject(Self, mbind_menu_button_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getPopup(self: *const Self) !godot.PopupMenu {
        if (mbind_get_popup == null) {
            mbind_get_popup = try api.createMethod("MenuButton", "get_popup");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_popup, base, cargs, result);
        return @ptrCast(*godot.PopupMenu, @alignCast(@alignOf(&godot.PopupMenu), result)).*;
    }

    pub fn isSwitchOnHover(self: *const Self) !bool {
        if (mbind_is_switch_on_hover == null) {
            mbind_is_switch_on_hover = try api.createMethod("MenuButton", "is_switch_on_hover");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_switch_on_hover, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setDisableShortcuts(self: *const Self, arg_disabled: bool) !void {
        if (mbind_set_disable_shortcuts == null) {
            mbind_set_disable_shortcuts = try api.createMethod("MenuButton", "set_disable_shortcuts");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_disabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disable_shortcuts, base, cargs, result);
    }

    pub fn setSwitchOnHover(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_switch_on_hover == null) {
            mbind_set_switch_on_hover = try api.createMethod("MenuButton", "set_switch_on_hover");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_switch_on_hover, base, cargs, result);
    }
};