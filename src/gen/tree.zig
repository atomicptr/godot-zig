// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Control = @import("control.zig").Control;

// method bindings
var mbind_are_column_titles_visible: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_create_item: ?*c_api.godot_method_bind = null;
var mbind_edit_selected: ?*c_api.godot_method_bind = null;
var mbind_ensure_cursor_is_visible: ?*c_api.godot_method_bind = null;
var mbind_get_allow_reselect: ?*c_api.godot_method_bind = null;
var mbind_get_allow_rmb_select: ?*c_api.godot_method_bind = null;
var mbind_get_column_at_position: ?*c_api.godot_method_bind = null;
var mbind_get_column_title: ?*c_api.godot_method_bind = null;
var mbind_get_column_width: ?*c_api.godot_method_bind = null;
var mbind_get_columns: ?*c_api.godot_method_bind = null;
var mbind_get_custom_popup_rect: ?*c_api.godot_method_bind = null;
var mbind_get_drop_mode_flags: ?*c_api.godot_method_bind = null;
var mbind_get_drop_section_at_position: ?*c_api.godot_method_bind = null;
var mbind_get_edited: ?*c_api.godot_method_bind = null;
var mbind_get_edited_column: ?*c_api.godot_method_bind = null;
var mbind_get_item_area_rect: ?*c_api.godot_method_bind = null;
var mbind_get_item_at_position: ?*c_api.godot_method_bind = null;
var mbind_get_next_selected: ?*c_api.godot_method_bind = null;
var mbind_get_pressed_button: ?*c_api.godot_method_bind = null;
var mbind_get_root: ?*c_api.godot_method_bind = null;
var mbind_get_scroll: ?*c_api.godot_method_bind = null;
var mbind_get_select_mode: ?*c_api.godot_method_bind = null;
var mbind_get_selected: ?*c_api.godot_method_bind = null;
var mbind_get_selected_column: ?*c_api.godot_method_bind = null;
var mbind_is_folding_hidden: ?*c_api.godot_method_bind = null;
var mbind_is_root_hidden: ?*c_api.godot_method_bind = null;
var mbind_scroll_to_item: ?*c_api.godot_method_bind = null;
var mbind_set_allow_reselect: ?*c_api.godot_method_bind = null;
var mbind_set_allow_rmb_select: ?*c_api.godot_method_bind = null;
var mbind_set_column_expand: ?*c_api.godot_method_bind = null;
var mbind_set_column_min_width: ?*c_api.godot_method_bind = null;
var mbind_set_column_title: ?*c_api.godot_method_bind = null;
var mbind_set_column_titles_visible: ?*c_api.godot_method_bind = null;
var mbind_set_columns: ?*c_api.godot_method_bind = null;
var mbind_set_drop_mode_flags: ?*c_api.godot_method_bind = null;
var mbind_set_hide_folding: ?*c_api.godot_method_bind = null;
var mbind_set_hide_root: ?*c_api.godot_method_bind = null;
var mbind_set_select_mode: ?*c_api.godot_method_bind = null;
var mbind_tree_constructor: ?fn () ?*c_api.godot_object = null;

pub const Tree = struct {
    const Self = @This();
    const BaseClass = Control;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_tree_constructor == null) {
            mbind_tree_constructor = try api.createConstructor("Tree");
        }
        return api.createObject(Self, mbind_tree_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn areColumnTitlesVisible(self: *const Self) !bool {
        if (mbind_are_column_titles_visible == null) {
            mbind_are_column_titles_visible = try api.createMethod("Tree", "are_column_titles_visible");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_are_column_titles_visible, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("Tree", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn createItem(self: *const Self, arg_parent: *const godot.Object, arg_idx: i32) !godot.TreeItem {
        if (mbind_create_item == null) {
            mbind_create_item = try api.createMethod("Tree", "create_item");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_parent),
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_item, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn editSelected(self: *const Self) !bool {
        if (mbind_edit_selected == null) {
            mbind_edit_selected = try api.createMethod("Tree", "edit_selected");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_edit_selected, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn ensureCursorIsVisible(self: *const Self) !void {
        if (mbind_ensure_cursor_is_visible == null) {
            mbind_ensure_cursor_is_visible = try api.createMethod("Tree", "ensure_cursor_is_visible");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_ensure_cursor_is_visible, base, cargs, result);
    }

    pub fn getAllowReselect(self: *const Self) !bool {
        if (mbind_get_allow_reselect == null) {
            mbind_get_allow_reselect = try api.createMethod("Tree", "get_allow_reselect");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_allow_reselect, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getAllowRmbSelect(self: *const Self) !bool {
        if (mbind_get_allow_rmb_select == null) {
            mbind_get_allow_rmb_select = try api.createMethod("Tree", "get_allow_rmb_select");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_allow_rmb_select, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getColumnAtPosition(self: *const Self, arg_position: *const godot.Vector2) !i32 {
        if (mbind_get_column_at_position == null) {
            mbind_get_column_at_position = try api.createMethod("Tree", "get_column_at_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_column_at_position, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getColumnTitle(self: *const Self, arg_column: i32) !godot.String {
        if (mbind_get_column_title == null) {
            mbind_get_column_title = try api.createMethod("Tree", "get_column_title");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_column_title, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getColumnWidth(self: *const Self, arg_column: i32) !i32 {
        if (mbind_get_column_width == null) {
            mbind_get_column_width = try api.createMethod("Tree", "get_column_width");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_column_width, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getColumns(self: *const Self) !i32 {
        if (mbind_get_columns == null) {
            mbind_get_columns = try api.createMethod("Tree", "get_columns");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_columns, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCustomPopupRect(self: *const Self) !godot.Rect2 {
        if (mbind_get_custom_popup_rect == null) {
            mbind_get_custom_popup_rect = try api.createMethod("Tree", "get_custom_popup_rect");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_custom_popup_rect, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn getDropModeFlags(self: *const Self) !i32 {
        if (mbind_get_drop_mode_flags == null) {
            mbind_get_drop_mode_flags = try api.createMethod("Tree", "get_drop_mode_flags");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_drop_mode_flags, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDropSectionAtPosition(self: *const Self, arg_position: *const godot.Vector2) !i32 {
        if (mbind_get_drop_section_at_position == null) {
            mbind_get_drop_section_at_position = try api.createMethod("Tree", "get_drop_section_at_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_drop_section_at_position, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getEdited(self: *const Self) !godot.TreeItem {
        if (mbind_get_edited == null) {
            mbind_get_edited = try api.createMethod("Tree", "get_edited");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_edited, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getEditedColumn(self: *const Self) !i32 {
        if (mbind_get_edited_column == null) {
            mbind_get_edited_column = try api.createMethod("Tree", "get_edited_column");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_edited_column, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getItemAreaRect(self: *const Self, arg_item: *const godot.Object, arg_column: i32) !godot.Rect2 {
        if (mbind_get_item_area_rect == null) {
            mbind_get_item_area_rect = try api.createMethod("Tree", "get_item_area_rect");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_item),
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_area_rect, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn getItemAtPosition(self: *const Self, arg_position: *const godot.Vector2) !godot.TreeItem {
        if (mbind_get_item_at_position == null) {
            mbind_get_item_at_position = try api.createMethod("Tree", "get_item_at_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_at_position, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getNextSelected(self: *const Self, arg_from: *const godot.Object) !godot.TreeItem {
        if (mbind_get_next_selected == null) {
            mbind_get_next_selected = try api.createMethod("Tree", "get_next_selected");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_from),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_next_selected, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getPressedButton(self: *const Self) !i32 {
        if (mbind_get_pressed_button == null) {
            mbind_get_pressed_button = try api.createMethod("Tree", "get_pressed_button");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pressed_button, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getRoot(self: *const Self) !godot.TreeItem {
        if (mbind_get_root == null) {
            mbind_get_root = try api.createMethod("Tree", "get_root");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_root, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getScroll(self: *const Self) !godot.Vector2 {
        if (mbind_get_scroll == null) {
            mbind_get_scroll = try api.createMethod("Tree", "get_scroll");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_scroll, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getSelectMode(self: *const Self) !i32 {
        if (mbind_get_select_mode == null) {
            mbind_get_select_mode = try api.createMethod("Tree", "get_select_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_select_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSelected(self: *const Self) !godot.TreeItem {
        if (mbind_get_selected == null) {
            mbind_get_selected = try api.createMethod("Tree", "get_selected");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_selected, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getSelectedColumn(self: *const Self) !i32 {
        if (mbind_get_selected_column == null) {
            mbind_get_selected_column = try api.createMethod("Tree", "get_selected_column");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_selected_column, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isFoldingHidden(self: *const Self) !bool {
        if (mbind_is_folding_hidden == null) {
            mbind_is_folding_hidden = try api.createMethod("Tree", "is_folding_hidden");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_folding_hidden, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isRootHidden(self: *const Self) !bool {
        if (mbind_is_root_hidden == null) {
            mbind_is_root_hidden = try api.createMethod("Tree", "is_root_hidden");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_root_hidden, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn scrollToItem(self: *const Self, arg_item: *const godot.Object) !void {
        if (mbind_scroll_to_item == null) {
            mbind_scroll_to_item = try api.createMethod("Tree", "scroll_to_item");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_item),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_scroll_to_item, base, cargs, result);
    }

    pub fn setAllowReselect(self: *const Self, arg_allow: bool) !void {
        if (mbind_set_allow_reselect == null) {
            mbind_set_allow_reselect = try api.createMethod("Tree", "set_allow_reselect");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_allow),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_allow_reselect, base, cargs, result);
    }

    pub fn setAllowRmbSelect(self: *const Self, arg_allow: bool) !void {
        if (mbind_set_allow_rmb_select == null) {
            mbind_set_allow_rmb_select = try api.createMethod("Tree", "set_allow_rmb_select");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_allow),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_allow_rmb_select, base, cargs, result);
    }

    pub fn setColumnExpand(self: *const Self, arg_column: i32, arg_expand: bool) !void {
        if (mbind_set_column_expand == null) {
            mbind_set_column_expand = try api.createMethod("Tree", "set_column_expand");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_expand),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_column_expand, base, cargs, result);
    }

    pub fn setColumnMinWidth(self: *const Self, arg_column: i32, arg_min_width: i32) !void {
        if (mbind_set_column_min_width == null) {
            mbind_set_column_min_width = try api.createMethod("Tree", "set_column_min_width");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_min_width),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_column_min_width, base, cargs, result);
    }

    pub fn setColumnTitle(self: *const Self, arg_column: i32, arg_title: *const godot.String) !void {
        if (mbind_set_column_title == null) {
            mbind_set_column_title = try api.createMethod("Tree", "set_column_title");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_title),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_column_title, base, cargs, result);
    }

    pub fn setColumnTitlesVisible(self: *const Self, arg_visible: bool) !void {
        if (mbind_set_column_titles_visible == null) {
            mbind_set_column_titles_visible = try api.createMethod("Tree", "set_column_titles_visible");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_visible),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_column_titles_visible, base, cargs, result);
    }

    pub fn setColumns(self: *const Self, arg_amount: i32) !void {
        if (mbind_set_columns == null) {
            mbind_set_columns = try api.createMethod("Tree", "set_columns");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_columns, base, cargs, result);
    }

    pub fn setDropModeFlags(self: *const Self, arg_flags: i32) !void {
        if (mbind_set_drop_mode_flags == null) {
            mbind_set_drop_mode_flags = try api.createMethod("Tree", "set_drop_mode_flags");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flags),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_drop_mode_flags, base, cargs, result);
    }

    pub fn setHideFolding(self: *const Self, arg_hide: bool) !void {
        if (mbind_set_hide_folding == null) {
            mbind_set_hide_folding = try api.createMethod("Tree", "set_hide_folding");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_hide),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_hide_folding, base, cargs, result);
    }

    pub fn setHideRoot(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_hide_root == null) {
            mbind_set_hide_root = try api.createMethod("Tree", "set_hide_root");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_hide_root, base, cargs, result);
    }

    pub fn setSelectMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_select_mode == null) {
            mbind_set_select_mode = try api.createMethod("Tree", "set_select_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_select_mode, base, cargs, result);
    }
};