// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_get_tracked_linear_velocity: ?*c_api.godot_method_bind = null;
var mbind_is_tracking_physics_step: ?*c_api.godot_method_bind = null;
var mbind_reset: ?*c_api.godot_method_bind = null;
var mbind_set_track_physics_step: ?*c_api.godot_method_bind = null;
var mbind_update_position: ?*c_api.godot_method_bind = null;
var mbind_spatial_velocity_tracker_constructor: ?fn () ?*c_api.godot_object = null;

pub const SpatialVelocityTracker = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_spatial_velocity_tracker_constructor == null) {
            mbind_spatial_velocity_tracker_constructor = try api.createConstructor("SpatialVelocityTracker");
        }
        return api.createObject(Self, mbind_spatial_velocity_tracker_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getTrackedLinearVelocity(self: *const Self) !godot.Vector3 {
        if (mbind_get_tracked_linear_velocity == null) {
            mbind_get_tracked_linear_velocity = try api.createMethod("SpatialVelocityTracker", "get_tracked_linear_velocity");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tracked_linear_velocity, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn isTrackingPhysicsStep(self: *const Self) !bool {
        if (mbind_is_tracking_physics_step == null) {
            mbind_is_tracking_physics_step = try api.createMethod("SpatialVelocityTracker", "is_tracking_physics_step");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_tracking_physics_step, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn reset(self: *const Self, arg_position: *const godot.Vector3) !void {
        if (mbind_reset == null) {
            mbind_reset = try api.createMethod("SpatialVelocityTracker", "reset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_reset, base, cargs, result);
    }

    pub fn setTrackPhysicsStep(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_track_physics_step == null) {
            mbind_set_track_physics_step = try api.createMethod("SpatialVelocityTracker", "set_track_physics_step");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_track_physics_step, base, cargs, result);
    }

    pub fn updatePosition(self: *const Self, arg_position: *const godot.Vector3) !void {
        if (mbind_update_position == null) {
            mbind_update_position = try api.createMethod("SpatialVelocityTracker", "update_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_update_position, base, cargs, result);
    }
};