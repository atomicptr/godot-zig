// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_get_camera: ?*c_api.godot_method_bind = null;
var mbind_get_children: ?*c_api.godot_method_bind = null;
var mbind_get_height: ?*c_api.godot_method_bind = null;
var mbind_get_joint: ?*c_api.godot_method_bind = null;
var mbind_get_light: ?*c_api.godot_method_bind = null;
var mbind_get_mesh: ?*c_api.godot_method_bind = null;
var mbind_get_parent: ?*c_api.godot_method_bind = null;
var mbind_get_rotation: ?*c_api.godot_method_bind = null;
var mbind_get_scale: ?*c_api.godot_method_bind = null;
var mbind_get_skeleton: ?*c_api.godot_method_bind = null;
var mbind_get_skin: ?*c_api.godot_method_bind = null;
var mbind_get_translation: ?*c_api.godot_method_bind = null;
var mbind_get_xform: ?*c_api.godot_method_bind = null;
var mbind_set_camera: ?*c_api.godot_method_bind = null;
var mbind_set_children: ?*c_api.godot_method_bind = null;
var mbind_set_height: ?*c_api.godot_method_bind = null;
var mbind_set_joint: ?*c_api.godot_method_bind = null;
var mbind_set_light: ?*c_api.godot_method_bind = null;
var mbind_set_mesh: ?*c_api.godot_method_bind = null;
var mbind_set_parent: ?*c_api.godot_method_bind = null;
var mbind_set_rotation: ?*c_api.godot_method_bind = null;
var mbind_set_scale: ?*c_api.godot_method_bind = null;
var mbind_set_skeleton: ?*c_api.godot_method_bind = null;
var mbind_set_skin: ?*c_api.godot_method_bind = null;
var mbind_set_translation: ?*c_api.godot_method_bind = null;
var mbind_set_xform: ?*c_api.godot_method_bind = null;
var mbind_gltfnode_constructor: ?fn () ?*c_api.godot_object = null;

pub const GLTFNode = struct {
    const Self = @This();
    const BaseClass = Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_gltfnode_constructor == null) {
            mbind_gltfnode_constructor = try api.createConstructor("GLTFNode");
        }
        return api.createObject(Self, mbind_gltfnode_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getCamera(self: *const Self) !i32 {
        if (mbind_get_camera == null) {
            mbind_get_camera = try api.createMethod("GLTFNode", "get_camera");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_camera, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getChildren(self: *const Self) !godot.PoolIntArray {
        if (mbind_get_children == null) {
            mbind_get_children = try api.createMethod("GLTFNode", "get_children");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_children, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getHeight(self: *const Self) !i32 {
        if (mbind_get_height == null) {
            mbind_get_height = try api.createMethod("GLTFNode", "get_height");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_height, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getJoint(self: *const Self) !bool {
        if (mbind_get_joint == null) {
            mbind_get_joint = try api.createMethod("GLTFNode", "get_joint");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joint, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getLight(self: *const Self) !i32 {
        if (mbind_get_light == null) {
            mbind_get_light = try api.createMethod("GLTFNode", "get_light");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_light, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMesh(self: *const Self) !i32 {
        if (mbind_get_mesh == null) {
            mbind_get_mesh = try api.createMethod("GLTFNode", "get_mesh");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mesh, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getParent(self: *const Self) !i32 {
        if (mbind_get_parent == null) {
            mbind_get_parent = try api.createMethod("GLTFNode", "get_parent");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_parent, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getRotation(self: *const Self) !godot.Quat {
        if (mbind_get_rotation == null) {
            mbind_get_rotation = try api.createMethod("GLTFNode", "get_rotation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rotation, base, cargs, result);
        return @ptrCast(*godot.Quat, @alignCast(@alignOf(&godot.Quat), result)).*;
    }

    pub fn getScale(self: *const Self) !godot.Vector3 {
        if (mbind_get_scale == null) {
            mbind_get_scale = try api.createMethod("GLTFNode", "get_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_scale, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getSkeleton(self: *const Self) !i32 {
        if (mbind_get_skeleton == null) {
            mbind_get_skeleton = try api.createMethod("GLTFNode", "get_skeleton");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_skeleton, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSkin(self: *const Self) !i32 {
        if (mbind_get_skin == null) {
            mbind_get_skin = try api.createMethod("GLTFNode", "get_skin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_skin, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTranslation(self: *const Self) !godot.Vector3 {
        if (mbind_get_translation == null) {
            mbind_get_translation = try api.createMethod("GLTFNode", "get_translation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_translation, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getXform(self: *const Self) !godot.Transform {
        if (mbind_get_xform == null) {
            mbind_get_xform = try api.createMethod("GLTFNode", "get_xform");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_xform, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn setCamera(self: *const Self, arg_camera: i32) !void {
        if (mbind_set_camera == null) {
            mbind_set_camera = try api.createMethod("GLTFNode", "set_camera");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_camera),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_camera, base, cargs, result);
    }

    pub fn setChildren(self: *const Self, arg_children: *const godot.PoolIntArray) !void {
        if (mbind_set_children == null) {
            mbind_set_children = try api.createMethod("GLTFNode", "set_children");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_children),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_children, base, cargs, result);
    }

    pub fn setHeight(self: *const Self, arg_height: i32) !void {
        if (mbind_set_height == null) {
            mbind_set_height = try api.createMethod("GLTFNode", "set_height");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_height),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_height, base, cargs, result);
    }

    pub fn setJoint(self: *const Self, arg_joint: bool) !void {
        if (mbind_set_joint == null) {
            mbind_set_joint = try api.createMethod("GLTFNode", "set_joint");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_joint),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_joint, base, cargs, result);
    }

    pub fn setLight(self: *const Self, arg_light: i32) !void {
        if (mbind_set_light == null) {
            mbind_set_light = try api.createMethod("GLTFNode", "set_light");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_light),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_light, base, cargs, result);
    }

    pub fn setMesh(self: *const Self, arg_mesh: i32) !void {
        if (mbind_set_mesh == null) {
            mbind_set_mesh = try api.createMethod("GLTFNode", "set_mesh");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mesh),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mesh, base, cargs, result);
    }

    pub fn setParent(self: *const Self, arg_parent: i32) !void {
        if (mbind_set_parent == null) {
            mbind_set_parent = try api.createMethod("GLTFNode", "set_parent");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_parent),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_parent, base, cargs, result);
    }

    pub fn setRotation(self: *const Self, arg_rotation: *const godot.Quat) !void {
        if (mbind_set_rotation == null) {
            mbind_set_rotation = try api.createMethod("GLTFNode", "set_rotation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_rotation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rotation, base, cargs, result);
    }

    pub fn setScale(self: *const Self, arg_scale: *const godot.Vector3) !void {
        if (mbind_set_scale == null) {
            mbind_set_scale = try api.createMethod("GLTFNode", "set_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_scale, base, cargs, result);
    }

    pub fn setSkeleton(self: *const Self, arg_skeleton: i32) !void {
        if (mbind_set_skeleton == null) {
            mbind_set_skeleton = try api.createMethod("GLTFNode", "set_skeleton");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_skeleton),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_skeleton, base, cargs, result);
    }

    pub fn setSkin(self: *const Self, arg_skin: i32) !void {
        if (mbind_set_skin == null) {
            mbind_set_skin = try api.createMethod("GLTFNode", "set_skin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_skin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_skin, base, cargs, result);
    }

    pub fn setTranslation(self: *const Self, arg_translation: *const godot.Vector3) !void {
        if (mbind_set_translation == null) {
            mbind_set_translation = try api.createMethod("GLTFNode", "set_translation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_translation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_translation, base, cargs, result);
    }

    pub fn setXform(self: *const Self, arg_xform: *const godot.Transform) !void {
        if (mbind_set_xform == null) {
            mbind_set_xform = try api.createMethod("GLTFNode", "set_xform");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_xform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_xform, base, cargs, result);
    }
};