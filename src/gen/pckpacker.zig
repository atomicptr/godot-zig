// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_add_file: ?*c_api.godot_method_bind = null;
var mbind_flush: ?*c_api.godot_method_bind = null;
var mbind_pck_start: ?*c_api.godot_method_bind = null;
var mbind_pckpacker_constructor: ?fn () ?*c_api.godot_object = null;

pub const PCKPacker = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_pckpacker_constructor == null) {
            mbind_pckpacker_constructor = try api.createConstructor("PCKPacker");
        }
        return api.createObject(Self, mbind_pckpacker_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addFile(self: *const Self, arg_pck_path: *const godot.String, arg_source_path: *const godot.String) !i32 {
        if (mbind_add_file == null) {
            mbind_add_file = try api.createMethod("PCKPacker", "add_file");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_pck_path),
            @ptrCast(*const anyopaque, arg_source_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_file, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn flush(self: *const Self, arg_verbose: bool) !i32 {
        if (mbind_flush == null) {
            mbind_flush = try api.createMethod("PCKPacker", "flush");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_verbose),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_flush, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn pckStart(self: *const Self, arg_pck_name: *const godot.String, arg_alignment: i32) !i32 {
        if (mbind_pck_start == null) {
            mbind_pck_start = try api.createMethod("PCKPacker", "pck_start");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_pck_name),
            @ptrCast(*const anyopaque, *arg_alignment),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_pck_start, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }
};