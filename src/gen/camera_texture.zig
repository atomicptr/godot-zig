// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_camera_active: ?*c_api.godot_method_bind = null;
var mbind_get_camera_feed_id: ?*c_api.godot_method_bind = null;
var mbind_get_which_feed: ?*c_api.godot_method_bind = null;
var mbind_set_camera_active: ?*c_api.godot_method_bind = null;
var mbind_set_camera_feed_id: ?*c_api.godot_method_bind = null;
var mbind_set_which_feed: ?*c_api.godot_method_bind = null;
var mbind_camera_texture_constructor: ?fn () ?*c_api.godot_object = null;

pub const CameraTexture = struct {
    const Self = @This();
    pub const BaseClass = godot.Texture;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_camera_texture_constructor == null) {
            mbind_camera_texture_constructor = try api.createConstructor("CameraTexture");
        }
        return api.createObject(Self, mbind_camera_texture_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getCameraActive(self: *const Self) !bool {
        if (mbind_get_camera_active == null) {
            mbind_get_camera_active = try api.createMethod("CameraTexture", "get_camera_active");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_camera_active, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getCameraFeedId(self: *const Self) !i32 {
        if (mbind_get_camera_feed_id == null) {
            mbind_get_camera_feed_id = try api.createMethod("CameraTexture", "get_camera_feed_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_camera_feed_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getWhichFeed(self: *const Self) !i32 {
        if (mbind_get_which_feed == null) {
            mbind_get_which_feed = try api.createMethod("CameraTexture", "get_which_feed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_which_feed, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setCameraActive(self: *const Self, arg_active: bool) !void {
        if (mbind_set_camera_active == null) {
            mbind_set_camera_active = try api.createMethod("CameraTexture", "set_camera_active");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_active),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_camera_active, base, cargs, result);
    }

    pub fn setCameraFeedId(self: *const Self, arg_feed_id: i32) !void {
        if (mbind_set_camera_feed_id == null) {
            mbind_set_camera_feed_id = try api.createMethod("CameraTexture", "set_camera_feed_id");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_feed_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_camera_feed_id, base, cargs, result);
    }

    pub fn setWhichFeed(self: *const Self, arg_which_feed: i32) !void {
        if (mbind_set_which_feed == null) {
            mbind_set_which_feed = try api.createMethod("CameraTexture", "set_which_feed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_which_feed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_which_feed, base, cargs, result);
    }
};