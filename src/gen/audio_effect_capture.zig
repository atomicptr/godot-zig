// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const AudioEffect = @import("audio_effect.zig").AudioEffect;

// method bindings
var mbind_can_get_buffer: ?*c_api.godot_method_bind = null;
var mbind_clear_buffer: ?*c_api.godot_method_bind = null;
var mbind_get_buffer: ?*c_api.godot_method_bind = null;
var mbind_get_buffer_length: ?*c_api.godot_method_bind = null;
var mbind_get_buffer_length_frames: ?*c_api.godot_method_bind = null;
var mbind_get_discarded_frames: ?*c_api.godot_method_bind = null;
var mbind_get_frames_available: ?*c_api.godot_method_bind = null;
var mbind_get_pushed_frames: ?*c_api.godot_method_bind = null;
var mbind_set_buffer_length: ?*c_api.godot_method_bind = null;
var mbind_audio_effect_capture_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioEffectCapture = struct {
    const Self = @This();
    const BaseClass = AudioEffect;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_effect_capture_constructor == null) {
            mbind_audio_effect_capture_constructor = try api.createConstructor("AudioEffectCapture");
        }
        return api.createObject(Self, mbind_audio_effect_capture_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn canGetBuffer(self: *const Self, arg_frames: i32) !bool {
        if (mbind_can_get_buffer == null) {
            mbind_can_get_buffer = try api.createMethod("AudioEffectCapture", "can_get_buffer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_frames),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_can_get_buffer, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn clearBuffer(self: *const Self) !void {
        if (mbind_clear_buffer == null) {
            mbind_clear_buffer = try api.createMethod("AudioEffectCapture", "clear_buffer");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_buffer, base, cargs, result);
    }

    pub fn getBuffer(self: *const Self, arg_frames: i32) !godot.PoolVector2Array {
        if (mbind_get_buffer == null) {
            mbind_get_buffer = try api.createMethod("AudioEffectCapture", "get_buffer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_frames),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_buffer, base, cargs, result);
        return @ptrCast(*godot.PoolVector2Array, @alignCast(@alignOf(&godot.PoolVector2Array), result)).*;
    }

    pub fn getBufferLength(self: *const Self) !f32 {
        if (mbind_get_buffer_length == null) {
            mbind_get_buffer_length = try api.createMethod("AudioEffectCapture", "get_buffer_length");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_buffer_length, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getBufferLengthFrames(self: *const Self) !i32 {
        if (mbind_get_buffer_length_frames == null) {
            mbind_get_buffer_length_frames = try api.createMethod("AudioEffectCapture", "get_buffer_length_frames");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_buffer_length_frames, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDiscardedFrames(self: *const Self) !i32 {
        if (mbind_get_discarded_frames == null) {
            mbind_get_discarded_frames = try api.createMethod("AudioEffectCapture", "get_discarded_frames");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_discarded_frames, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFramesAvailable(self: *const Self) !i32 {
        if (mbind_get_frames_available == null) {
            mbind_get_frames_available = try api.createMethod("AudioEffectCapture", "get_frames_available");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_frames_available, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPushedFrames(self: *const Self) !i32 {
        if (mbind_get_pushed_frames == null) {
            mbind_get_pushed_frames = try api.createMethod("AudioEffectCapture", "get_pushed_frames");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pushed_frames, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setBufferLength(self: *const Self, arg_buffer_length_seconds: f32) !void {
        if (mbind_set_buffer_length == null) {
            mbind_set_buffer_length = try api.createMethod("AudioEffectCapture", "set_buffer_length");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_buffer_length_seconds),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_buffer_length, base, cargs, result);
    }
};