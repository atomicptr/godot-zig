// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_get_fov_size: ?*c_api.godot_method_bind = null;
var mbind_get_perspective: ?*c_api.godot_method_bind = null;
var mbind_get_zfar: ?*c_api.godot_method_bind = null;
var mbind_get_znear: ?*c_api.godot_method_bind = null;
var mbind_set_fov_size: ?*c_api.godot_method_bind = null;
var mbind_set_perspective: ?*c_api.godot_method_bind = null;
var mbind_set_zfar: ?*c_api.godot_method_bind = null;
var mbind_set_znear: ?*c_api.godot_method_bind = null;
var mbind_gltfcamera_constructor: ?fn () ?*c_api.godot_object = null;

pub const GLTFCamera = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_gltfcamera_constructor == null) {
            mbind_gltfcamera_constructor = try api.createConstructor("GLTFCamera");
        }
        return api.createObject(Self, mbind_gltfcamera_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getFovSize(self: *const Self) !f32 {
        if (mbind_get_fov_size == null) {
            mbind_get_fov_size = try api.createMethod("GLTFCamera", "get_fov_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fov_size, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getPerspective(self: *const Self) !bool {
        if (mbind_get_perspective == null) {
            mbind_get_perspective = try api.createMethod("GLTFCamera", "get_perspective");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_perspective, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getZfar(self: *const Self) !f32 {
        if (mbind_get_zfar == null) {
            mbind_get_zfar = try api.createMethod("GLTFCamera", "get_zfar");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_zfar, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getZnear(self: *const Self) !f32 {
        if (mbind_get_znear == null) {
            mbind_get_znear = try api.createMethod("GLTFCamera", "get_znear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_znear, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn setFovSize(self: *const Self, arg_fov_size: f32) !void {
        if (mbind_set_fov_size == null) {
            mbind_set_fov_size = try api.createMethod("GLTFCamera", "set_fov_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_fov_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fov_size, base, cargs, result);
    }

    pub fn setPerspective(self: *const Self, arg_perspective: bool) !void {
        if (mbind_set_perspective == null) {
            mbind_set_perspective = try api.createMethod("GLTFCamera", "set_perspective");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_perspective),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_perspective, base, cargs, result);
    }

    pub fn setZfar(self: *const Self, arg_zfar: f32) !void {
        if (mbind_set_zfar == null) {
            mbind_set_zfar = try api.createMethod("GLTFCamera", "set_zfar");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_zfar),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_zfar, base, cargs, result);
    }

    pub fn setZnear(self: *const Self, arg_znear: f32) !void {
        if (mbind_set_znear == null) {
            mbind_set_znear = try api.createMethod("GLTFCamera", "set_znear");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_znear),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_znear, base, cargs, result);
    }
};