// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_buffer: ?*c_api.godot_method_bind = null;
var mbind_get_byte_length: ?*c_api.godot_method_bind = null;
var mbind_get_byte_offset: ?*c_api.godot_method_bind = null;
var mbind_get_byte_stride: ?*c_api.godot_method_bind = null;
var mbind_get_indices: ?*c_api.godot_method_bind = null;
var mbind_set_buffer: ?*c_api.godot_method_bind = null;
var mbind_set_byte_length: ?*c_api.godot_method_bind = null;
var mbind_set_byte_offset: ?*c_api.godot_method_bind = null;
var mbind_set_byte_stride: ?*c_api.godot_method_bind = null;
var mbind_set_indices: ?*c_api.godot_method_bind = null;
var mbind_gltfbuffer_view_constructor: ?fn () ?*c_api.godot_object = null;

pub const GLTFBufferView = struct {
    const Self = @This();
    pub const BaseClass = godot.Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_gltfbuffer_view_constructor == null) {
            mbind_gltfbuffer_view_constructor = try api.createConstructor("GLTFBufferView");
        }
        return api.createObject(Self, mbind_gltfbuffer_view_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBuffer(self: *const Self) !i32 {
        if (mbind_get_buffer == null) {
            mbind_get_buffer = try api.createMethod("GLTFBufferView", "get_buffer");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_buffer, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getByteLength(self: *const Self) !i32 {
        if (mbind_get_byte_length == null) {
            mbind_get_byte_length = try api.createMethod("GLTFBufferView", "get_byte_length");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_byte_length, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getByteOffset(self: *const Self) !i32 {
        if (mbind_get_byte_offset == null) {
            mbind_get_byte_offset = try api.createMethod("GLTFBufferView", "get_byte_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_byte_offset, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getByteStride(self: *const Self) !i32 {
        if (mbind_get_byte_stride == null) {
            mbind_get_byte_stride = try api.createMethod("GLTFBufferView", "get_byte_stride");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_byte_stride, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getIndices(self: *const Self) !bool {
        if (mbind_get_indices == null) {
            mbind_get_indices = try api.createMethod("GLTFBufferView", "get_indices");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_indices, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setBuffer(self: *const Self, arg_buffer: i32) !void {
        if (mbind_set_buffer == null) {
            mbind_set_buffer = try api.createMethod("GLTFBufferView", "set_buffer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_buffer),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_buffer, base, cargs, result);
    }

    pub fn setByteLength(self: *const Self, arg_byte_length: i32) !void {
        if (mbind_set_byte_length == null) {
            mbind_set_byte_length = try api.createMethod("GLTFBufferView", "set_byte_length");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_byte_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_byte_length, base, cargs, result);
    }

    pub fn setByteOffset(self: *const Self, arg_byte_offset: i32) !void {
        if (mbind_set_byte_offset == null) {
            mbind_set_byte_offset = try api.createMethod("GLTFBufferView", "set_byte_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_byte_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_byte_offset, base, cargs, result);
    }

    pub fn setByteStride(self: *const Self, arg_byte_stride: i32) !void {
        if (mbind_set_byte_stride == null) {
            mbind_set_byte_stride = try api.createMethod("GLTFBufferView", "set_byte_stride");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_byte_stride),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_byte_stride, base, cargs, result);
    }

    pub fn setIndices(self: *const Self, arg_indices: bool) !void {
        if (mbind_set_indices == null) {
            mbind_set_indices = try api.createMethod("GLTFBufferView", "set_indices");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_indices),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_indices, base, cargs, result);
    }
};