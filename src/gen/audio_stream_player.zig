// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node = @import("node.zig").Node;

// method bindings
var mbind_get_bus: ?*c_api.godot_method_bind = null;
var mbind_get_mix_target: ?*c_api.godot_method_bind = null;
var mbind_get_pitch_scale: ?*c_api.godot_method_bind = null;
var mbind_get_playback_position: ?*c_api.godot_method_bind = null;
var mbind_get_stream: ?*c_api.godot_method_bind = null;
var mbind_get_stream_paused: ?*c_api.godot_method_bind = null;
var mbind_get_stream_playback: ?*c_api.godot_method_bind = null;
var mbind_get_volume_db: ?*c_api.godot_method_bind = null;
var mbind_is_autoplay_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_playing: ?*c_api.godot_method_bind = null;
var mbind_play: ?*c_api.godot_method_bind = null;
var mbind_seek: ?*c_api.godot_method_bind = null;
var mbind_set_autoplay: ?*c_api.godot_method_bind = null;
var mbind_set_bus: ?*c_api.godot_method_bind = null;
var mbind_set_mix_target: ?*c_api.godot_method_bind = null;
var mbind_set_pitch_scale: ?*c_api.godot_method_bind = null;
var mbind_set_stream: ?*c_api.godot_method_bind = null;
var mbind_set_stream_paused: ?*c_api.godot_method_bind = null;
var mbind_set_volume_db: ?*c_api.godot_method_bind = null;
var mbind_stop: ?*c_api.godot_method_bind = null;
var mbind_audio_stream_player_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioStreamPlayer = struct {
    const Self = @This();
    const BaseClass = Node;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_stream_player_constructor == null) {
            mbind_audio_stream_player_constructor = try api.createConstructor("AudioStreamPlayer");
        }
        return api.createObject(Self, mbind_audio_stream_player_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBus(self: *const Self) !godot.String {
        if (mbind_get_bus == null) {
            mbind_get_bus = try api.createMethod("AudioStreamPlayer", "get_bus");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bus, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getMixTarget(self: *const Self) !i32 {
        if (mbind_get_mix_target == null) {
            mbind_get_mix_target = try api.createMethod("AudioStreamPlayer", "get_mix_target");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mix_target, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPitchScale(self: *const Self) !f32 {
        if (mbind_get_pitch_scale == null) {
            mbind_get_pitch_scale = try api.createMethod("AudioStreamPlayer", "get_pitch_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pitch_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getPlaybackPosition(self: *const Self) !f32 {
        if (mbind_get_playback_position == null) {
            mbind_get_playback_position = try api.createMethod("AudioStreamPlayer", "get_playback_position");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_playback_position, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getStream(self: *const Self) !godot.AudioStream {
        if (mbind_get_stream == null) {
            mbind_get_stream = try api.createMethod("AudioStreamPlayer", "get_stream");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_stream, base, cargs, result);
        return @ptrCast(*godot.AudioStream, @alignCast(@alignOf(&godot.AudioStream), result)).*;
    }

    pub fn getStreamPaused(self: *const Self) !bool {
        if (mbind_get_stream_paused == null) {
            mbind_get_stream_paused = try api.createMethod("AudioStreamPlayer", "get_stream_paused");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_stream_paused, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getStreamPlayback(self: *const Self) !godot.AudioStreamPlayback {
        if (mbind_get_stream_playback == null) {
            mbind_get_stream_playback = try api.createMethod("AudioStreamPlayer", "get_stream_playback");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_stream_playback, base, cargs, result);
        return @ptrCast(*godot.AudioStreamPlayback, @alignCast(@alignOf(&godot.AudioStreamPlayback), result)).*;
    }

    pub fn getVolumeDb(self: *const Self) !f32 {
        if (mbind_get_volume_db == null) {
            mbind_get_volume_db = try api.createMethod("AudioStreamPlayer", "get_volume_db");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_volume_db, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn isAutoplayEnabled(self: *const Self) !bool {
        if (mbind_is_autoplay_enabled == null) {
            mbind_is_autoplay_enabled = try api.createMethod("AudioStreamPlayer", "is_autoplay_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_autoplay_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isPlaying(self: *const Self) !bool {
        if (mbind_is_playing == null) {
            mbind_is_playing = try api.createMethod("AudioStreamPlayer", "is_playing");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_playing, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn play(self: *const Self, arg_from_position: f32) !void {
        if (mbind_play == null) {
            mbind_play = try api.createMethod("AudioStreamPlayer", "play");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_from_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_play, base, cargs, result);
    }

    pub fn seek(self: *const Self, arg_to_position: f32) !void {
        if (mbind_seek == null) {
            mbind_seek = try api.createMethod("AudioStreamPlayer", "seek");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_to_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_seek, base, cargs, result);
    }

    pub fn setAutoplay(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_autoplay == null) {
            mbind_set_autoplay = try api.createMethod("AudioStreamPlayer", "set_autoplay");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_autoplay, base, cargs, result);
    }

    pub fn setBus(self: *const Self, arg_bus: *const godot.String) !void {
        if (mbind_set_bus == null) {
            mbind_set_bus = try api.createMethod("AudioStreamPlayer", "set_bus");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_bus),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bus, base, cargs, result);
    }

    pub fn setMixTarget(self: *const Self, arg_mix_target: i32) !void {
        if (mbind_set_mix_target == null) {
            mbind_set_mix_target = try api.createMethod("AudioStreamPlayer", "set_mix_target");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mix_target),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mix_target, base, cargs, result);
    }

    pub fn setPitchScale(self: *const Self, arg_pitch_scale: f32) !void {
        if (mbind_set_pitch_scale == null) {
            mbind_set_pitch_scale = try api.createMethod("AudioStreamPlayer", "set_pitch_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pitch_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pitch_scale, base, cargs, result);
    }

    pub fn setStream(self: *const Self, arg_stream: *const godot.AudioStream) !void {
        if (mbind_set_stream == null) {
            mbind_set_stream = try api.createMethod("AudioStreamPlayer", "set_stream");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_stream),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_stream, base, cargs, result);
    }

    pub fn setStreamPaused(self: *const Self, arg_pause: bool) !void {
        if (mbind_set_stream_paused == null) {
            mbind_set_stream_paused = try api.createMethod("AudioStreamPlayer", "set_stream_paused");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pause),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_stream_paused, base, cargs, result);
    }

    pub fn setVolumeDb(self: *const Self, arg_volume_db: f32) !void {
        if (mbind_set_volume_db == null) {
            mbind_set_volume_db = try api.createMethod("AudioStreamPlayer", "set_volume_db");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_volume_db),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_volume_db, base, cargs, result);
    }

    pub fn stop(self: *const Self) !void {
        if (mbind_stop == null) {
            mbind_stop = try api.createMethod("AudioStreamPlayer", "stop");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_stop, base, cargs, result);
    }
};