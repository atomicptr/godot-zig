// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_size: ?*c_api.godot_method_bind = null;
var mbind_packed_data_container_ref_constructor: ?fn () ?*c_api.godot_object = null;

pub const PackedDataContainerRef = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_packed_data_container_ref_constructor == null) {
            mbind_packed_data_container_ref_constructor = try api.createConstructor("PackedDataContainerRef");
        }
        return api.createObject(Self, mbind_packed_data_container_ref_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn size(self: *const Self) !i32 {
        if (mbind_size == null) {
            mbind_size = try api.createMethod("PackedDataContainerRef", "size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_size, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }
};