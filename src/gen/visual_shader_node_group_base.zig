// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const VisualShaderNode = @import("visual_shader_node.zig").VisualShaderNode;

// method bindings
var mbind_add_input_port: ?*c_api.godot_method_bind = null;
var mbind_add_output_port: ?*c_api.godot_method_bind = null;
var mbind_clear_input_ports: ?*c_api.godot_method_bind = null;
var mbind_clear_output_ports: ?*c_api.godot_method_bind = null;
var mbind_get_free_input_port_id: ?*c_api.godot_method_bind = null;
var mbind_get_free_output_port_id: ?*c_api.godot_method_bind = null;
var mbind_get_input_port_count: ?*c_api.godot_method_bind = null;
var mbind_get_inputs: ?*c_api.godot_method_bind = null;
var mbind_get_output_port_count: ?*c_api.godot_method_bind = null;
var mbind_get_outputs: ?*c_api.godot_method_bind = null;
var mbind_get_size: ?*c_api.godot_method_bind = null;
var mbind_has_input_port: ?*c_api.godot_method_bind = null;
var mbind_has_output_port: ?*c_api.godot_method_bind = null;
var mbind_is_valid_port_name: ?*c_api.godot_method_bind = null;
var mbind_remove_input_port: ?*c_api.godot_method_bind = null;
var mbind_remove_output_port: ?*c_api.godot_method_bind = null;
var mbind_set_input_port_name: ?*c_api.godot_method_bind = null;
var mbind_set_input_port_type: ?*c_api.godot_method_bind = null;
var mbind_set_inputs: ?*c_api.godot_method_bind = null;
var mbind_set_output_port_name: ?*c_api.godot_method_bind = null;
var mbind_set_output_port_type: ?*c_api.godot_method_bind = null;
var mbind_set_outputs: ?*c_api.godot_method_bind = null;
var mbind_set_size: ?*c_api.godot_method_bind = null;
var mbind_visual_shader_node_group_base_constructor: ?fn () ?*c_api.godot_object = null;

pub const VisualShaderNodeGroupBase = struct {
    const Self = @This();
    const BaseClass = VisualShaderNode;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_visual_shader_node_group_base_constructor == null) {
            mbind_visual_shader_node_group_base_constructor = try api.createConstructor("VisualShaderNodeGroupBase");
        }
        return api.createObject(Self, mbind_visual_shader_node_group_base_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addInputPort(self: *const Self, arg_id: i32, arg_type: i32, arg_name: *const godot.String) !void {
        if (mbind_add_input_port == null) {
            mbind_add_input_port = try api.createMethod("VisualShaderNodeGroupBase", "add_input_port");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, *arg_type),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_input_port, base, cargs, result);
    }

    pub fn addOutputPort(self: *const Self, arg_id: i32, arg_type: i32, arg_name: *const godot.String) !void {
        if (mbind_add_output_port == null) {
            mbind_add_output_port = try api.createMethod("VisualShaderNodeGroupBase", "add_output_port");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, *arg_type),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_output_port, base, cargs, result);
    }

    pub fn clearInputPorts(self: *const Self) !void {
        if (mbind_clear_input_ports == null) {
            mbind_clear_input_ports = try api.createMethod("VisualShaderNodeGroupBase", "clear_input_ports");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_input_ports, base, cargs, result);
    }

    pub fn clearOutputPorts(self: *const Self) !void {
        if (mbind_clear_output_ports == null) {
            mbind_clear_output_ports = try api.createMethod("VisualShaderNodeGroupBase", "clear_output_ports");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_output_ports, base, cargs, result);
    }

    pub fn getFreeInputPortId(self: *const Self) !i32 {
        if (mbind_get_free_input_port_id == null) {
            mbind_get_free_input_port_id = try api.createMethod("VisualShaderNodeGroupBase", "get_free_input_port_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_free_input_port_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFreeOutputPortId(self: *const Self) !i32 {
        if (mbind_get_free_output_port_id == null) {
            mbind_get_free_output_port_id = try api.createMethod("VisualShaderNodeGroupBase", "get_free_output_port_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_free_output_port_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getInputPortCount(self: *const Self) !i32 {
        if (mbind_get_input_port_count == null) {
            mbind_get_input_port_count = try api.createMethod("VisualShaderNodeGroupBase", "get_input_port_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_input_port_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getInputs(self: *const Self) !godot.String {
        if (mbind_get_inputs == null) {
            mbind_get_inputs = try api.createMethod("VisualShaderNodeGroupBase", "get_inputs");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_inputs, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getOutputPortCount(self: *const Self) !i32 {
        if (mbind_get_output_port_count == null) {
            mbind_get_output_port_count = try api.createMethod("VisualShaderNodeGroupBase", "get_output_port_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_output_port_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getOutputs(self: *const Self) !godot.String {
        if (mbind_get_outputs == null) {
            mbind_get_outputs = try api.createMethod("VisualShaderNodeGroupBase", "get_outputs");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_outputs, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getSize(self: *const Self) !godot.Vector2 {
        if (mbind_get_size == null) {
            mbind_get_size = try api.createMethod("VisualShaderNodeGroupBase", "get_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_size, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn hasInputPort(self: *const Self, arg_id: i32) !bool {
        if (mbind_has_input_port == null) {
            mbind_has_input_port = try api.createMethod("VisualShaderNodeGroupBase", "has_input_port");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_input_port, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn hasOutputPort(self: *const Self, arg_id: i32) !bool {
        if (mbind_has_output_port == null) {
            mbind_has_output_port = try api.createMethod("VisualShaderNodeGroupBase", "has_output_port");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_output_port, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isValidPortName(self: *const Self, arg_name: *const godot.String) !bool {
        if (mbind_is_valid_port_name == null) {
            mbind_is_valid_port_name = try api.createMethod("VisualShaderNodeGroupBase", "is_valid_port_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_valid_port_name, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn removeInputPort(self: *const Self, arg_id: i32) !void {
        if (mbind_remove_input_port == null) {
            mbind_remove_input_port = try api.createMethod("VisualShaderNodeGroupBase", "remove_input_port");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_input_port, base, cargs, result);
    }

    pub fn removeOutputPort(self: *const Self, arg_id: i32) !void {
        if (mbind_remove_output_port == null) {
            mbind_remove_output_port = try api.createMethod("VisualShaderNodeGroupBase", "remove_output_port");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_output_port, base, cargs, result);
    }

    pub fn setInputPortName(self: *const Self, arg_id: i32, arg_name: *const godot.String) !void {
        if (mbind_set_input_port_name == null) {
            mbind_set_input_port_name = try api.createMethod("VisualShaderNodeGroupBase", "set_input_port_name");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_input_port_name, base, cargs, result);
    }

    pub fn setInputPortType(self: *const Self, arg_id: i32, arg_type: i32) !void {
        if (mbind_set_input_port_type == null) {
            mbind_set_input_port_type = try api.createMethod("VisualShaderNodeGroupBase", "set_input_port_type");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, *arg_type),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_input_port_type, base, cargs, result);
    }

    pub fn setInputs(self: *const Self, arg_inputs: *const godot.String) !void {
        if (mbind_set_inputs == null) {
            mbind_set_inputs = try api.createMethod("VisualShaderNodeGroupBase", "set_inputs");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_inputs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_inputs, base, cargs, result);
    }

    pub fn setOutputPortName(self: *const Self, arg_id: i32, arg_name: *const godot.String) !void {
        if (mbind_set_output_port_name == null) {
            mbind_set_output_port_name = try api.createMethod("VisualShaderNodeGroupBase", "set_output_port_name");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_output_port_name, base, cargs, result);
    }

    pub fn setOutputPortType(self: *const Self, arg_id: i32, arg_type: i32) !void {
        if (mbind_set_output_port_type == null) {
            mbind_set_output_port_type = try api.createMethod("VisualShaderNodeGroupBase", "set_output_port_type");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, *arg_type),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_output_port_type, base, cargs, result);
    }

    pub fn setOutputs(self: *const Self, arg_outputs: *const godot.String) !void {
        if (mbind_set_outputs == null) {
            mbind_set_outputs = try api.createMethod("VisualShaderNodeGroupBase", "set_outputs");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_outputs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_outputs, base, cargs, result);
    }

    pub fn setSize(self: *const Self, arg_size: *const godot.Vector2) !void {
        if (mbind_set_size == null) {
            mbind_set_size = try api.createMethod("VisualShaderNodeGroupBase", "set_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_size, base, cargs, result);
    }
};