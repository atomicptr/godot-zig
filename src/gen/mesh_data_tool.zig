// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_commit_to_surface: ?*c_api.godot_method_bind = null;
var mbind_create_from_surface: ?*c_api.godot_method_bind = null;
var mbind_get_edge_count: ?*c_api.godot_method_bind = null;
var mbind_get_edge_faces: ?*c_api.godot_method_bind = null;
var mbind_get_edge_meta: ?*c_api.godot_method_bind = null;
var mbind_get_edge_vertex: ?*c_api.godot_method_bind = null;
var mbind_get_face_count: ?*c_api.godot_method_bind = null;
var mbind_get_face_edge: ?*c_api.godot_method_bind = null;
var mbind_get_face_meta: ?*c_api.godot_method_bind = null;
var mbind_get_face_normal: ?*c_api.godot_method_bind = null;
var mbind_get_face_vertex: ?*c_api.godot_method_bind = null;
var mbind_get_format: ?*c_api.godot_method_bind = null;
var mbind_get_material: ?*c_api.godot_method_bind = null;
var mbind_get_vertex: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_bones: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_color: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_count: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_edges: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_faces: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_meta: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_normal: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_tangent: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_uv: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_uv2: ?*c_api.godot_method_bind = null;
var mbind_get_vertex_weights: ?*c_api.godot_method_bind = null;
var mbind_set_edge_meta: ?*c_api.godot_method_bind = null;
var mbind_set_face_meta: ?*c_api.godot_method_bind = null;
var mbind_set_material: ?*c_api.godot_method_bind = null;
var mbind_set_vertex: ?*c_api.godot_method_bind = null;
var mbind_set_vertex_bones: ?*c_api.godot_method_bind = null;
var mbind_set_vertex_color: ?*c_api.godot_method_bind = null;
var mbind_set_vertex_meta: ?*c_api.godot_method_bind = null;
var mbind_set_vertex_normal: ?*c_api.godot_method_bind = null;
var mbind_set_vertex_tangent: ?*c_api.godot_method_bind = null;
var mbind_set_vertex_uv: ?*c_api.godot_method_bind = null;
var mbind_set_vertex_uv2: ?*c_api.godot_method_bind = null;
var mbind_set_vertex_weights: ?*c_api.godot_method_bind = null;
var mbind_mesh_data_tool_constructor: ?fn () ?*c_api.godot_object = null;

pub const MeshDataTool = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_mesh_data_tool_constructor == null) {
            mbind_mesh_data_tool_constructor = try api.createConstructor("MeshDataTool");
        }
        return api.createObject(Self, mbind_mesh_data_tool_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("MeshDataTool", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn commitToSurface(self: *const Self, arg_mesh: *const godot.ArrayMesh) !i32 {
        if (mbind_commit_to_surface == null) {
            mbind_commit_to_surface = try api.createMethod("MeshDataTool", "commit_to_surface");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mesh),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_commit_to_surface, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn createFromSurface(self: *const Self, arg_mesh: *const godot.ArrayMesh, arg_surface: i32) !i32 {
        if (mbind_create_from_surface == null) {
            mbind_create_from_surface = try api.createMethod("MeshDataTool", "create_from_surface");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mesh),
            @ptrCast(*const anyopaque, *arg_surface),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_from_surface, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getEdgeCount(self: *const Self) !i32 {
        if (mbind_get_edge_count == null) {
            mbind_get_edge_count = try api.createMethod("MeshDataTool", "get_edge_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_edge_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getEdgeFaces(self: *const Self, arg_idx: i32) !godot.PoolIntArray {
        if (mbind_get_edge_faces == null) {
            mbind_get_edge_faces = try api.createMethod("MeshDataTool", "get_edge_faces");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_edge_faces, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getEdgeMeta(self: *const Self, arg_idx: i32) !godot.Variant {
        if (mbind_get_edge_meta == null) {
            mbind_get_edge_meta = try api.createMethod("MeshDataTool", "get_edge_meta");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_edge_meta, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getEdgeVertex(self: *const Self, arg_idx: i32, arg_vertex: i32) !i32 {
        if (mbind_get_edge_vertex == null) {
            mbind_get_edge_vertex = try api.createMethod("MeshDataTool", "get_edge_vertex");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, *arg_vertex),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_edge_vertex, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFaceCount(self: *const Self) !i32 {
        if (mbind_get_face_count == null) {
            mbind_get_face_count = try api.createMethod("MeshDataTool", "get_face_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_face_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFaceEdge(self: *const Self, arg_idx: i32, arg_edge: i32) !i32 {
        if (mbind_get_face_edge == null) {
            mbind_get_face_edge = try api.createMethod("MeshDataTool", "get_face_edge");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, *arg_edge),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_face_edge, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFaceMeta(self: *const Self, arg_idx: i32) !godot.Variant {
        if (mbind_get_face_meta == null) {
            mbind_get_face_meta = try api.createMethod("MeshDataTool", "get_face_meta");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_face_meta, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getFaceNormal(self: *const Self, arg_idx: i32) !godot.Vector3 {
        if (mbind_get_face_normal == null) {
            mbind_get_face_normal = try api.createMethod("MeshDataTool", "get_face_normal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_face_normal, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getFaceVertex(self: *const Self, arg_idx: i32, arg_vertex: i32) !i32 {
        if (mbind_get_face_vertex == null) {
            mbind_get_face_vertex = try api.createMethod("MeshDataTool", "get_face_vertex");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, *arg_vertex),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_face_vertex, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFormat(self: *const Self) !i32 {
        if (mbind_get_format == null) {
            mbind_get_format = try api.createMethod("MeshDataTool", "get_format");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_format, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMaterial(self: *const Self) !godot.Material {
        if (mbind_get_material == null) {
            mbind_get_material = try api.createMethod("MeshDataTool", "get_material");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_material, base, cargs, result);
        return @ptrCast(*godot.Material, @alignCast(@alignOf(&godot.Material), result)).*;
    }

    pub fn getVertex(self: *const Self, arg_idx: i32) !godot.Vector3 {
        if (mbind_get_vertex == null) {
            mbind_get_vertex = try api.createMethod("MeshDataTool", "get_vertex");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getVertexBones(self: *const Self, arg_idx: i32) !godot.PoolIntArray {
        if (mbind_get_vertex_bones == null) {
            mbind_get_vertex_bones = try api.createMethod("MeshDataTool", "get_vertex_bones");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_bones, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getVertexColor(self: *const Self, arg_idx: i32) !godot.Color {
        if (mbind_get_vertex_color == null) {
            mbind_get_vertex_color = try api.createMethod("MeshDataTool", "get_vertex_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getVertexCount(self: *const Self) !i32 {
        if (mbind_get_vertex_count == null) {
            mbind_get_vertex_count = try api.createMethod("MeshDataTool", "get_vertex_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getVertexEdges(self: *const Self, arg_idx: i32) !godot.PoolIntArray {
        if (mbind_get_vertex_edges == null) {
            mbind_get_vertex_edges = try api.createMethod("MeshDataTool", "get_vertex_edges");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_edges, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getVertexFaces(self: *const Self, arg_idx: i32) !godot.PoolIntArray {
        if (mbind_get_vertex_faces == null) {
            mbind_get_vertex_faces = try api.createMethod("MeshDataTool", "get_vertex_faces");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_faces, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getVertexMeta(self: *const Self, arg_idx: i32) !godot.Variant {
        if (mbind_get_vertex_meta == null) {
            mbind_get_vertex_meta = try api.createMethod("MeshDataTool", "get_vertex_meta");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_meta, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getVertexNormal(self: *const Self, arg_idx: i32) !godot.Vector3 {
        if (mbind_get_vertex_normal == null) {
            mbind_get_vertex_normal = try api.createMethod("MeshDataTool", "get_vertex_normal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_normal, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getVertexTangent(self: *const Self, arg_idx: i32) !godot.Plane {
        if (mbind_get_vertex_tangent == null) {
            mbind_get_vertex_tangent = try api.createMethod("MeshDataTool", "get_vertex_tangent");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_tangent, base, cargs, result);
        return @ptrCast(*godot.Plane, @alignCast(@alignOf(&godot.Plane), result)).*;
    }

    pub fn getVertexUv(self: *const Self, arg_idx: i32) !godot.Vector2 {
        if (mbind_get_vertex_uv == null) {
            mbind_get_vertex_uv = try api.createMethod("MeshDataTool", "get_vertex_uv");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_uv, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getVertexUv2(self: *const Self, arg_idx: i32) !godot.Vector2 {
        if (mbind_get_vertex_uv2 == null) {
            mbind_get_vertex_uv2 = try api.createMethod("MeshDataTool", "get_vertex_uv2");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_uv2, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getVertexWeights(self: *const Self, arg_idx: i32) !godot.PoolRealArray {
        if (mbind_get_vertex_weights == null) {
            mbind_get_vertex_weights = try api.createMethod("MeshDataTool", "get_vertex_weights");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vertex_weights, base, cargs, result);
        return @ptrCast(*godot.PoolRealArray, @alignCast(@alignOf(&godot.PoolRealArray), result)).*;
    }

    pub fn setEdgeMeta(self: *const Self, arg_idx: i32, arg_meta: *const godot.Variant) !void {
        if (mbind_set_edge_meta == null) {
            mbind_set_edge_meta = try api.createMethod("MeshDataTool", "set_edge_meta");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_meta),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_edge_meta, base, cargs, result);
    }

    pub fn setFaceMeta(self: *const Self, arg_idx: i32, arg_meta: *const godot.Variant) !void {
        if (mbind_set_face_meta == null) {
            mbind_set_face_meta = try api.createMethod("MeshDataTool", "set_face_meta");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_meta),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_face_meta, base, cargs, result);
    }

    pub fn setMaterial(self: *const Self, arg_material: *const godot.Material) !void {
        if (mbind_set_material == null) {
            mbind_set_material = try api.createMethod("MeshDataTool", "set_material");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_material),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_material, base, cargs, result);
    }

    pub fn setVertex(self: *const Self, arg_idx: i32, arg_vertex: *const godot.Vector3) !void {
        if (mbind_set_vertex == null) {
            mbind_set_vertex = try api.createMethod("MeshDataTool", "set_vertex");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_vertex),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_vertex, base, cargs, result);
    }

    pub fn setVertexBones(self: *const Self, arg_idx: i32, arg_bones: *const godot.PoolIntArray) !void {
        if (mbind_set_vertex_bones == null) {
            mbind_set_vertex_bones = try api.createMethod("MeshDataTool", "set_vertex_bones");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_bones),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_vertex_bones, base, cargs, result);
    }

    pub fn setVertexColor(self: *const Self, arg_idx: i32, arg_color: *const godot.Color) !void {
        if (mbind_set_vertex_color == null) {
            mbind_set_vertex_color = try api.createMethod("MeshDataTool", "set_vertex_color");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_vertex_color, base, cargs, result);
    }

    pub fn setVertexMeta(self: *const Self, arg_idx: i32, arg_meta: *const godot.Variant) !void {
        if (mbind_set_vertex_meta == null) {
            mbind_set_vertex_meta = try api.createMethod("MeshDataTool", "set_vertex_meta");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_meta),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_vertex_meta, base, cargs, result);
    }

    pub fn setVertexNormal(self: *const Self, arg_idx: i32, arg_normal: *const godot.Vector3) !void {
        if (mbind_set_vertex_normal == null) {
            mbind_set_vertex_normal = try api.createMethod("MeshDataTool", "set_vertex_normal");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_normal),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_vertex_normal, base, cargs, result);
    }

    pub fn setVertexTangent(self: *const Self, arg_idx: i32, arg_tangent: *const godot.Plane) !void {
        if (mbind_set_vertex_tangent == null) {
            mbind_set_vertex_tangent = try api.createMethod("MeshDataTool", "set_vertex_tangent");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_tangent),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_vertex_tangent, base, cargs, result);
    }

    pub fn setVertexUv(self: *const Self, arg_idx: i32, arg_uv: *const godot.Vector2) !void {
        if (mbind_set_vertex_uv == null) {
            mbind_set_vertex_uv = try api.createMethod("MeshDataTool", "set_vertex_uv");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_uv),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_vertex_uv, base, cargs, result);
    }

    pub fn setVertexUv2(self: *const Self, arg_idx: i32, arg_uv2: *const godot.Vector2) !void {
        if (mbind_set_vertex_uv2 == null) {
            mbind_set_vertex_uv2 = try api.createMethod("MeshDataTool", "set_vertex_uv2");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_uv2),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_vertex_uv2, base, cargs, result);
    }

    pub fn setVertexWeights(self: *const Self, arg_idx: i32, arg_weights: *const godot.PoolRealArray) !void {
        if (mbind_set_vertex_weights == null) {
            mbind_set_vertex_weights = try api.createMethod("MeshDataTool", "set_vertex_weights");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_weights),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_vertex_weights, base, cargs, result);
    }
};