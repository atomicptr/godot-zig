// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Texture = @import("texture.zig").Texture;

// method bindings
var mbind_get_viewport_path_in_scene: ?*c_api.godot_method_bind = null;
var mbind_set_viewport_path_in_scene: ?*c_api.godot_method_bind = null;
var mbind_viewport_texture_constructor: ?fn () ?*c_api.godot_object = null;

pub const ViewportTexture = struct {
    const Self = @This();
    const BaseClass = Texture;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_viewport_texture_constructor == null) {
            mbind_viewport_texture_constructor = try api.createConstructor("ViewportTexture");
        }
        return api.createObject(Self, mbind_viewport_texture_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getViewportPathInScene(self: *const Self) !godot.NodePath {
        if (mbind_get_viewport_path_in_scene == null) {
            mbind_get_viewport_path_in_scene = try api.createMethod("ViewportTexture", "get_viewport_path_in_scene");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_viewport_path_in_scene, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn setViewportPathInScene(self: *const Self, arg_path: *const godot.NodePath) !void {
        if (mbind_set_viewport_path_in_scene == null) {
            mbind_set_viewport_path_in_scene = try api.createMethod("ViewportTexture", "set_viewport_path_in_scene");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_viewport_path_in_scene, base, cargs, result);
    }
};