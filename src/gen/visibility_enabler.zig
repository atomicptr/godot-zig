// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const VisibilityNotifier = @import("visibility_notifier.zig").VisibilityNotifier;

// method bindings
var mbind_is_enabler_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_enabler: ?*c_api.godot_method_bind = null;
var mbind_visibility_enabler_constructor: ?fn () ?*c_api.godot_object = null;

pub const VisibilityEnabler = struct {
    const Self = @This();
    const BaseClass = VisibilityNotifier;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_visibility_enabler_constructor == null) {
            mbind_visibility_enabler_constructor = try api.createConstructor("VisibilityEnabler");
        }
        return api.createObject(Self, mbind_visibility_enabler_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn isEnablerEnabled(self: *const Self, arg_enabler: i32) !bool {
        if (mbind_is_enabler_enabled == null) {
            mbind_is_enabler_enabled = try api.createMethod("VisibilityEnabler", "is_enabler_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabler),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_enabler_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setEnabler(self: *const Self, arg_enabler: i32, arg_enabled: bool) !void {
        if (mbind_set_enabler == null) {
            mbind_set_enabler = try api.createMethod("VisibilityEnabler", "set_enabler");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabler),
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_enabler, base, cargs, result);
    }
};