// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node2D = @import("node_2d.zig").Node2D;

// method bindings
var mbind_get_one_way_collision_margin: ?*c_api.godot_method_bind = null;
var mbind_get_shape: ?*c_api.godot_method_bind = null;
var mbind_is_disabled: ?*c_api.godot_method_bind = null;
var mbind_is_one_way_collision_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_disabled: ?*c_api.godot_method_bind = null;
var mbind_set_one_way_collision: ?*c_api.godot_method_bind = null;
var mbind_set_one_way_collision_margin: ?*c_api.godot_method_bind = null;
var mbind_set_shape: ?*c_api.godot_method_bind = null;
var mbind_collision_shape_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const CollisionShape2D = struct {
    const Self = @This();
    const BaseClass = Node2D;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_collision_shape_2d_constructor == null) {
            mbind_collision_shape_2d_constructor = try api.createConstructor("CollisionShape2D");
        }
        return api.createObject(Self, mbind_collision_shape_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getOneWayCollisionMargin(self: *const Self) !f32 {
        if (mbind_get_one_way_collision_margin == null) {
            mbind_get_one_way_collision_margin = try api.createMethod("CollisionShape2D", "get_one_way_collision_margin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_one_way_collision_margin, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getShape(self: *const Self) !godot.Shape2D {
        if (mbind_get_shape == null) {
            mbind_get_shape = try api.createMethod("CollisionShape2D", "get_shape");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shape, base, cargs, result);
        return @ptrCast(*godot.Shape2D, @alignCast(@alignOf(&godot.Shape2D), result)).*;
    }

    pub fn isDisabled(self: *const Self) !bool {
        if (mbind_is_disabled == null) {
            mbind_is_disabled = try api.createMethod("CollisionShape2D", "is_disabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isOneWayCollisionEnabled(self: *const Self) !bool {
        if (mbind_is_one_way_collision_enabled == null) {
            mbind_is_one_way_collision_enabled = try api.createMethod("CollisionShape2D", "is_one_way_collision_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_one_way_collision_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setDisabled(self: *const Self, arg_disabled: bool) !void {
        if (mbind_set_disabled == null) {
            mbind_set_disabled = try api.createMethod("CollisionShape2D", "set_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_disabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disabled, base, cargs, result);
    }

    pub fn setOneWayCollision(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_one_way_collision == null) {
            mbind_set_one_way_collision = try api.createMethod("CollisionShape2D", "set_one_way_collision");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_one_way_collision, base, cargs, result);
    }

    pub fn setOneWayCollisionMargin(self: *const Self, arg_margin: f32) !void {
        if (mbind_set_one_way_collision_margin == null) {
            mbind_set_one_way_collision_margin = try api.createMethod("CollisionShape2D", "set_one_way_collision_margin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_one_way_collision_margin, base, cargs, result);
    }

    pub fn setShape(self: *const Self, arg_shape: *const godot.Shape2D) !void {
        if (mbind_set_shape == null) {
            mbind_set_shape = try api.createMethod("CollisionShape2D", "set_shape");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_shape),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shape, base, cargs, result);
    }
};