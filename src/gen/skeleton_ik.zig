// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node = @import("node.zig").Node;

// method bindings
var mbind_get_interpolation: ?*c_api.godot_method_bind = null;
var mbind_get_magnet_position: ?*c_api.godot_method_bind = null;
var mbind_get_max_iterations: ?*c_api.godot_method_bind = null;
var mbind_get_min_distance: ?*c_api.godot_method_bind = null;
var mbind_get_parent_skeleton: ?*c_api.godot_method_bind = null;
var mbind_get_root_bone: ?*c_api.godot_method_bind = null;
var mbind_get_target_node: ?*c_api.godot_method_bind = null;
var mbind_get_target_transform: ?*c_api.godot_method_bind = null;
var mbind_get_tip_bone: ?*c_api.godot_method_bind = null;
var mbind_is_override_tip_basis: ?*c_api.godot_method_bind = null;
var mbind_is_running: ?*c_api.godot_method_bind = null;
var mbind_is_using_magnet: ?*c_api.godot_method_bind = null;
var mbind_set_interpolation: ?*c_api.godot_method_bind = null;
var mbind_set_magnet_position: ?*c_api.godot_method_bind = null;
var mbind_set_max_iterations: ?*c_api.godot_method_bind = null;
var mbind_set_min_distance: ?*c_api.godot_method_bind = null;
var mbind_set_override_tip_basis: ?*c_api.godot_method_bind = null;
var mbind_set_root_bone: ?*c_api.godot_method_bind = null;
var mbind_set_target_node: ?*c_api.godot_method_bind = null;
var mbind_set_target_transform: ?*c_api.godot_method_bind = null;
var mbind_set_tip_bone: ?*c_api.godot_method_bind = null;
var mbind_set_use_magnet: ?*c_api.godot_method_bind = null;
var mbind_start: ?*c_api.godot_method_bind = null;
var mbind_stop: ?*c_api.godot_method_bind = null;
var mbind_skeleton_ik_constructor: ?fn () ?*c_api.godot_object = null;

pub const SkeletonIK = struct {
    const Self = @This();
    const BaseClass = Node;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_skeleton_ik_constructor == null) {
            mbind_skeleton_ik_constructor = try api.createConstructor("SkeletonIK");
        }
        return api.createObject(Self, mbind_skeleton_ik_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getInterpolation(self: *const Self) !f32 {
        if (mbind_get_interpolation == null) {
            mbind_get_interpolation = try api.createMethod("SkeletonIK", "get_interpolation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_interpolation, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getMagnetPosition(self: *const Self) !godot.Vector3 {
        if (mbind_get_magnet_position == null) {
            mbind_get_magnet_position = try api.createMethod("SkeletonIK", "get_magnet_position");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_magnet_position, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getMaxIterations(self: *const Self) !i32 {
        if (mbind_get_max_iterations == null) {
            mbind_get_max_iterations = try api.createMethod("SkeletonIK", "get_max_iterations");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_max_iterations, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMinDistance(self: *const Self) !f32 {
        if (mbind_get_min_distance == null) {
            mbind_get_min_distance = try api.createMethod("SkeletonIK", "get_min_distance");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_min_distance, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getParentSkeleton(self: *const Self) !godot.Skeleton {
        if (mbind_get_parent_skeleton == null) {
            mbind_get_parent_skeleton = try api.createMethod("SkeletonIK", "get_parent_skeleton");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_parent_skeleton, base, cargs, result);
        return @ptrCast(*godot.Skeleton, @alignCast(@alignOf(&godot.Skeleton), result)).*;
    }

    pub fn getRootBone(self: *const Self) !godot.String {
        if (mbind_get_root_bone == null) {
            mbind_get_root_bone = try api.createMethod("SkeletonIK", "get_root_bone");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_root_bone, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getTargetNode(self: *const Self) !godot.NodePath {
        if (mbind_get_target_node == null) {
            mbind_get_target_node = try api.createMethod("SkeletonIK", "get_target_node");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_target_node, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn getTargetTransform(self: *const Self) !godot.Transform {
        if (mbind_get_target_transform == null) {
            mbind_get_target_transform = try api.createMethod("SkeletonIK", "get_target_transform");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_target_transform, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getTipBone(self: *const Self) !godot.String {
        if (mbind_get_tip_bone == null) {
            mbind_get_tip_bone = try api.createMethod("SkeletonIK", "get_tip_bone");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tip_bone, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn isOverrideTipBasis(self: *const Self) !bool {
        if (mbind_is_override_tip_basis == null) {
            mbind_is_override_tip_basis = try api.createMethod("SkeletonIK", "is_override_tip_basis");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_override_tip_basis, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isRunning(self: *const Self) !bool {
        if (mbind_is_running == null) {
            mbind_is_running = try api.createMethod("SkeletonIK", "is_running");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_running, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isUsingMagnet(self: *const Self) !bool {
        if (mbind_is_using_magnet == null) {
            mbind_is_using_magnet = try api.createMethod("SkeletonIK", "is_using_magnet");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_using_magnet, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setInterpolation(self: *const Self, arg_interpolation: f32) !void {
        if (mbind_set_interpolation == null) {
            mbind_set_interpolation = try api.createMethod("SkeletonIK", "set_interpolation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_interpolation),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_interpolation, base, cargs, result);
    }

    pub fn setMagnetPosition(self: *const Self, arg_local_position: *const godot.Vector3) !void {
        if (mbind_set_magnet_position == null) {
            mbind_set_magnet_position = try api.createMethod("SkeletonIK", "set_magnet_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_local_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_magnet_position, base, cargs, result);
    }

    pub fn setMaxIterations(self: *const Self, arg_iterations: i32) !void {
        if (mbind_set_max_iterations == null) {
            mbind_set_max_iterations = try api.createMethod("SkeletonIK", "set_max_iterations");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_iterations),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_max_iterations, base, cargs, result);
    }

    pub fn setMinDistance(self: *const Self, arg_min_distance: f32) !void {
        if (mbind_set_min_distance == null) {
            mbind_set_min_distance = try api.createMethod("SkeletonIK", "set_min_distance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_min_distance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_min_distance, base, cargs, result);
    }

    pub fn setOverrideTipBasis(self: *const Self, arg_override: bool) !void {
        if (mbind_set_override_tip_basis == null) {
            mbind_set_override_tip_basis = try api.createMethod("SkeletonIK", "set_override_tip_basis");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_override),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_override_tip_basis, base, cargs, result);
    }

    pub fn setRootBone(self: *const Self, arg_root_bone: *const godot.String) !void {
        if (mbind_set_root_bone == null) {
            mbind_set_root_bone = try api.createMethod("SkeletonIK", "set_root_bone");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_root_bone),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_root_bone, base, cargs, result);
    }

    pub fn setTargetNode(self: *const Self, arg_node: *const godot.NodePath) !void {
        if (mbind_set_target_node == null) {
            mbind_set_target_node = try api.createMethod("SkeletonIK", "set_target_node");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_target_node, base, cargs, result);
    }

    pub fn setTargetTransform(self: *const Self, arg_target: *const godot.Transform) !void {
        if (mbind_set_target_transform == null) {
            mbind_set_target_transform = try api.createMethod("SkeletonIK", "set_target_transform");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_target),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_target_transform, base, cargs, result);
    }

    pub fn setTipBone(self: *const Self, arg_tip_bone: *const godot.String) !void {
        if (mbind_set_tip_bone == null) {
            mbind_set_tip_bone = try api.createMethod("SkeletonIK", "set_tip_bone");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_tip_bone),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tip_bone, base, cargs, result);
    }

    pub fn setUseMagnet(self: *const Self, arg_use: bool) !void {
        if (mbind_set_use_magnet == null) {
            mbind_set_use_magnet = try api.createMethod("SkeletonIK", "set_use_magnet");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_use),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_use_magnet, base, cargs, result);
    }

    pub fn start(self: *const Self, arg_one_time: bool) !void {
        if (mbind_start == null) {
            mbind_start = try api.createMethod("SkeletonIK", "start");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_one_time),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_start, base, cargs, result);
    }

    pub fn stop(self: *const Self) !void {
        if (mbind_stop == null) {
            mbind_stop = try api.createMethod("SkeletonIK", "stop");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_stop, base, cargs, result);
    }
};