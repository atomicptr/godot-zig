// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node = @import("node.zig").Node;

// method bindings
var mbind_advance: ?*c_api.godot_method_bind = null;
var mbind_get_animation_player: ?*c_api.godot_method_bind = null;
var mbind_get_process_mode: ?*c_api.godot_method_bind = null;
var mbind_get_root_motion_track: ?*c_api.godot_method_bind = null;
var mbind_get_root_motion_transform: ?*c_api.godot_method_bind = null;
var mbind_get_tree_root: ?*c_api.godot_method_bind = null;
var mbind_is_active: ?*c_api.godot_method_bind = null;
var mbind_rename_parameter: ?*c_api.godot_method_bind = null;
var mbind_set_active: ?*c_api.godot_method_bind = null;
var mbind_set_animation_player: ?*c_api.godot_method_bind = null;
var mbind_set_process_mode: ?*c_api.godot_method_bind = null;
var mbind_set_root_motion_track: ?*c_api.godot_method_bind = null;
var mbind_set_tree_root: ?*c_api.godot_method_bind = null;
var mbind_animation_tree_constructor: ?fn () ?*c_api.godot_object = null;

pub const AnimationTree = struct {
    const Self = @This();
    const BaseClass = Node;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_animation_tree_constructor == null) {
            mbind_animation_tree_constructor = try api.createConstructor("AnimationTree");
        }
        return api.createObject(Self, mbind_animation_tree_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn advance(self: *const Self, arg_delta: f32) !void {
        if (mbind_advance == null) {
            mbind_advance = try api.createMethod("AnimationTree", "advance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_delta),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_advance, base, cargs, result);
    }

    pub fn getAnimationPlayer(self: *const Self) !godot.NodePath {
        if (mbind_get_animation_player == null) {
            mbind_get_animation_player = try api.createMethod("AnimationTree", "get_animation_player");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_animation_player, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn getProcessMode(self: *const Self) !i32 {
        if (mbind_get_process_mode == null) {
            mbind_get_process_mode = try api.createMethod("AnimationTree", "get_process_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_process_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getRootMotionTrack(self: *const Self) !godot.NodePath {
        if (mbind_get_root_motion_track == null) {
            mbind_get_root_motion_track = try api.createMethod("AnimationTree", "get_root_motion_track");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_root_motion_track, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn getRootMotionTransform(self: *const Self) !godot.Transform {
        if (mbind_get_root_motion_transform == null) {
            mbind_get_root_motion_transform = try api.createMethod("AnimationTree", "get_root_motion_transform");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_root_motion_transform, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getTreeRoot(self: *const Self) !godot.AnimationNode {
        if (mbind_get_tree_root == null) {
            mbind_get_tree_root = try api.createMethod("AnimationTree", "get_tree_root");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tree_root, base, cargs, result);
        return @ptrCast(*godot.AnimationNode, @alignCast(@alignOf(&godot.AnimationNode), result)).*;
    }

    pub fn isActive(self: *const Self) !bool {
        if (mbind_is_active == null) {
            mbind_is_active = try api.createMethod("AnimationTree", "is_active");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_active, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn renameParameter(self: *const Self, arg_old_name: *const godot.String, arg_new_name: *const godot.String) !void {
        if (mbind_rename_parameter == null) {
            mbind_rename_parameter = try api.createMethod("AnimationTree", "rename_parameter");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_old_name),
            @ptrCast(*const anyopaque, arg_new_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_rename_parameter, base, cargs, result);
    }

    pub fn setActive(self: *const Self, arg_active: bool) !void {
        if (mbind_set_active == null) {
            mbind_set_active = try api.createMethod("AnimationTree", "set_active");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_active),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_active, base, cargs, result);
    }

    pub fn setAnimationPlayer(self: *const Self, arg_root: *const godot.NodePath) !void {
        if (mbind_set_animation_player == null) {
            mbind_set_animation_player = try api.createMethod("AnimationTree", "set_animation_player");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_root),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_animation_player, base, cargs, result);
    }

    pub fn setProcessMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_process_mode == null) {
            mbind_set_process_mode = try api.createMethod("AnimationTree", "set_process_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_process_mode, base, cargs, result);
    }

    pub fn setRootMotionTrack(self: *const Self, arg_path: *const godot.NodePath) !void {
        if (mbind_set_root_motion_track == null) {
            mbind_set_root_motion_track = try api.createMethod("AnimationTree", "set_root_motion_track");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_root_motion_track, base, cargs, result);
    }

    pub fn setTreeRoot(self: *const Self, arg_root: *const godot.AnimationNode) !void {
        if (mbind_set_tree_root == null) {
            mbind_set_tree_root = try api.createMethod("AnimationTree", "set_tree_root");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_root),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tree_root, base, cargs, result);
    }
};