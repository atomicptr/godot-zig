// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_shape: ?*c_api.godot_method_bind = null;
var mbind_is_disabled: ?*c_api.godot_method_bind = null;
var mbind_make_convex_from_brothers: ?*c_api.godot_method_bind = null;
var mbind_resource_changed: ?*c_api.godot_method_bind = null;
var mbind_set_disabled: ?*c_api.godot_method_bind = null;
var mbind_set_shape: ?*c_api.godot_method_bind = null;
var mbind_collision_shape_constructor: ?fn () ?*c_api.godot_object = null;

pub const CollisionShape = struct {
    const Self = @This();
    pub const BaseClass = godot.Spatial;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_collision_shape_constructor == null) {
            mbind_collision_shape_constructor = try api.createConstructor("CollisionShape");
        }
        return api.createObject(Self, mbind_collision_shape_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getShape(self: *const Self) !godot.Shape {
        if (mbind_get_shape == null) {
            mbind_get_shape = try api.createMethod("CollisionShape", "get_shape");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shape, base, cargs, result);
        return @ptrCast(*godot.Shape, @alignCast(@alignOf(&godot.Shape), result)).*;
    }

    pub fn isDisabled(self: *const Self) !bool {
        if (mbind_is_disabled == null) {
            mbind_is_disabled = try api.createMethod("CollisionShape", "is_disabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn makeConvexFromBrothers(self: *const Self) !void {
        if (mbind_make_convex_from_brothers == null) {
            mbind_make_convex_from_brothers = try api.createMethod("CollisionShape", "make_convex_from_brothers");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_make_convex_from_brothers, base, cargs, result);
    }

    pub fn resourceChanged(self: *const Self, arg_resource: *const godot.Resource) !void {
        if (mbind_resource_changed == null) {
            mbind_resource_changed = try api.createMethod("CollisionShape", "resource_changed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_resource),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_resource_changed, base, cargs, result);
    }

    pub fn setDisabled(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_disabled == null) {
            mbind_set_disabled = try api.createMethod("CollisionShape", "set_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disabled, base, cargs, result);
    }

    pub fn setShape(self: *const Self, arg_shape: *const godot.Shape) !void {
        if (mbind_set_shape == null) {
            mbind_set_shape = try api.createMethod("CollisionShape", "set_shape");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_shape),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shape, base, cargs, result);
    }
};