// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Spatial = @import("spatial.zig").Spatial;

// method bindings
var mbind_get_controller_id: ?*c_api.godot_method_bind = null;
var mbind_get_controller_name: ?*c_api.godot_method_bind = null;
var mbind_get_hand: ?*c_api.godot_method_bind = null;
var mbind_get_is_active: ?*c_api.godot_method_bind = null;
var mbind_get_joystick_axis: ?*c_api.godot_method_bind = null;
var mbind_get_joystick_id: ?*c_api.godot_method_bind = null;
var mbind_get_mesh: ?*c_api.godot_method_bind = null;
var mbind_get_rumble: ?*c_api.godot_method_bind = null;
var mbind_is_button_pressed: ?*c_api.godot_method_bind = null;
var mbind_set_controller_id: ?*c_api.godot_method_bind = null;
var mbind_set_rumble: ?*c_api.godot_method_bind = null;
var mbind_arvrcontroller_constructor: ?fn () ?*c_api.godot_object = null;

pub const ARVRController = struct {
    const Self = @This();
    const BaseClass = Spatial;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_arvrcontroller_constructor == null) {
            mbind_arvrcontroller_constructor = try api.createConstructor("ARVRController");
        }
        return api.createObject(Self, mbind_arvrcontroller_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getControllerId(self: *const Self) !i32 {
        if (mbind_get_controller_id == null) {
            mbind_get_controller_id = try api.createMethod("ARVRController", "get_controller_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_controller_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getControllerName(self: *const Self) !godot.String {
        if (mbind_get_controller_name == null) {
            mbind_get_controller_name = try api.createMethod("ARVRController", "get_controller_name");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_controller_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getHand(self: *const Self) !i32 {
        if (mbind_get_hand == null) {
            mbind_get_hand = try api.createMethod("ARVRController", "get_hand");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_hand, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getIsActive(self: *const Self) !bool {
        if (mbind_get_is_active == null) {
            mbind_get_is_active = try api.createMethod("ARVRController", "get_is_active");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_is_active, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getJoystickAxis(self: *const Self, arg_axis: i32) !f32 {
        if (mbind_get_joystick_axis == null) {
            mbind_get_joystick_axis = try api.createMethod("ARVRController", "get_joystick_axis");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_axis),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joystick_axis, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getJoystickId(self: *const Self) !i32 {
        if (mbind_get_joystick_id == null) {
            mbind_get_joystick_id = try api.createMethod("ARVRController", "get_joystick_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joystick_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMesh(self: *const Self) !godot.Mesh {
        if (mbind_get_mesh == null) {
            mbind_get_mesh = try api.createMethod("ARVRController", "get_mesh");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mesh, base, cargs, result);
        return @ptrCast(*godot.Mesh, @alignCast(@alignOf(&godot.Mesh), result)).*;
    }

    pub fn getRumble(self: *const Self) !f32 {
        if (mbind_get_rumble == null) {
            mbind_get_rumble = try api.createMethod("ARVRController", "get_rumble");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rumble, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn isButtonPressed(self: *const Self, arg_button: i32) !i32 {
        if (mbind_is_button_pressed == null) {
            mbind_is_button_pressed = try api.createMethod("ARVRController", "is_button_pressed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_button),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_button_pressed, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setControllerId(self: *const Self, arg_controller_id: i32) !void {
        if (mbind_set_controller_id == null) {
            mbind_set_controller_id = try api.createMethod("ARVRController", "set_controller_id");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_controller_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_controller_id, base, cargs, result);
    }

    pub fn setRumble(self: *const Self, arg_rumble: f32) !void {
        if (mbind_set_rumble == null) {
            mbind_set_rumble = try api.createMethod("ARVRController", "set_rumble");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_rumble),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rumble, base, cargs, result);
    }
};