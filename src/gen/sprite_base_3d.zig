// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const GeometryInstance = @import("geometry_instance.zig").GeometryInstance;

// method bindings
var mbind_generate_triangle_mesh: ?*c_api.godot_method_bind = null;
var mbind_get_alpha_cut_mode: ?*c_api.godot_method_bind = null;
var mbind_get_axis: ?*c_api.godot_method_bind = null;
var mbind_get_billboard_mode: ?*c_api.godot_method_bind = null;
var mbind_get_draw_flag: ?*c_api.godot_method_bind = null;
var mbind_get_item_rect: ?*c_api.godot_method_bind = null;
var mbind_get_modulate: ?*c_api.godot_method_bind = null;
var mbind_get_offset: ?*c_api.godot_method_bind = null;
var mbind_get_opacity: ?*c_api.godot_method_bind = null;
var mbind_get_pixel_size: ?*c_api.godot_method_bind = null;
var mbind_is_centered: ?*c_api.godot_method_bind = null;
var mbind_is_flipped_h: ?*c_api.godot_method_bind = null;
var mbind_is_flipped_v: ?*c_api.godot_method_bind = null;
var mbind_set_alpha_cut_mode: ?*c_api.godot_method_bind = null;
var mbind_set_axis: ?*c_api.godot_method_bind = null;
var mbind_set_billboard_mode: ?*c_api.godot_method_bind = null;
var mbind_set_centered: ?*c_api.godot_method_bind = null;
var mbind_set_draw_flag: ?*c_api.godot_method_bind = null;
var mbind_set_flip_h: ?*c_api.godot_method_bind = null;
var mbind_set_flip_v: ?*c_api.godot_method_bind = null;
var mbind_set_modulate: ?*c_api.godot_method_bind = null;
var mbind_set_offset: ?*c_api.godot_method_bind = null;
var mbind_set_opacity: ?*c_api.godot_method_bind = null;
var mbind_set_pixel_size: ?*c_api.godot_method_bind = null;
var mbind_sprite_base_3d_constructor: ?fn () ?*c_api.godot_object = null;

pub const SpriteBase3D = struct {
    const Self = @This();
    const BaseClass = GeometryInstance;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_sprite_base_3d_constructor == null) {
            mbind_sprite_base_3d_constructor = try api.createConstructor("SpriteBase3D");
        }
        return api.createObject(Self, mbind_sprite_base_3d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn generateTriangleMesh(self: *const Self) !godot.TriangleMesh {
        if (mbind_generate_triangle_mesh == null) {
            mbind_generate_triangle_mesh = try api.createMethod("SpriteBase3D", "generate_triangle_mesh");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_generate_triangle_mesh, base, cargs, result);
        return @ptrCast(*godot.TriangleMesh, @alignCast(@alignOf(&godot.TriangleMesh), result)).*;
    }

    pub fn getAlphaCutMode(self: *const Self) !i32 {
        if (mbind_get_alpha_cut_mode == null) {
            mbind_get_alpha_cut_mode = try api.createMethod("SpriteBase3D", "get_alpha_cut_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_alpha_cut_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getAxis(self: *const Self) !i32 {
        if (mbind_get_axis == null) {
            mbind_get_axis = try api.createMethod("SpriteBase3D", "get_axis");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_axis, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBillboardMode(self: *const Self) !i32 {
        if (mbind_get_billboard_mode == null) {
            mbind_get_billboard_mode = try api.createMethod("SpriteBase3D", "get_billboard_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_billboard_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDrawFlag(self: *const Self, arg_flag: i32) !bool {
        if (mbind_get_draw_flag == null) {
            mbind_get_draw_flag = try api.createMethod("SpriteBase3D", "get_draw_flag");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flag),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_draw_flag, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getItemRect(self: *const Self) !godot.Rect2 {
        if (mbind_get_item_rect == null) {
            mbind_get_item_rect = try api.createMethod("SpriteBase3D", "get_item_rect");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_item_rect, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn getModulate(self: *const Self) !godot.Color {
        if (mbind_get_modulate == null) {
            mbind_get_modulate = try api.createMethod("SpriteBase3D", "get_modulate");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_modulate, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getOffset(self: *const Self) !godot.Vector2 {
        if (mbind_get_offset == null) {
            mbind_get_offset = try api.createMethod("SpriteBase3D", "get_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_offset, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getOpacity(self: *const Self) !f32 {
        if (mbind_get_opacity == null) {
            mbind_get_opacity = try api.createMethod("SpriteBase3D", "get_opacity");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_opacity, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getPixelSize(self: *const Self) !f32 {
        if (mbind_get_pixel_size == null) {
            mbind_get_pixel_size = try api.createMethod("SpriteBase3D", "get_pixel_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pixel_size, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn isCentered(self: *const Self) !bool {
        if (mbind_is_centered == null) {
            mbind_is_centered = try api.createMethod("SpriteBase3D", "is_centered");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_centered, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFlippedH(self: *const Self) !bool {
        if (mbind_is_flipped_h == null) {
            mbind_is_flipped_h = try api.createMethod("SpriteBase3D", "is_flipped_h");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_flipped_h, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFlippedV(self: *const Self) !bool {
        if (mbind_is_flipped_v == null) {
            mbind_is_flipped_v = try api.createMethod("SpriteBase3D", "is_flipped_v");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_flipped_v, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setAlphaCutMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_alpha_cut_mode == null) {
            mbind_set_alpha_cut_mode = try api.createMethod("SpriteBase3D", "set_alpha_cut_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_alpha_cut_mode, base, cargs, result);
    }

    pub fn setAxis(self: *const Self, arg_axis: i32) !void {
        if (mbind_set_axis == null) {
            mbind_set_axis = try api.createMethod("SpriteBase3D", "set_axis");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_axis),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_axis, base, cargs, result);
    }

    pub fn setBillboardMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_billboard_mode == null) {
            mbind_set_billboard_mode = try api.createMethod("SpriteBase3D", "set_billboard_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_billboard_mode, base, cargs, result);
    }

    pub fn setCentered(self: *const Self, arg_centered: bool) !void {
        if (mbind_set_centered == null) {
            mbind_set_centered = try api.createMethod("SpriteBase3D", "set_centered");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_centered),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_centered, base, cargs, result);
    }

    pub fn setDrawFlag(self: *const Self, arg_flag: i32, arg_enabled: bool) !void {
        if (mbind_set_draw_flag == null) {
            mbind_set_draw_flag = try api.createMethod("SpriteBase3D", "set_draw_flag");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flag),
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_draw_flag, base, cargs, result);
    }

    pub fn setFlipH(self: *const Self, arg_flip_h: bool) !void {
        if (mbind_set_flip_h == null) {
            mbind_set_flip_h = try api.createMethod("SpriteBase3D", "set_flip_h");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flip_h),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_flip_h, base, cargs, result);
    }

    pub fn setFlipV(self: *const Self, arg_flip_v: bool) !void {
        if (mbind_set_flip_v == null) {
            mbind_set_flip_v = try api.createMethod("SpriteBase3D", "set_flip_v");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flip_v),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_flip_v, base, cargs, result);
    }

    pub fn setModulate(self: *const Self, arg_modulate: *const godot.Color) !void {
        if (mbind_set_modulate == null) {
            mbind_set_modulate = try api.createMethod("SpriteBase3D", "set_modulate");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_modulate),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_modulate, base, cargs, result);
    }

    pub fn setOffset(self: *const Self, arg_offset: *const godot.Vector2) !void {
        if (mbind_set_offset == null) {
            mbind_set_offset = try api.createMethod("SpriteBase3D", "set_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_offset, base, cargs, result);
    }

    pub fn setOpacity(self: *const Self, arg_opacity: f32) !void {
        if (mbind_set_opacity == null) {
            mbind_set_opacity = try api.createMethod("SpriteBase3D", "set_opacity");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_opacity),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_opacity, base, cargs, result);
    }

    pub fn setPixelSize(self: *const Self, arg_pixel_size: f32) !void {
        if (mbind_set_pixel_size == null) {
            mbind_set_pixel_size = try api.createMethod("SpriteBase3D", "set_pixel_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pixel_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pixel_size, base, cargs, result);
    }
};