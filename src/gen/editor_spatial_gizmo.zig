// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const SpatialGizmo = @import("spatial_gizmo.zig").SpatialGizmo;

// method bindings
var mbind_add_collision_segments: ?*c_api.godot_method_bind = null;
var mbind_add_collision_triangles: ?*c_api.godot_method_bind = null;
var mbind_add_handles: ?*c_api.godot_method_bind = null;
var mbind_add_lines: ?*c_api.godot_method_bind = null;
var mbind_add_mesh: ?*c_api.godot_method_bind = null;
var mbind_add_unscaled_billboard: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_get_plugin: ?*c_api.godot_method_bind = null;
var mbind_get_spatial_node: ?*c_api.godot_method_bind = null;
var mbind_set_hidden: ?*c_api.godot_method_bind = null;
var mbind_set_spatial_node: ?*c_api.godot_method_bind = null;
var mbind_editor_spatial_gizmo_constructor: ?fn () ?*c_api.godot_object = null;

pub const EditorSpatialGizmo = struct {
    const Self = @This();
    const BaseClass = SpatialGizmo;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_editor_spatial_gizmo_constructor == null) {
            mbind_editor_spatial_gizmo_constructor = try api.createConstructor("EditorSpatialGizmo");
        }
        return api.createObject(Self, mbind_editor_spatial_gizmo_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addCollisionSegments(self: *const Self, arg_segments: *const godot.PoolVector3Array) !void {
        if (mbind_add_collision_segments == null) {
            mbind_add_collision_segments = try api.createMethod("EditorSpatialGizmo", "add_collision_segments");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_segments),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_collision_segments, base, cargs, result);
    }

    pub fn addCollisionTriangles(self: *const Self, arg_triangles: *const godot.TriangleMesh) !void {
        if (mbind_add_collision_triangles == null) {
            mbind_add_collision_triangles = try api.createMethod("EditorSpatialGizmo", "add_collision_triangles");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_triangles),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_collision_triangles, base, cargs, result);
    }

    pub fn addHandles(self: *const Self, arg_handles: *const godot.PoolVector3Array, arg_material: *const godot.Material, arg_billboard: bool, arg_secondary: bool) !void {
        if (mbind_add_handles == null) {
            mbind_add_handles = try api.createMethod("EditorSpatialGizmo", "add_handles");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_handles),
            @ptrCast(*const anyopaque, arg_material),
            @ptrCast(*const anyopaque, *arg_billboard),
            @ptrCast(*const anyopaque, *arg_secondary),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_handles, base, cargs, result);
    }

    pub fn addLines(self: *const Self, arg_lines: *const godot.PoolVector3Array, arg_material: *const godot.Material, arg_billboard: bool, arg_modulate: *const godot.Color) !void {
        if (mbind_add_lines == null) {
            mbind_add_lines = try api.createMethod("EditorSpatialGizmo", "add_lines");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_lines),
            @ptrCast(*const anyopaque, arg_material),
            @ptrCast(*const anyopaque, *arg_billboard),
            @ptrCast(*const anyopaque, arg_modulate),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_lines, base, cargs, result);
    }

    pub fn addMesh(self: *const Self, arg_mesh: *const godot.Mesh, arg_billboard: bool, arg_skeleton: *const godot.SkinReference, arg_material: *const godot.Material) !void {
        if (mbind_add_mesh == null) {
            mbind_add_mesh = try api.createMethod("EditorSpatialGizmo", "add_mesh");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mesh),
            @ptrCast(*const anyopaque, *arg_billboard),
            @ptrCast(*const anyopaque, arg_skeleton),
            @ptrCast(*const anyopaque, arg_material),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_mesh, base, cargs, result);
    }

    pub fn addUnscaledBillboard(self: *const Self, arg_material: *const godot.Material, arg_default_scale: f32, arg_modulate: *const godot.Color) !void {
        if (mbind_add_unscaled_billboard == null) {
            mbind_add_unscaled_billboard = try api.createMethod("EditorSpatialGizmo", "add_unscaled_billboard");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_material),
            @ptrCast(*const anyopaque, *arg_default_scale),
            @ptrCast(*const anyopaque, arg_modulate),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_unscaled_billboard, base, cargs, result);
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("EditorSpatialGizmo", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn getPlugin(self: *const Self) !godot.EditorSpatialGizmoPlugin {
        if (mbind_get_plugin == null) {
            mbind_get_plugin = try api.createMethod("EditorSpatialGizmo", "get_plugin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_plugin, base, cargs, result);
        return @ptrCast(*godot.EditorSpatialGizmoPlugin, @alignCast(@alignOf(&godot.EditorSpatialGizmoPlugin), result)).*;
    }

    pub fn getSpatialNode(self: *const Self) !godot.Spatial {
        if (mbind_get_spatial_node == null) {
            mbind_get_spatial_node = try api.createMethod("EditorSpatialGizmo", "get_spatial_node");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_spatial_node, base, cargs, result);
        return @ptrCast(*godot.Spatial, @alignCast(@alignOf(&godot.Spatial), result)).*;
    }

    pub fn setHidden(self: *const Self, arg_hidden: bool) !void {
        if (mbind_set_hidden == null) {
            mbind_set_hidden = try api.createMethod("EditorSpatialGizmo", "set_hidden");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_hidden),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_hidden, base, cargs, result);
    }

    pub fn setSpatialNode(self: *const Self, arg_node: *const godot.Node) !void {
        if (mbind_set_spatial_node == null) {
            mbind_set_spatial_node = try api.createMethod("EditorSpatialGizmo", "set_spatial_node");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_spatial_node, base, cargs, result);
    }
};