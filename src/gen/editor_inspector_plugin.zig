// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_add_custom_control: ?*c_api.godot_method_bind = null;
var mbind_add_property_editor: ?*c_api.godot_method_bind = null;
var mbind_add_property_editor_for_multiple_properties: ?*c_api.godot_method_bind = null;
var mbind_editor_inspector_plugin_constructor: ?fn () ?*c_api.godot_object = null;

pub const EditorInspectorPlugin = struct {
    const Self = @This();
    const BaseClass = Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_editor_inspector_plugin_constructor == null) {
            mbind_editor_inspector_plugin_constructor = try api.createConstructor("EditorInspectorPlugin");
        }
        return api.createObject(Self, mbind_editor_inspector_plugin_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addCustomControl(self: *const Self, arg_control: *const godot.Control) !void {
        if (mbind_add_custom_control == null) {
            mbind_add_custom_control = try api.createMethod("EditorInspectorPlugin", "add_custom_control");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_control),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_custom_control, base, cargs, result);
    }

    pub fn addPropertyEditor(self: *const Self, arg_property: *const godot.String, arg_editor: *const godot.Control) !void {
        if (mbind_add_property_editor == null) {
            mbind_add_property_editor = try api.createMethod("EditorInspectorPlugin", "add_property_editor");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_property),
            @ptrCast(*const anyopaque, arg_editor),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_property_editor, base, cargs, result);
    }

    pub fn addPropertyEditorForMultipleProperties(self: *const Self, arg_label: *const godot.String, arg_properties: *const godot.PoolStringArray, arg_editor: *const godot.Control) !void {
        if (mbind_add_property_editor_for_multiple_properties == null) {
            mbind_add_property_editor_for_multiple_properties = try api.createMethod("EditorInspectorPlugin", "add_property_editor_for_multiple_properties");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_label),
            @ptrCast(*const anyopaque, arg_properties),
            @ptrCast(*const anyopaque, arg_editor),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_property_editor_for_multiple_properties, base, cargs, result);
    }
};