// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const GeometryInstance = @import("geometry_instance.zig").GeometryInstance;

// method bindings
var mbind_convert_from_particles: ?*c_api.godot_method_bind = null;
var mbind_get_amount: ?*c_api.godot_method_bind = null;
var mbind_get_color: ?*c_api.godot_method_bind = null;
var mbind_get_color_ramp: ?*c_api.godot_method_bind = null;
var mbind_get_direction: ?*c_api.godot_method_bind = null;
var mbind_get_draw_order: ?*c_api.godot_method_bind = null;
var mbind_get_emission_box_extents: ?*c_api.godot_method_bind = null;
var mbind_get_emission_colors: ?*c_api.godot_method_bind = null;
var mbind_get_emission_normals: ?*c_api.godot_method_bind = null;
var mbind_get_emission_points: ?*c_api.godot_method_bind = null;
var mbind_get_emission_ring_axis: ?*c_api.godot_method_bind = null;
var mbind_get_emission_ring_height: ?*c_api.godot_method_bind = null;
var mbind_get_emission_ring_inner_radius: ?*c_api.godot_method_bind = null;
var mbind_get_emission_ring_radius: ?*c_api.godot_method_bind = null;
var mbind_get_emission_shape: ?*c_api.godot_method_bind = null;
var mbind_get_emission_sphere_radius: ?*c_api.godot_method_bind = null;
var mbind_get_explosiveness_ratio: ?*c_api.godot_method_bind = null;
var mbind_get_fixed_fps: ?*c_api.godot_method_bind = null;
var mbind_get_flatness: ?*c_api.godot_method_bind = null;
var mbind_get_fractional_delta: ?*c_api.godot_method_bind = null;
var mbind_get_gravity: ?*c_api.godot_method_bind = null;
var mbind_get_lifetime: ?*c_api.godot_method_bind = null;
var mbind_get_lifetime_randomness: ?*c_api.godot_method_bind = null;
var mbind_get_mesh: ?*c_api.godot_method_bind = null;
var mbind_get_one_shot: ?*c_api.godot_method_bind = null;
var mbind_get_param: ?*c_api.godot_method_bind = null;
var mbind_get_param_curve: ?*c_api.godot_method_bind = null;
var mbind_get_param_randomness: ?*c_api.godot_method_bind = null;
var mbind_get_particle_flag: ?*c_api.godot_method_bind = null;
var mbind_get_pre_process_time: ?*c_api.godot_method_bind = null;
var mbind_get_randomness_ratio: ?*c_api.godot_method_bind = null;
var mbind_get_speed_scale: ?*c_api.godot_method_bind = null;
var mbind_get_spread: ?*c_api.godot_method_bind = null;
var mbind_get_use_local_coordinates: ?*c_api.godot_method_bind = null;
var mbind_is_emitting: ?*c_api.godot_method_bind = null;
var mbind_restart: ?*c_api.godot_method_bind = null;
var mbind_set_amount: ?*c_api.godot_method_bind = null;
var mbind_set_color: ?*c_api.godot_method_bind = null;
var mbind_set_color_ramp: ?*c_api.godot_method_bind = null;
var mbind_set_direction: ?*c_api.godot_method_bind = null;
var mbind_set_draw_order: ?*c_api.godot_method_bind = null;
var mbind_set_emission_box_extents: ?*c_api.godot_method_bind = null;
var mbind_set_emission_colors: ?*c_api.godot_method_bind = null;
var mbind_set_emission_normals: ?*c_api.godot_method_bind = null;
var mbind_set_emission_points: ?*c_api.godot_method_bind = null;
var mbind_set_emission_ring_axis: ?*c_api.godot_method_bind = null;
var mbind_set_emission_ring_height: ?*c_api.godot_method_bind = null;
var mbind_set_emission_ring_inner_radius: ?*c_api.godot_method_bind = null;
var mbind_set_emission_ring_radius: ?*c_api.godot_method_bind = null;
var mbind_set_emission_shape: ?*c_api.godot_method_bind = null;
var mbind_set_emission_sphere_radius: ?*c_api.godot_method_bind = null;
var mbind_set_emitting: ?*c_api.godot_method_bind = null;
var mbind_set_explosiveness_ratio: ?*c_api.godot_method_bind = null;
var mbind_set_fixed_fps: ?*c_api.godot_method_bind = null;
var mbind_set_flatness: ?*c_api.godot_method_bind = null;
var mbind_set_fractional_delta: ?*c_api.godot_method_bind = null;
var mbind_set_gravity: ?*c_api.godot_method_bind = null;
var mbind_set_lifetime: ?*c_api.godot_method_bind = null;
var mbind_set_lifetime_randomness: ?*c_api.godot_method_bind = null;
var mbind_set_mesh: ?*c_api.godot_method_bind = null;
var mbind_set_one_shot: ?*c_api.godot_method_bind = null;
var mbind_set_param: ?*c_api.godot_method_bind = null;
var mbind_set_param_curve: ?*c_api.godot_method_bind = null;
var mbind_set_param_randomness: ?*c_api.godot_method_bind = null;
var mbind_set_particle_flag: ?*c_api.godot_method_bind = null;
var mbind_set_pre_process_time: ?*c_api.godot_method_bind = null;
var mbind_set_randomness_ratio: ?*c_api.godot_method_bind = null;
var mbind_set_speed_scale: ?*c_api.godot_method_bind = null;
var mbind_set_spread: ?*c_api.godot_method_bind = null;
var mbind_set_use_local_coordinates: ?*c_api.godot_method_bind = null;
var mbind_cpuparticles_constructor: ?fn () ?*c_api.godot_object = null;

pub const CPUParticles = struct {
    const Self = @This();
    const BaseClass = GeometryInstance;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_cpuparticles_constructor == null) {
            mbind_cpuparticles_constructor = try api.createConstructor("CPUParticles");
        }
        return api.createObject(Self, mbind_cpuparticles_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn convertFromParticles(self: *const Self, arg_particles: *const godot.Node) !void {
        if (mbind_convert_from_particles == null) {
            mbind_convert_from_particles = try api.createMethod("CPUParticles", "convert_from_particles");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_particles),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_convert_from_particles, base, cargs, result);
    }

    pub fn getAmount(self: *const Self) !i32 {
        if (mbind_get_amount == null) {
            mbind_get_amount = try api.createMethod("CPUParticles", "get_amount");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_amount, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getColor(self: *const Self) !godot.Color {
        if (mbind_get_color == null) {
            mbind_get_color = try api.createMethod("CPUParticles", "get_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getColorRamp(self: *const Self) !godot.Gradient {
        if (mbind_get_color_ramp == null) {
            mbind_get_color_ramp = try api.createMethod("CPUParticles", "get_color_ramp");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_color_ramp, base, cargs, result);
        return @ptrCast(*godot.Gradient, @alignCast(@alignOf(&godot.Gradient), result)).*;
    }

    pub fn getDirection(self: *const Self) !godot.Vector3 {
        if (mbind_get_direction == null) {
            mbind_get_direction = try api.createMethod("CPUParticles", "get_direction");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_direction, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getDrawOrder(self: *const Self) !i32 {
        if (mbind_get_draw_order == null) {
            mbind_get_draw_order = try api.createMethod("CPUParticles", "get_draw_order");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_draw_order, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getEmissionBoxExtents(self: *const Self) !godot.Vector3 {
        if (mbind_get_emission_box_extents == null) {
            mbind_get_emission_box_extents = try api.createMethod("CPUParticles", "get_emission_box_extents");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_box_extents, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getEmissionColors(self: *const Self) !godot.PoolColorArray {
        if (mbind_get_emission_colors == null) {
            mbind_get_emission_colors = try api.createMethod("CPUParticles", "get_emission_colors");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_colors, base, cargs, result);
        return @ptrCast(*godot.PoolColorArray, @alignCast(@alignOf(&godot.PoolColorArray), result)).*;
    }

    pub fn getEmissionNormals(self: *const Self) !godot.PoolVector3Array {
        if (mbind_get_emission_normals == null) {
            mbind_get_emission_normals = try api.createMethod("CPUParticles", "get_emission_normals");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_normals, base, cargs, result);
        return @ptrCast(*godot.PoolVector3Array, @alignCast(@alignOf(&godot.PoolVector3Array), result)).*;
    }

    pub fn getEmissionPoints(self: *const Self) !godot.PoolVector3Array {
        if (mbind_get_emission_points == null) {
            mbind_get_emission_points = try api.createMethod("CPUParticles", "get_emission_points");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_points, base, cargs, result);
        return @ptrCast(*godot.PoolVector3Array, @alignCast(@alignOf(&godot.PoolVector3Array), result)).*;
    }

    pub fn getEmissionRingAxis(self: *const Self) !godot.Vector3 {
        if (mbind_get_emission_ring_axis == null) {
            mbind_get_emission_ring_axis = try api.createMethod("CPUParticles", "get_emission_ring_axis");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_ring_axis, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getEmissionRingHeight(self: *const Self) !f32 {
        if (mbind_get_emission_ring_height == null) {
            mbind_get_emission_ring_height = try api.createMethod("CPUParticles", "get_emission_ring_height");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_ring_height, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getEmissionRingInnerRadius(self: *const Self) !f32 {
        if (mbind_get_emission_ring_inner_radius == null) {
            mbind_get_emission_ring_inner_radius = try api.createMethod("CPUParticles", "get_emission_ring_inner_radius");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_ring_inner_radius, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getEmissionRingRadius(self: *const Self) !f32 {
        if (mbind_get_emission_ring_radius == null) {
            mbind_get_emission_ring_radius = try api.createMethod("CPUParticles", "get_emission_ring_radius");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_ring_radius, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getEmissionShape(self: *const Self) !i32 {
        if (mbind_get_emission_shape == null) {
            mbind_get_emission_shape = try api.createMethod("CPUParticles", "get_emission_shape");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_shape, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getEmissionSphereRadius(self: *const Self) !f32 {
        if (mbind_get_emission_sphere_radius == null) {
            mbind_get_emission_sphere_radius = try api.createMethod("CPUParticles", "get_emission_sphere_radius");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_sphere_radius, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getExplosivenessRatio(self: *const Self) !f32 {
        if (mbind_get_explosiveness_ratio == null) {
            mbind_get_explosiveness_ratio = try api.createMethod("CPUParticles", "get_explosiveness_ratio");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_explosiveness_ratio, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFixedFps(self: *const Self) !i32 {
        if (mbind_get_fixed_fps == null) {
            mbind_get_fixed_fps = try api.createMethod("CPUParticles", "get_fixed_fps");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fixed_fps, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFlatness(self: *const Self) !f32 {
        if (mbind_get_flatness == null) {
            mbind_get_flatness = try api.createMethod("CPUParticles", "get_flatness");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_flatness, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFractionalDelta(self: *const Self) !bool {
        if (mbind_get_fractional_delta == null) {
            mbind_get_fractional_delta = try api.createMethod("CPUParticles", "get_fractional_delta");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fractional_delta, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getGravity(self: *const Self) !godot.Vector3 {
        if (mbind_get_gravity == null) {
            mbind_get_gravity = try api.createMethod("CPUParticles", "get_gravity");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_gravity, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getLifetime(self: *const Self) !f32 {
        if (mbind_get_lifetime == null) {
            mbind_get_lifetime = try api.createMethod("CPUParticles", "get_lifetime");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_lifetime, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getLifetimeRandomness(self: *const Self) !f32 {
        if (mbind_get_lifetime_randomness == null) {
            mbind_get_lifetime_randomness = try api.createMethod("CPUParticles", "get_lifetime_randomness");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_lifetime_randomness, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getMesh(self: *const Self) !godot.Mesh {
        if (mbind_get_mesh == null) {
            mbind_get_mesh = try api.createMethod("CPUParticles", "get_mesh");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mesh, base, cargs, result);
        return @ptrCast(*godot.Mesh, @alignCast(@alignOf(&godot.Mesh), result)).*;
    }

    pub fn getOneShot(self: *const Self) !bool {
        if (mbind_get_one_shot == null) {
            mbind_get_one_shot = try api.createMethod("CPUParticles", "get_one_shot");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_one_shot, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getParam(self: *const Self, arg_param: i32) !f32 {
        if (mbind_get_param == null) {
            mbind_get_param = try api.createMethod("CPUParticles", "get_param");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_param, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getParamCurve(self: *const Self, arg_param: i32) !godot.Curve {
        if (mbind_get_param_curve == null) {
            mbind_get_param_curve = try api.createMethod("CPUParticles", "get_param_curve");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_param_curve, base, cargs, result);
        return @ptrCast(*godot.Curve, @alignCast(@alignOf(&godot.Curve), result)).*;
    }

    pub fn getParamRandomness(self: *const Self, arg_param: i32) !f32 {
        if (mbind_get_param_randomness == null) {
            mbind_get_param_randomness = try api.createMethod("CPUParticles", "get_param_randomness");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_param_randomness, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getParticleFlag(self: *const Self, arg_flag: i32) !bool {
        if (mbind_get_particle_flag == null) {
            mbind_get_particle_flag = try api.createMethod("CPUParticles", "get_particle_flag");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flag),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_particle_flag, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getPreProcessTime(self: *const Self) !f32 {
        if (mbind_get_pre_process_time == null) {
            mbind_get_pre_process_time = try api.createMethod("CPUParticles", "get_pre_process_time");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pre_process_time, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRandomnessRatio(self: *const Self) !f32 {
        if (mbind_get_randomness_ratio == null) {
            mbind_get_randomness_ratio = try api.createMethod("CPUParticles", "get_randomness_ratio");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_randomness_ratio, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSpeedScale(self: *const Self) !f32 {
        if (mbind_get_speed_scale == null) {
            mbind_get_speed_scale = try api.createMethod("CPUParticles", "get_speed_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_speed_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSpread(self: *const Self) !f32 {
        if (mbind_get_spread == null) {
            mbind_get_spread = try api.createMethod("CPUParticles", "get_spread");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_spread, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getUseLocalCoordinates(self: *const Self) !bool {
        if (mbind_get_use_local_coordinates == null) {
            mbind_get_use_local_coordinates = try api.createMethod("CPUParticles", "get_use_local_coordinates");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_use_local_coordinates, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isEmitting(self: *const Self) !bool {
        if (mbind_is_emitting == null) {
            mbind_is_emitting = try api.createMethod("CPUParticles", "is_emitting");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_emitting, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn restart(self: *const Self) !void {
        if (mbind_restart == null) {
            mbind_restart = try api.createMethod("CPUParticles", "restart");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_restart, base, cargs, result);
    }

    pub fn setAmount(self: *const Self, arg_amount: i32) !void {
        if (mbind_set_amount == null) {
            mbind_set_amount = try api.createMethod("CPUParticles", "set_amount");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_amount, base, cargs, result);
    }

    pub fn setColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_color == null) {
            mbind_set_color = try api.createMethod("CPUParticles", "set_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_color, base, cargs, result);
    }

    pub fn setColorRamp(self: *const Self, arg_ramp: *const godot.Gradient) !void {
        if (mbind_set_color_ramp == null) {
            mbind_set_color_ramp = try api.createMethod("CPUParticles", "set_color_ramp");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_ramp),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_color_ramp, base, cargs, result);
    }

    pub fn setDirection(self: *const Self, arg_direction: *const godot.Vector3) !void {
        if (mbind_set_direction == null) {
            mbind_set_direction = try api.createMethod("CPUParticles", "set_direction");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_direction),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_direction, base, cargs, result);
    }

    pub fn setDrawOrder(self: *const Self, arg_order: i32) !void {
        if (mbind_set_draw_order == null) {
            mbind_set_draw_order = try api.createMethod("CPUParticles", "set_draw_order");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_order),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_draw_order, base, cargs, result);
    }

    pub fn setEmissionBoxExtents(self: *const Self, arg_extents: *const godot.Vector3) !void {
        if (mbind_set_emission_box_extents == null) {
            mbind_set_emission_box_extents = try api.createMethod("CPUParticles", "set_emission_box_extents");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_extents),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_box_extents, base, cargs, result);
    }

    pub fn setEmissionColors(self: *const Self, arg_array: *const godot.PoolColorArray) !void {
        if (mbind_set_emission_colors == null) {
            mbind_set_emission_colors = try api.createMethod("CPUParticles", "set_emission_colors");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_array),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_colors, base, cargs, result);
    }

    pub fn setEmissionNormals(self: *const Self, arg_array: *const godot.PoolVector3Array) !void {
        if (mbind_set_emission_normals == null) {
            mbind_set_emission_normals = try api.createMethod("CPUParticles", "set_emission_normals");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_array),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_normals, base, cargs, result);
    }

    pub fn setEmissionPoints(self: *const Self, arg_array: *const godot.PoolVector3Array) !void {
        if (mbind_set_emission_points == null) {
            mbind_set_emission_points = try api.createMethod("CPUParticles", "set_emission_points");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_array),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_points, base, cargs, result);
    }

    pub fn setEmissionRingAxis(self: *const Self, arg_axis: *const godot.Vector3) !void {
        if (mbind_set_emission_ring_axis == null) {
            mbind_set_emission_ring_axis = try api.createMethod("CPUParticles", "set_emission_ring_axis");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_axis),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_ring_axis, base, cargs, result);
    }

    pub fn setEmissionRingHeight(self: *const Self, arg_height: f32) !void {
        if (mbind_set_emission_ring_height == null) {
            mbind_set_emission_ring_height = try api.createMethod("CPUParticles", "set_emission_ring_height");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_height),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_ring_height, base, cargs, result);
    }

    pub fn setEmissionRingInnerRadius(self: *const Self, arg_offset: f32) !void {
        if (mbind_set_emission_ring_inner_radius == null) {
            mbind_set_emission_ring_inner_radius = try api.createMethod("CPUParticles", "set_emission_ring_inner_radius");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_ring_inner_radius, base, cargs, result);
    }

    pub fn setEmissionRingRadius(self: *const Self, arg_radius: f32) !void {
        if (mbind_set_emission_ring_radius == null) {
            mbind_set_emission_ring_radius = try api.createMethod("CPUParticles", "set_emission_ring_radius");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radius),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_ring_radius, base, cargs, result);
    }

    pub fn setEmissionShape(self: *const Self, arg_shape: i32) !void {
        if (mbind_set_emission_shape == null) {
            mbind_set_emission_shape = try api.createMethod("CPUParticles", "set_emission_shape");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_shape),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_shape, base, cargs, result);
    }

    pub fn setEmissionSphereRadius(self: *const Self, arg_radius: f32) !void {
        if (mbind_set_emission_sphere_radius == null) {
            mbind_set_emission_sphere_radius = try api.createMethod("CPUParticles", "set_emission_sphere_radius");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radius),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_sphere_radius, base, cargs, result);
    }

    pub fn setEmitting(self: *const Self, arg_emitting: bool) !void {
        if (mbind_set_emitting == null) {
            mbind_set_emitting = try api.createMethod("CPUParticles", "set_emitting");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_emitting),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emitting, base, cargs, result);
    }

    pub fn setExplosivenessRatio(self: *const Self, arg_ratio: f32) !void {
        if (mbind_set_explosiveness_ratio == null) {
            mbind_set_explosiveness_ratio = try api.createMethod("CPUParticles", "set_explosiveness_ratio");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_ratio),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_explosiveness_ratio, base, cargs, result);
    }

    pub fn setFixedFps(self: *const Self, arg_fps: i32) !void {
        if (mbind_set_fixed_fps == null) {
            mbind_set_fixed_fps = try api.createMethod("CPUParticles", "set_fixed_fps");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_fps),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fixed_fps, base, cargs, result);
    }

    pub fn setFlatness(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_flatness == null) {
            mbind_set_flatness = try api.createMethod("CPUParticles", "set_flatness");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_flatness, base, cargs, result);
    }

    pub fn setFractionalDelta(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_fractional_delta == null) {
            mbind_set_fractional_delta = try api.createMethod("CPUParticles", "set_fractional_delta");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fractional_delta, base, cargs, result);
    }

    pub fn setGravity(self: *const Self, arg_accel_vec: *const godot.Vector3) !void {
        if (mbind_set_gravity == null) {
            mbind_set_gravity = try api.createMethod("CPUParticles", "set_gravity");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_accel_vec),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_gravity, base, cargs, result);
    }

    pub fn setLifetime(self: *const Self, arg_secs: f32) !void {
        if (mbind_set_lifetime == null) {
            mbind_set_lifetime = try api.createMethod("CPUParticles", "set_lifetime");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_secs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_lifetime, base, cargs, result);
    }

    pub fn setLifetimeRandomness(self: *const Self, arg_random: f32) !void {
        if (mbind_set_lifetime_randomness == null) {
            mbind_set_lifetime_randomness = try api.createMethod("CPUParticles", "set_lifetime_randomness");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_random),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_lifetime_randomness, base, cargs, result);
    }

    pub fn setMesh(self: *const Self, arg_mesh: *const godot.Mesh) !void {
        if (mbind_set_mesh == null) {
            mbind_set_mesh = try api.createMethod("CPUParticles", "set_mesh");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mesh),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mesh, base, cargs, result);
    }

    pub fn setOneShot(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_one_shot == null) {
            mbind_set_one_shot = try api.createMethod("CPUParticles", "set_one_shot");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_one_shot, base, cargs, result);
    }

    pub fn setParam(self: *const Self, arg_param: i32, arg_value: f32) !void {
        if (mbind_set_param == null) {
            mbind_set_param = try api.createMethod("CPUParticles", "set_param");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
            @ptrCast(*const anyopaque, *arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_param, base, cargs, result);
    }

    pub fn setParamCurve(self: *const Self, arg_param: i32, arg_curve: *const godot.Curve) !void {
        if (mbind_set_param_curve == null) {
            mbind_set_param_curve = try api.createMethod("CPUParticles", "set_param_curve");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
            @ptrCast(*const anyopaque, arg_curve),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_param_curve, base, cargs, result);
    }

    pub fn setParamRandomness(self: *const Self, arg_param: i32, arg_randomness: f32) !void {
        if (mbind_set_param_randomness == null) {
            mbind_set_param_randomness = try api.createMethod("CPUParticles", "set_param_randomness");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
            @ptrCast(*const anyopaque, *arg_randomness),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_param_randomness, base, cargs, result);
    }

    pub fn setParticleFlag(self: *const Self, arg_flag: i32, arg_enable: bool) !void {
        if (mbind_set_particle_flag == null) {
            mbind_set_particle_flag = try api.createMethod("CPUParticles", "set_particle_flag");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flag),
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_particle_flag, base, cargs, result);
    }

    pub fn setPreProcessTime(self: *const Self, arg_secs: f32) !void {
        if (mbind_set_pre_process_time == null) {
            mbind_set_pre_process_time = try api.createMethod("CPUParticles", "set_pre_process_time");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_secs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pre_process_time, base, cargs, result);
    }

    pub fn setRandomnessRatio(self: *const Self, arg_ratio: f32) !void {
        if (mbind_set_randomness_ratio == null) {
            mbind_set_randomness_ratio = try api.createMethod("CPUParticles", "set_randomness_ratio");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_ratio),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_randomness_ratio, base, cargs, result);
    }

    pub fn setSpeedScale(self: *const Self, arg_scale: f32) !void {
        if (mbind_set_speed_scale == null) {
            mbind_set_speed_scale = try api.createMethod("CPUParticles", "set_speed_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_speed_scale, base, cargs, result);
    }

    pub fn setSpread(self: *const Self, arg_degrees: f32) !void {
        if (mbind_set_spread == null) {
            mbind_set_spread = try api.createMethod("CPUParticles", "set_spread");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_spread, base, cargs, result);
    }

    pub fn setUseLocalCoordinates(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_use_local_coordinates == null) {
            mbind_set_use_local_coordinates = try api.createMethod("CPUParticles", "set_use_local_coordinates");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_use_local_coordinates, base, cargs, result);
    }
};