// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_can_instance: ?*c_api.godot_method_bind = null;
var mbind_get_base_script: ?*c_api.godot_method_bind = null;
var mbind_get_instance_base_type: ?*c_api.godot_method_bind = null;
var mbind_get_property_default_value: ?*c_api.godot_method_bind = null;
var mbind_get_script_constant_map: ?*c_api.godot_method_bind = null;
var mbind_get_script_method_list: ?*c_api.godot_method_bind = null;
var mbind_get_script_property_list: ?*c_api.godot_method_bind = null;
var mbind_get_script_signal_list: ?*c_api.godot_method_bind = null;
var mbind_get_source_code: ?*c_api.godot_method_bind = null;
var mbind_has_script_signal: ?*c_api.godot_method_bind = null;
var mbind_has_source_code: ?*c_api.godot_method_bind = null;
var mbind_instance_has: ?*c_api.godot_method_bind = null;
var mbind_is_tool: ?*c_api.godot_method_bind = null;
var mbind_reload: ?*c_api.godot_method_bind = null;
var mbind_set_source_code: ?*c_api.godot_method_bind = null;
var mbind_script_constructor: ?fn () ?*c_api.godot_object = null;

pub const Script = struct {
    const Self = @This();
    pub const BaseClass = godot.Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_script_constructor == null) {
            mbind_script_constructor = try api.createConstructor("Script");
        }
        return api.createObject(Self, mbind_script_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn canInstance(self: *const Self) !bool {
        if (mbind_can_instance == null) {
            mbind_can_instance = try api.createMethod("Script", "can_instance");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_can_instance, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getBaseScript(self: *const Self) !godot.Script {
        if (mbind_get_base_script == null) {
            mbind_get_base_script = try api.createMethod("Script", "get_base_script");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_base_script, base, cargs, result);
        return @ptrCast(*godot.Script, @alignCast(@alignOf(&godot.Script), result)).*;
    }

    pub fn getInstanceBaseType(self: *const Self) !godot.String {
        if (mbind_get_instance_base_type == null) {
            mbind_get_instance_base_type = try api.createMethod("Script", "get_instance_base_type");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_instance_base_type, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getPropertyDefaultValue(self: *const Self, arg_property: *const godot.String) !godot.Variant {
        if (mbind_get_property_default_value == null) {
            mbind_get_property_default_value = try api.createMethod("Script", "get_property_default_value");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_property),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_property_default_value, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getScriptConstantMap(self: *const Self) !godot.Dictionary {
        if (mbind_get_script_constant_map == null) {
            mbind_get_script_constant_map = try api.createMethod("Script", "get_script_constant_map");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_script_constant_map, base, cargs, result);
        return @ptrCast(*godot.Dictionary, @alignCast(@alignOf(&godot.Dictionary), result)).*;
    }

    pub fn getScriptMethodList(self: *const Self) !godot.Array {
        if (mbind_get_script_method_list == null) {
            mbind_get_script_method_list = try api.createMethod("Script", "get_script_method_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_script_method_list, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getScriptPropertyList(self: *const Self) !godot.Array {
        if (mbind_get_script_property_list == null) {
            mbind_get_script_property_list = try api.createMethod("Script", "get_script_property_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_script_property_list, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getScriptSignalList(self: *const Self) !godot.Array {
        if (mbind_get_script_signal_list == null) {
            mbind_get_script_signal_list = try api.createMethod("Script", "get_script_signal_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_script_signal_list, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getSourceCode(self: *const Self) !godot.String {
        if (mbind_get_source_code == null) {
            mbind_get_source_code = try api.createMethod("Script", "get_source_code");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_source_code, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn hasScriptSignal(self: *const Self, arg_signal_name: *const godot.String) !bool {
        if (mbind_has_script_signal == null) {
            mbind_has_script_signal = try api.createMethod("Script", "has_script_signal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_script_signal, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn hasSourceCode(self: *const Self) !bool {
        if (mbind_has_source_code == null) {
            mbind_has_source_code = try api.createMethod("Script", "has_source_code");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_source_code, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn instanceHas(self: *const Self, arg_base_object: *const godot.Object) !bool {
        if (mbind_instance_has == null) {
            mbind_instance_has = try api.createMethod("Script", "instance_has");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_base_object),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_instance_has, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isTool(self: *const Self) !bool {
        if (mbind_is_tool == null) {
            mbind_is_tool = try api.createMethod("Script", "is_tool");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_tool, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn reload(self: *const Self, arg_keep_state: bool) !i32 {
        if (mbind_reload == null) {
            mbind_reload = try api.createMethod("Script", "reload");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_keep_state),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_reload, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setSourceCode(self: *const Self, arg_source: *const godot.String) !void {
        if (mbind_set_source_code == null) {
            mbind_set_source_code = try api.createMethod("Script", "set_source_code");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_source),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_source_code, base, cargs, result);
    }
};