// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Camera = @import("camera.zig").Camera;

// method bindings
var mbind_add_exception: ?*c_api.godot_method_bind = null;
var mbind_add_exception_rid: ?*c_api.godot_method_bind = null;
var mbind_clear_exceptions: ?*c_api.godot_method_bind = null;
var mbind_get_clip_offset: ?*c_api.godot_method_bind = null;
var mbind_get_collision_mask: ?*c_api.godot_method_bind = null;
var mbind_get_collision_mask_bit: ?*c_api.godot_method_bind = null;
var mbind_get_margin: ?*c_api.godot_method_bind = null;
var mbind_get_process_mode: ?*c_api.godot_method_bind = null;
var mbind_is_clip_to_areas_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_clip_to_bodies_enabled: ?*c_api.godot_method_bind = null;
var mbind_remove_exception: ?*c_api.godot_method_bind = null;
var mbind_remove_exception_rid: ?*c_api.godot_method_bind = null;
var mbind_set_clip_to_areas: ?*c_api.godot_method_bind = null;
var mbind_set_clip_to_bodies: ?*c_api.godot_method_bind = null;
var mbind_set_collision_mask: ?*c_api.godot_method_bind = null;
var mbind_set_collision_mask_bit: ?*c_api.godot_method_bind = null;
var mbind_set_margin: ?*c_api.godot_method_bind = null;
var mbind_set_process_mode: ?*c_api.godot_method_bind = null;
var mbind_clipped_camera_constructor: ?fn () ?*c_api.godot_object = null;

pub const ClippedCamera = struct {
    const Self = @This();
    const BaseClass = Camera;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_clipped_camera_constructor == null) {
            mbind_clipped_camera_constructor = try api.createConstructor("ClippedCamera");
        }
        return api.createObject(Self, mbind_clipped_camera_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addException(self: *const Self, arg_node: *const godot.Object) !void {
        if (mbind_add_exception == null) {
            mbind_add_exception = try api.createMethod("ClippedCamera", "add_exception");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_exception, base, cargs, result);
    }

    pub fn addExceptionRid(self: *const Self, arg_rid: *const godot.RID) !void {
        if (mbind_add_exception_rid == null) {
            mbind_add_exception_rid = try api.createMethod("ClippedCamera", "add_exception_rid");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_rid),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_exception_rid, base, cargs, result);
    }

    pub fn clearExceptions(self: *const Self) !void {
        if (mbind_clear_exceptions == null) {
            mbind_clear_exceptions = try api.createMethod("ClippedCamera", "clear_exceptions");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_exceptions, base, cargs, result);
    }

    pub fn getClipOffset(self: *const Self) !f32 {
        if (mbind_get_clip_offset == null) {
            mbind_get_clip_offset = try api.createMethod("ClippedCamera", "get_clip_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_clip_offset, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getCollisionMask(self: *const Self) !i32 {
        if (mbind_get_collision_mask == null) {
            mbind_get_collision_mask = try api.createMethod("ClippedCamera", "get_collision_mask");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_collision_mask, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCollisionMaskBit(self: *const Self, arg_bit: i32) !bool {
        if (mbind_get_collision_mask_bit == null) {
            mbind_get_collision_mask_bit = try api.createMethod("ClippedCamera", "get_collision_mask_bit");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bit),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_collision_mask_bit, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getMargin(self: *const Self) !f32 {
        if (mbind_get_margin == null) {
            mbind_get_margin = try api.createMethod("ClippedCamera", "get_margin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_margin, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getProcessMode(self: *const Self) !i32 {
        if (mbind_get_process_mode == null) {
            mbind_get_process_mode = try api.createMethod("ClippedCamera", "get_process_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_process_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isClipToAreasEnabled(self: *const Self) !bool {
        if (mbind_is_clip_to_areas_enabled == null) {
            mbind_is_clip_to_areas_enabled = try api.createMethod("ClippedCamera", "is_clip_to_areas_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_clip_to_areas_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isClipToBodiesEnabled(self: *const Self) !bool {
        if (mbind_is_clip_to_bodies_enabled == null) {
            mbind_is_clip_to_bodies_enabled = try api.createMethod("ClippedCamera", "is_clip_to_bodies_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_clip_to_bodies_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn removeException(self: *const Self, arg_node: *const godot.Object) !void {
        if (mbind_remove_exception == null) {
            mbind_remove_exception = try api.createMethod("ClippedCamera", "remove_exception");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_exception, base, cargs, result);
    }

    pub fn removeExceptionRid(self: *const Self, arg_rid: *const godot.RID) !void {
        if (mbind_remove_exception_rid == null) {
            mbind_remove_exception_rid = try api.createMethod("ClippedCamera", "remove_exception_rid");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_rid),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_exception_rid, base, cargs, result);
    }

    pub fn setClipToAreas(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_clip_to_areas == null) {
            mbind_set_clip_to_areas = try api.createMethod("ClippedCamera", "set_clip_to_areas");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_clip_to_areas, base, cargs, result);
    }

    pub fn setClipToBodies(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_clip_to_bodies == null) {
            mbind_set_clip_to_bodies = try api.createMethod("ClippedCamera", "set_clip_to_bodies");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_clip_to_bodies, base, cargs, result);
    }

    pub fn setCollisionMask(self: *const Self, arg_mask: i32) !void {
        if (mbind_set_collision_mask == null) {
            mbind_set_collision_mask = try api.createMethod("ClippedCamera", "set_collision_mask");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mask),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_collision_mask, base, cargs, result);
    }

    pub fn setCollisionMaskBit(self: *const Self, arg_bit: i32, arg_value: bool) !void {
        if (mbind_set_collision_mask_bit == null) {
            mbind_set_collision_mask_bit = try api.createMethod("ClippedCamera", "set_collision_mask_bit");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bit),
            @ptrCast(*const anyopaque, *arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_collision_mask_bit, base, cargs, result);
    }

    pub fn setMargin(self: *const Self, arg_margin: f32) !void {
        if (mbind_set_margin == null) {
            mbind_set_margin = try api.createMethod("ClippedCamera", "set_margin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_margin, base, cargs, result);
    }

    pub fn setProcessMode(self: *const Self, arg_process_mode: i32) !void {
        if (mbind_set_process_mode == null) {
            mbind_set_process_mode = try api.createMethod("ClippedCamera", "set_process_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_process_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_process_mode, base, cargs, result);
    }
};