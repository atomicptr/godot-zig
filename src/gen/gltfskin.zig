// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_get_godot_skin: ?*c_api.godot_method_bind = null;
var mbind_get_inverse_binds: ?*c_api.godot_method_bind = null;
var mbind_get_joint_i_to_bone_i: ?*c_api.godot_method_bind = null;
var mbind_get_joint_i_to_name: ?*c_api.godot_method_bind = null;
var mbind_get_joints: ?*c_api.godot_method_bind = null;
var mbind_get_joints_original: ?*c_api.godot_method_bind = null;
var mbind_get_non_joints: ?*c_api.godot_method_bind = null;
var mbind_get_roots: ?*c_api.godot_method_bind = null;
var mbind_get_skeleton: ?*c_api.godot_method_bind = null;
var mbind_get_skin_root: ?*c_api.godot_method_bind = null;
var mbind_set_godot_skin: ?*c_api.godot_method_bind = null;
var mbind_set_inverse_binds: ?*c_api.godot_method_bind = null;
var mbind_set_joint_i_to_bone_i: ?*c_api.godot_method_bind = null;
var mbind_set_joint_i_to_name: ?*c_api.godot_method_bind = null;
var mbind_set_joints: ?*c_api.godot_method_bind = null;
var mbind_set_joints_original: ?*c_api.godot_method_bind = null;
var mbind_set_non_joints: ?*c_api.godot_method_bind = null;
var mbind_set_roots: ?*c_api.godot_method_bind = null;
var mbind_set_skeleton: ?*c_api.godot_method_bind = null;
var mbind_set_skin_root: ?*c_api.godot_method_bind = null;
var mbind_gltfskin_constructor: ?fn () ?*c_api.godot_object = null;

pub const GLTFSkin = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_gltfskin_constructor == null) {
            mbind_gltfskin_constructor = try api.createConstructor("GLTFSkin");
        }
        return api.createObject(Self, mbind_gltfskin_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getGodotSkin(self: *const Self) !godot.Skin {
        if (mbind_get_godot_skin == null) {
            mbind_get_godot_skin = try api.createMethod("GLTFSkin", "get_godot_skin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_godot_skin, base, cargs, result);
        return @ptrCast(*godot.Skin, @alignCast(@alignOf(&godot.Skin), result)).*;
    }

    pub fn getInverseBinds(self: *const Self) !godot.Array {
        if (mbind_get_inverse_binds == null) {
            mbind_get_inverse_binds = try api.createMethod("GLTFSkin", "get_inverse_binds");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_inverse_binds, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getJointIToBoneI(self: *const Self) !godot.Dictionary {
        if (mbind_get_joint_i_to_bone_i == null) {
            mbind_get_joint_i_to_bone_i = try api.createMethod("GLTFSkin", "get_joint_i_to_bone_i");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joint_i_to_bone_i, base, cargs, result);
        return @ptrCast(*godot.Dictionary, @alignCast(@alignOf(&godot.Dictionary), result)).*;
    }

    pub fn getJointIToName(self: *const Self) !godot.Dictionary {
        if (mbind_get_joint_i_to_name == null) {
            mbind_get_joint_i_to_name = try api.createMethod("GLTFSkin", "get_joint_i_to_name");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joint_i_to_name, base, cargs, result);
        return @ptrCast(*godot.Dictionary, @alignCast(@alignOf(&godot.Dictionary), result)).*;
    }

    pub fn getJoints(self: *const Self) !godot.PoolIntArray {
        if (mbind_get_joints == null) {
            mbind_get_joints = try api.createMethod("GLTFSkin", "get_joints");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joints, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getJointsOriginal(self: *const Self) !godot.PoolIntArray {
        if (mbind_get_joints_original == null) {
            mbind_get_joints_original = try api.createMethod("GLTFSkin", "get_joints_original");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joints_original, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getNonJoints(self: *const Self) !godot.PoolIntArray {
        if (mbind_get_non_joints == null) {
            mbind_get_non_joints = try api.createMethod("GLTFSkin", "get_non_joints");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_non_joints, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getRoots(self: *const Self) !godot.PoolIntArray {
        if (mbind_get_roots == null) {
            mbind_get_roots = try api.createMethod("GLTFSkin", "get_roots");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_roots, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getSkeleton(self: *const Self) !i32 {
        if (mbind_get_skeleton == null) {
            mbind_get_skeleton = try api.createMethod("GLTFSkin", "get_skeleton");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_skeleton, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSkinRoot(self: *const Self) !i32 {
        if (mbind_get_skin_root == null) {
            mbind_get_skin_root = try api.createMethod("GLTFSkin", "get_skin_root");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_skin_root, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setGodotSkin(self: *const Self, arg_godot_skin: *const godot.Skin) !void {
        if (mbind_set_godot_skin == null) {
            mbind_set_godot_skin = try api.createMethod("GLTFSkin", "set_godot_skin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_godot_skin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_godot_skin, base, cargs, result);
    }

    pub fn setInverseBinds(self: *const Self, arg_inverse_binds: *const godot.Array) !void {
        if (mbind_set_inverse_binds == null) {
            mbind_set_inverse_binds = try api.createMethod("GLTFSkin", "set_inverse_binds");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_inverse_binds),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_inverse_binds, base, cargs, result);
    }

    pub fn setJointIToBoneI(self: *const Self, arg_joint_i_to_bone_i: *const godot.Dictionary) !void {
        if (mbind_set_joint_i_to_bone_i == null) {
            mbind_set_joint_i_to_bone_i = try api.createMethod("GLTFSkin", "set_joint_i_to_bone_i");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_joint_i_to_bone_i),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_joint_i_to_bone_i, base, cargs, result);
    }

    pub fn setJointIToName(self: *const Self, arg_joint_i_to_name: *const godot.Dictionary) !void {
        if (mbind_set_joint_i_to_name == null) {
            mbind_set_joint_i_to_name = try api.createMethod("GLTFSkin", "set_joint_i_to_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_joint_i_to_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_joint_i_to_name, base, cargs, result);
    }

    pub fn setJoints(self: *const Self, arg_joints: *const godot.PoolIntArray) !void {
        if (mbind_set_joints == null) {
            mbind_set_joints = try api.createMethod("GLTFSkin", "set_joints");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_joints),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_joints, base, cargs, result);
    }

    pub fn setJointsOriginal(self: *const Self, arg_joints_original: *const godot.PoolIntArray) !void {
        if (mbind_set_joints_original == null) {
            mbind_set_joints_original = try api.createMethod("GLTFSkin", "set_joints_original");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_joints_original),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_joints_original, base, cargs, result);
    }

    pub fn setNonJoints(self: *const Self, arg_non_joints: *const godot.PoolIntArray) !void {
        if (mbind_set_non_joints == null) {
            mbind_set_non_joints = try api.createMethod("GLTFSkin", "set_non_joints");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_non_joints),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_non_joints, base, cargs, result);
    }

    pub fn setRoots(self: *const Self, arg_roots: *const godot.PoolIntArray) !void {
        if (mbind_set_roots == null) {
            mbind_set_roots = try api.createMethod("GLTFSkin", "set_roots");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_roots),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_roots, base, cargs, result);
    }

    pub fn setSkeleton(self: *const Self, arg_skeleton: i32) !void {
        if (mbind_set_skeleton == null) {
            mbind_set_skeleton = try api.createMethod("GLTFSkin", "set_skeleton");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_skeleton),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_skeleton, base, cargs, result);
    }

    pub fn setSkinRoot(self: *const Self, arg_skin_root: i32) !void {
        if (mbind_set_skin_root == null) {
            mbind_set_skin_root = try api.createMethod("GLTFSkin", "set_skin_root");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_skin_root),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_skin_root, base, cargs, result);
    }
};