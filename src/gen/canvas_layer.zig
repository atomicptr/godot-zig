// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node = @import("node.zig").Node;

// method bindings
var mbind_get_canvas: ?*c_api.godot_method_bind = null;
var mbind_get_custom_viewport: ?*c_api.godot_method_bind = null;
var mbind_get_follow_viewport_scale: ?*c_api.godot_method_bind = null;
var mbind_get_layer: ?*c_api.godot_method_bind = null;
var mbind_get_offset: ?*c_api.godot_method_bind = null;
var mbind_get_rotation: ?*c_api.godot_method_bind = null;
var mbind_get_rotation_degrees: ?*c_api.godot_method_bind = null;
var mbind_get_scale: ?*c_api.godot_method_bind = null;
var mbind_get_transform: ?*c_api.godot_method_bind = null;
var mbind_is_following_viewport: ?*c_api.godot_method_bind = null;
var mbind_set_custom_viewport: ?*c_api.godot_method_bind = null;
var mbind_set_follow_viewport: ?*c_api.godot_method_bind = null;
var mbind_set_follow_viewport_scale: ?*c_api.godot_method_bind = null;
var mbind_set_layer: ?*c_api.godot_method_bind = null;
var mbind_set_offset: ?*c_api.godot_method_bind = null;
var mbind_set_rotation: ?*c_api.godot_method_bind = null;
var mbind_set_rotation_degrees: ?*c_api.godot_method_bind = null;
var mbind_set_scale: ?*c_api.godot_method_bind = null;
var mbind_set_transform: ?*c_api.godot_method_bind = null;
var mbind_canvas_layer_constructor: ?fn () ?*c_api.godot_object = null;

pub const CanvasLayer = struct {
    const Self = @This();
    const BaseClass = Node;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_canvas_layer_constructor == null) {
            mbind_canvas_layer_constructor = try api.createConstructor("CanvasLayer");
        }
        return api.createObject(Self, mbind_canvas_layer_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getCanvas(self: *const Self) !godot.RID {
        if (mbind_get_canvas == null) {
            mbind_get_canvas = try api.createMethod("CanvasLayer", "get_canvas");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_canvas, base, cargs, result);
        return @ptrCast(*godot.RID, @alignCast(@alignOf(&godot.RID), result)).*;
    }

    pub fn getCustomViewport(self: *const Self) !godot.Node {
        if (mbind_get_custom_viewport == null) {
            mbind_get_custom_viewport = try api.createMethod("CanvasLayer", "get_custom_viewport");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_custom_viewport, base, cargs, result);
        return @ptrCast(*godot.Node, @alignCast(@alignOf(&godot.Node), result)).*;
    }

    pub fn getFollowViewportScale(self: *const Self) !f32 {
        if (mbind_get_follow_viewport_scale == null) {
            mbind_get_follow_viewport_scale = try api.createMethod("CanvasLayer", "get_follow_viewport_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_follow_viewport_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getLayer(self: *const Self) !i32 {
        if (mbind_get_layer == null) {
            mbind_get_layer = try api.createMethod("CanvasLayer", "get_layer");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_layer, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getOffset(self: *const Self) !godot.Vector2 {
        if (mbind_get_offset == null) {
            mbind_get_offset = try api.createMethod("CanvasLayer", "get_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_offset, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getRotation(self: *const Self) !f32 {
        if (mbind_get_rotation == null) {
            mbind_get_rotation = try api.createMethod("CanvasLayer", "get_rotation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rotation, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRotationDegrees(self: *const Self) !f32 {
        if (mbind_get_rotation_degrees == null) {
            mbind_get_rotation_degrees = try api.createMethod("CanvasLayer", "get_rotation_degrees");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rotation_degrees, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getScale(self: *const Self) !godot.Vector2 {
        if (mbind_get_scale == null) {
            mbind_get_scale = try api.createMethod("CanvasLayer", "get_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_scale, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getTransform(self: *const Self) !godot.Transform2D {
        if (mbind_get_transform == null) {
            mbind_get_transform = try api.createMethod("CanvasLayer", "get_transform");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_transform, base, cargs, result);
        return @ptrCast(*godot.Transform2D, @alignCast(@alignOf(&godot.Transform2D), result)).*;
    }

    pub fn isFollowingViewport(self: *const Self) !bool {
        if (mbind_is_following_viewport == null) {
            mbind_is_following_viewport = try api.createMethod("CanvasLayer", "is_following_viewport");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_following_viewport, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setCustomViewport(self: *const Self, arg_viewport: *const godot.Node) !void {
        if (mbind_set_custom_viewport == null) {
            mbind_set_custom_viewport = try api.createMethod("CanvasLayer", "set_custom_viewport");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_viewport),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_viewport, base, cargs, result);
    }

    pub fn setFollowViewport(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_follow_viewport == null) {
            mbind_set_follow_viewport = try api.createMethod("CanvasLayer", "set_follow_viewport");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_follow_viewport, base, cargs, result);
    }

    pub fn setFollowViewportScale(self: *const Self, arg_scale: f32) !void {
        if (mbind_set_follow_viewport_scale == null) {
            mbind_set_follow_viewport_scale = try api.createMethod("CanvasLayer", "set_follow_viewport_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_follow_viewport_scale, base, cargs, result);
    }

    pub fn setLayer(self: *const Self, arg_layer: i32) !void {
        if (mbind_set_layer == null) {
            mbind_set_layer = try api.createMethod("CanvasLayer", "set_layer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_layer),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_layer, base, cargs, result);
    }

    pub fn setOffset(self: *const Self, arg_offset: *const godot.Vector2) !void {
        if (mbind_set_offset == null) {
            mbind_set_offset = try api.createMethod("CanvasLayer", "set_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_offset, base, cargs, result);
    }

    pub fn setRotation(self: *const Self, arg_radians: f32) !void {
        if (mbind_set_rotation == null) {
            mbind_set_rotation = try api.createMethod("CanvasLayer", "set_rotation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radians),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rotation, base, cargs, result);
    }

    pub fn setRotationDegrees(self: *const Self, arg_degrees: f32) !void {
        if (mbind_set_rotation_degrees == null) {
            mbind_set_rotation_degrees = try api.createMethod("CanvasLayer", "set_rotation_degrees");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rotation_degrees, base, cargs, result);
    }

    pub fn setScale(self: *const Self, arg_scale: *const godot.Vector2) !void {
        if (mbind_set_scale == null) {
            mbind_set_scale = try api.createMethod("CanvasLayer", "set_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_scale, base, cargs, result);
    }

    pub fn setTransform(self: *const Self, arg_transform: *const godot.Transform2D) !void {
        if (mbind_set_transform == null) {
            mbind_set_transform = try api.createMethod("CanvasLayer", "set_transform");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_transform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_transform, base, cargs, result);
    }
};