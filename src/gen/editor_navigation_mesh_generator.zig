// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Object = @import("object.zig").Object;

// method bindings
var mbind_bake: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_editor_navigation_mesh_generator_constructor: ?fn () ?*c_api.godot_object = null;

pub const EditorNavigationMeshGenerator = struct {
    const Self = @This();
    const BaseClass = Object;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_editor_navigation_mesh_generator_constructor == null) {
            mbind_editor_navigation_mesh_generator_constructor = try api.createConstructor("EditorNavigationMeshGenerator");
        }
        return api.createObject(Self, mbind_editor_navigation_mesh_generator_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn bake(self: *const Self, arg_nav_mesh: *const godot.NavigationMesh, arg_root_node: *const godot.Node) !void {
        if (mbind_bake == null) {
            mbind_bake = try api.createMethod("EditorNavigationMeshGenerator", "bake");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_nav_mesh),
            @ptrCast(*const anyopaque, arg_root_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_bake, base, cargs, result);
    }

    pub fn clear(self: *const Self, arg_nav_mesh: *const godot.NavigationMesh) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("EditorNavigationMeshGenerator", "clear");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_nav_mesh),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }
};