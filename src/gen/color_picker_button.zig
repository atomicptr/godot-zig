// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Button = @import("button.zig").Button;

// method bindings
var mbind_get_pick_color: ?*c_api.godot_method_bind = null;
var mbind_get_picker: ?*c_api.godot_method_bind = null;
var mbind_get_popup: ?*c_api.godot_method_bind = null;
var mbind_is_editing_alpha: ?*c_api.godot_method_bind = null;
var mbind_set_edit_alpha: ?*c_api.godot_method_bind = null;
var mbind_set_pick_color: ?*c_api.godot_method_bind = null;
var mbind_color_picker_button_constructor: ?fn () ?*c_api.godot_object = null;

pub const ColorPickerButton = struct {
    const Self = @This();
    const BaseClass = Button;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_color_picker_button_constructor == null) {
            mbind_color_picker_button_constructor = try api.createConstructor("ColorPickerButton");
        }
        return api.createObject(Self, mbind_color_picker_button_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getPickColor(self: *const Self) !godot.Color {
        if (mbind_get_pick_color == null) {
            mbind_get_pick_color = try api.createMethod("ColorPickerButton", "get_pick_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pick_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getPicker(self: *const Self) !godot.ColorPicker {
        if (mbind_get_picker == null) {
            mbind_get_picker = try api.createMethod("ColorPickerButton", "get_picker");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_picker, base, cargs, result);
        return @ptrCast(*godot.ColorPicker, @alignCast(@alignOf(&godot.ColorPicker), result)).*;
    }

    pub fn getPopup(self: *const Self) !godot.PopupPanel {
        if (mbind_get_popup == null) {
            mbind_get_popup = try api.createMethod("ColorPickerButton", "get_popup");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_popup, base, cargs, result);
        return @ptrCast(*godot.PopupPanel, @alignCast(@alignOf(&godot.PopupPanel), result)).*;
    }

    pub fn isEditingAlpha(self: *const Self) !bool {
        if (mbind_is_editing_alpha == null) {
            mbind_is_editing_alpha = try api.createMethod("ColorPickerButton", "is_editing_alpha");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_editing_alpha, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setEditAlpha(self: *const Self, arg_show: bool) !void {
        if (mbind_set_edit_alpha == null) {
            mbind_set_edit_alpha = try api.createMethod("ColorPickerButton", "set_edit_alpha");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_show),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_edit_alpha, base, cargs, result);
    }

    pub fn setPickColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_pick_color == null) {
            mbind_set_pick_color = try api.createMethod("ColorPickerButton", "set_pick_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pick_color, base, cargs, result);
    }
};