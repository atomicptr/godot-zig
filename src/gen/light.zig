// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const VisualInstance = @import("visual_instance.zig").VisualInstance;

// method bindings
var mbind_get_bake_mode: ?*c_api.godot_method_bind = null;
var mbind_get_color: ?*c_api.godot_method_bind = null;
var mbind_get_cull_mask: ?*c_api.godot_method_bind = null;
var mbind_get_param: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_color: ?*c_api.godot_method_bind = null;
var mbind_get_shadow_reverse_cull_face: ?*c_api.godot_method_bind = null;
var mbind_has_shadow: ?*c_api.godot_method_bind = null;
var mbind_is_editor_only: ?*c_api.godot_method_bind = null;
var mbind_is_negative: ?*c_api.godot_method_bind = null;
var mbind_set_bake_mode: ?*c_api.godot_method_bind = null;
var mbind_set_color: ?*c_api.godot_method_bind = null;
var mbind_set_cull_mask: ?*c_api.godot_method_bind = null;
var mbind_set_editor_only: ?*c_api.godot_method_bind = null;
var mbind_set_negative: ?*c_api.godot_method_bind = null;
var mbind_set_param: ?*c_api.godot_method_bind = null;
var mbind_set_shadow: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_color: ?*c_api.godot_method_bind = null;
var mbind_set_shadow_reverse_cull_face: ?*c_api.godot_method_bind = null;
var mbind_light_constructor: ?fn () ?*c_api.godot_object = null;

pub const Light = struct {
    const Self = @This();
    const BaseClass = VisualInstance;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_light_constructor == null) {
            mbind_light_constructor = try api.createConstructor("Light");
        }
        return api.createObject(Self, mbind_light_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBakeMode(self: *const Self) !i32 {
        if (mbind_get_bake_mode == null) {
            mbind_get_bake_mode = try api.createMethod("Light", "get_bake_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bake_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getColor(self: *const Self) !godot.Color {
        if (mbind_get_color == null) {
            mbind_get_color = try api.createMethod("Light", "get_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getCullMask(self: *const Self) !i32 {
        if (mbind_get_cull_mask == null) {
            mbind_get_cull_mask = try api.createMethod("Light", "get_cull_mask");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_cull_mask, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getParam(self: *const Self, arg_param: i32) !f32 {
        if (mbind_get_param == null) {
            mbind_get_param = try api.createMethod("Light", "get_param");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_param, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getShadowColor(self: *const Self) !godot.Color {
        if (mbind_get_shadow_color == null) {
            mbind_get_shadow_color = try api.createMethod("Light", "get_shadow_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getShadowReverseCullFace(self: *const Self) !bool {
        if (mbind_get_shadow_reverse_cull_face == null) {
            mbind_get_shadow_reverse_cull_face = try api.createMethod("Light", "get_shadow_reverse_cull_face");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_shadow_reverse_cull_face, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn hasShadow(self: *const Self) !bool {
        if (mbind_has_shadow == null) {
            mbind_has_shadow = try api.createMethod("Light", "has_shadow");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_shadow, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isEditorOnly(self: *const Self) !bool {
        if (mbind_is_editor_only == null) {
            mbind_is_editor_only = try api.createMethod("Light", "is_editor_only");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_editor_only, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isNegative(self: *const Self) !bool {
        if (mbind_is_negative == null) {
            mbind_is_negative = try api.createMethod("Light", "is_negative");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_negative, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setBakeMode(self: *const Self, arg_bake_mode: i32) !void {
        if (mbind_set_bake_mode == null) {
            mbind_set_bake_mode = try api.createMethod("Light", "set_bake_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bake_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bake_mode, base, cargs, result);
    }

    pub fn setColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_color == null) {
            mbind_set_color = try api.createMethod("Light", "set_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_color, base, cargs, result);
    }

    pub fn setCullMask(self: *const Self, arg_cull_mask: i32) !void {
        if (mbind_set_cull_mask == null) {
            mbind_set_cull_mask = try api.createMethod("Light", "set_cull_mask");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_cull_mask),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_cull_mask, base, cargs, result);
    }

    pub fn setEditorOnly(self: *const Self, arg_editor_only: bool) !void {
        if (mbind_set_editor_only == null) {
            mbind_set_editor_only = try api.createMethod("Light", "set_editor_only");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_editor_only),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_editor_only, base, cargs, result);
    }

    pub fn setNegative(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_negative == null) {
            mbind_set_negative = try api.createMethod("Light", "set_negative");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_negative, base, cargs, result);
    }

    pub fn setParam(self: *const Self, arg_param: i32, arg_value: f32) !void {
        if (mbind_set_param == null) {
            mbind_set_param = try api.createMethod("Light", "set_param");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
            @ptrCast(*const anyopaque, *arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_param, base, cargs, result);
    }

    pub fn setShadow(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_shadow == null) {
            mbind_set_shadow = try api.createMethod("Light", "set_shadow");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow, base, cargs, result);
    }

    pub fn setShadowColor(self: *const Self, arg_shadow_color: *const godot.Color) !void {
        if (mbind_set_shadow_color == null) {
            mbind_set_shadow_color = try api.createMethod("Light", "set_shadow_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_shadow_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_color, base, cargs, result);
    }

    pub fn setShadowReverseCullFace(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_shadow_reverse_cull_face == null) {
            mbind_set_shadow_reverse_cull_face = try api.createMethod("Light", "set_shadow_reverse_cull_face");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shadow_reverse_cull_face, base, cargs, result);
    }
};