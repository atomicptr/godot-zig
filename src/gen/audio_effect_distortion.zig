// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const AudioEffect = @import("audio_effect.zig").AudioEffect;

// method bindings
var mbind_get_drive: ?*c_api.godot_method_bind = null;
var mbind_get_keep_hf_hz: ?*c_api.godot_method_bind = null;
var mbind_get_mode: ?*c_api.godot_method_bind = null;
var mbind_get_post_gain: ?*c_api.godot_method_bind = null;
var mbind_get_pre_gain: ?*c_api.godot_method_bind = null;
var mbind_set_drive: ?*c_api.godot_method_bind = null;
var mbind_set_keep_hf_hz: ?*c_api.godot_method_bind = null;
var mbind_set_mode: ?*c_api.godot_method_bind = null;
var mbind_set_post_gain: ?*c_api.godot_method_bind = null;
var mbind_set_pre_gain: ?*c_api.godot_method_bind = null;
var mbind_audio_effect_distortion_constructor: ?fn () ?*c_api.godot_object = null;

pub const AudioEffectDistortion = struct {
    const Self = @This();
    const BaseClass = AudioEffect;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_audio_effect_distortion_constructor == null) {
            mbind_audio_effect_distortion_constructor = try api.createConstructor("AudioEffectDistortion");
        }
        return api.createObject(Self, mbind_audio_effect_distortion_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getDrive(self: *const Self) !f32 {
        if (mbind_get_drive == null) {
            mbind_get_drive = try api.createMethod("AudioEffectDistortion", "get_drive");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_drive, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getKeepHfHz(self: *const Self) !f32 {
        if (mbind_get_keep_hf_hz == null) {
            mbind_get_keep_hf_hz = try api.createMethod("AudioEffectDistortion", "get_keep_hf_hz");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_keep_hf_hz, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getMode(self: *const Self) !i32 {
        if (mbind_get_mode == null) {
            mbind_get_mode = try api.createMethod("AudioEffectDistortion", "get_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPostGain(self: *const Self) !f32 {
        if (mbind_get_post_gain == null) {
            mbind_get_post_gain = try api.createMethod("AudioEffectDistortion", "get_post_gain");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_post_gain, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getPreGain(self: *const Self) !f32 {
        if (mbind_get_pre_gain == null) {
            mbind_get_pre_gain = try api.createMethod("AudioEffectDistortion", "get_pre_gain");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pre_gain, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn setDrive(self: *const Self, arg_drive: f32) !void {
        if (mbind_set_drive == null) {
            mbind_set_drive = try api.createMethod("AudioEffectDistortion", "set_drive");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_drive),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_drive, base, cargs, result);
    }

    pub fn setKeepHfHz(self: *const Self, arg_keep_hf_hz: f32) !void {
        if (mbind_set_keep_hf_hz == null) {
            mbind_set_keep_hf_hz = try api.createMethod("AudioEffectDistortion", "set_keep_hf_hz");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_keep_hf_hz),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_keep_hf_hz, base, cargs, result);
    }

    pub fn setMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_mode == null) {
            mbind_set_mode = try api.createMethod("AudioEffectDistortion", "set_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mode, base, cargs, result);
    }

    pub fn setPostGain(self: *const Self, arg_post_gain: f32) !void {
        if (mbind_set_post_gain == null) {
            mbind_set_post_gain = try api.createMethod("AudioEffectDistortion", "set_post_gain");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_post_gain),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_post_gain, base, cargs, result);
    }

    pub fn setPreGain(self: *const Self, arg_pre_gain: f32) !void {
        if (mbind_set_pre_gain == null) {
            mbind_set_pre_gain = try api.createMethod("AudioEffectDistortion", "set_pre_gain");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pre_gain),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pre_gain, base, cargs, result);
    }
};