// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Texture = @import("texture.zig").Texture;

// method bindings
var mbind_create: ?*c_api.godot_method_bind = null;
var mbind_create_from_image: ?*c_api.godot_method_bind = null;
var mbind_get_format: ?*c_api.godot_method_bind = null;
var mbind_get_lossy_storage_quality: ?*c_api.godot_method_bind = null;
var mbind_get_storage: ?*c_api.godot_method_bind = null;
var mbind_load: ?*c_api.godot_method_bind = null;
var mbind_set_data: ?*c_api.godot_method_bind = null;
var mbind_set_lossy_storage_quality: ?*c_api.godot_method_bind = null;
var mbind_set_size_override: ?*c_api.godot_method_bind = null;
var mbind_set_storage: ?*c_api.godot_method_bind = null;
var mbind_image_texture_constructor: ?fn () ?*c_api.godot_object = null;

pub const ImageTexture = struct {
    const Self = @This();
    const BaseClass = Texture;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_image_texture_constructor == null) {
            mbind_image_texture_constructor = try api.createConstructor("ImageTexture");
        }
        return api.createObject(Self, mbind_image_texture_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn create(self: *const Self, arg_width: i32, arg_height: i32, arg_format: i32, arg_flags: i32) !void {
        if (mbind_create == null) {
            mbind_create = try api.createMethod("ImageTexture", "create");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_width),
            @ptrCast(*const anyopaque, *arg_height),
            @ptrCast(*const anyopaque, *arg_format),
            @ptrCast(*const anyopaque, *arg_flags),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create, base, cargs, result);
    }

    pub fn createFromImage(self: *const Self, arg_image: *const godot.Image, arg_flags: i32) !void {
        if (mbind_create_from_image == null) {
            mbind_create_from_image = try api.createMethod("ImageTexture", "create_from_image");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_image),
            @ptrCast(*const anyopaque, *arg_flags),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_from_image, base, cargs, result);
    }

    pub fn getFormat(self: *const Self) !i32 {
        if (mbind_get_format == null) {
            mbind_get_format = try api.createMethod("ImageTexture", "get_format");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_format, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLossyStorageQuality(self: *const Self) !f32 {
        if (mbind_get_lossy_storage_quality == null) {
            mbind_get_lossy_storage_quality = try api.createMethod("ImageTexture", "get_lossy_storage_quality");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_lossy_storage_quality, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getStorage(self: *const Self) !i32 {
        if (mbind_get_storage == null) {
            mbind_get_storage = try api.createMethod("ImageTexture", "get_storage");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_storage, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn load(self: *const Self, arg_path: *const godot.String) !i32 {
        if (mbind_load == null) {
            mbind_load = try api.createMethod("ImageTexture", "load");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_load, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setData(self: *const Self, arg_image: *const godot.Image) !void {
        if (mbind_set_data == null) {
            mbind_set_data = try api.createMethod("ImageTexture", "set_data");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_image),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_data, base, cargs, result);
    }

    pub fn setLossyStorageQuality(self: *const Self, arg_quality: f32) !void {
        if (mbind_set_lossy_storage_quality == null) {
            mbind_set_lossy_storage_quality = try api.createMethod("ImageTexture", "set_lossy_storage_quality");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_quality),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_lossy_storage_quality, base, cargs, result);
    }

    pub fn setSizeOverride(self: *const Self, arg_size: *const godot.Vector2) !void {
        if (mbind_set_size_override == null) {
            mbind_set_size_override = try api.createMethod("ImageTexture", "set_size_override");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_size_override, base, cargs, result);
    }

    pub fn setStorage(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_storage == null) {
            mbind_set_storage = try api.createMethod("ImageTexture", "set_storage");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_storage, base, cargs, result);
    }
};