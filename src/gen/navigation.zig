// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Spatial = @import("spatial.zig").Spatial;

// method bindings
var mbind_get_closest_point: ?*c_api.godot_method_bind = null;
var mbind_get_closest_point_normal: ?*c_api.godot_method_bind = null;
var mbind_get_closest_point_owner: ?*c_api.godot_method_bind = null;
var mbind_get_closest_point_to_segment: ?*c_api.godot_method_bind = null;
var mbind_get_simple_path: ?*c_api.godot_method_bind = null;
var mbind_get_up_vector: ?*c_api.godot_method_bind = null;
var mbind_navmesh_add: ?*c_api.godot_method_bind = null;
var mbind_navmesh_remove: ?*c_api.godot_method_bind = null;
var mbind_navmesh_set_transform: ?*c_api.godot_method_bind = null;
var mbind_set_up_vector: ?*c_api.godot_method_bind = null;
var mbind_navigation_constructor: ?fn () ?*c_api.godot_object = null;

pub const Navigation = struct {
    const Self = @This();
    const BaseClass = Spatial;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_navigation_constructor == null) {
            mbind_navigation_constructor = try api.createConstructor("Navigation");
        }
        return api.createObject(Self, mbind_navigation_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getClosestPoint(self: *const Self, arg_to_point: *const godot.Vector3) !godot.Vector3 {
        if (mbind_get_closest_point == null) {
            mbind_get_closest_point = try api.createMethod("Navigation", "get_closest_point");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_to_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_closest_point, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getClosestPointNormal(self: *const Self, arg_to_point: *const godot.Vector3) !godot.Vector3 {
        if (mbind_get_closest_point_normal == null) {
            mbind_get_closest_point_normal = try api.createMethod("Navigation", "get_closest_point_normal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_to_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_closest_point_normal, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getClosestPointOwner(self: *const Self, arg_to_point: *const godot.Vector3) !godot.Object {
        if (mbind_get_closest_point_owner == null) {
            mbind_get_closest_point_owner = try api.createMethod("Navigation", "get_closest_point_owner");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_to_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_closest_point_owner, base, cargs, result);
        return @ptrCast(*godot.Object, @alignCast(@alignOf(&godot.Object), result)).*;
    }

    pub fn getClosestPointToSegment(self: *const Self, arg_start: *const godot.Vector3, arg_end: *const godot.Vector3, arg_use_collision: bool) !godot.Vector3 {
        if (mbind_get_closest_point_to_segment == null) {
            mbind_get_closest_point_to_segment = try api.createMethod("Navigation", "get_closest_point_to_segment");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_start),
            @ptrCast(*const anyopaque, arg_end),
            @ptrCast(*const anyopaque, *arg_use_collision),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_closest_point_to_segment, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getSimplePath(self: *const Self, arg_start: *const godot.Vector3, arg_end: *const godot.Vector3, arg_optimize: bool) !godot.PoolVector3Array {
        if (mbind_get_simple_path == null) {
            mbind_get_simple_path = try api.createMethod("Navigation", "get_simple_path");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_start),
            @ptrCast(*const anyopaque, arg_end),
            @ptrCast(*const anyopaque, *arg_optimize),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_simple_path, base, cargs, result);
        return @ptrCast(*godot.PoolVector3Array, @alignCast(@alignOf(&godot.PoolVector3Array), result)).*;
    }

    pub fn getUpVector(self: *const Self) !godot.Vector3 {
        if (mbind_get_up_vector == null) {
            mbind_get_up_vector = try api.createMethod("Navigation", "get_up_vector");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_up_vector, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn navmeshAdd(self: *const Self, arg_mesh: *const godot.NavigationMesh, arg_xform: *const godot.Transform, arg_owner: *const godot.Object) !i32 {
        if (mbind_navmesh_add == null) {
            mbind_navmesh_add = try api.createMethod("Navigation", "navmesh_add");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mesh),
            @ptrCast(*const anyopaque, arg_xform),
            @ptrCast(*const anyopaque, arg_owner),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_navmesh_add, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn navmeshRemove(self: *const Self, arg_id: i32) !void {
        if (mbind_navmesh_remove == null) {
            mbind_navmesh_remove = try api.createMethod("Navigation", "navmesh_remove");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_navmesh_remove, base, cargs, result);
    }

    pub fn navmeshSetTransform(self: *const Self, arg_id: i32, arg_xform: *const godot.Transform) !void {
        if (mbind_navmesh_set_transform == null) {
            mbind_navmesh_set_transform = try api.createMethod("Navigation", "navmesh_set_transform");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, arg_xform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_navmesh_set_transform, base, cargs, result);
    }

    pub fn setUpVector(self: *const Self, arg_up: *const godot.Vector3) !void {
        if (mbind_set_up_vector == null) {
            mbind_set_up_vector = try api.createMethod("Navigation", "set_up_vector");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_up),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_up_vector, base, cargs, result);
    }
};