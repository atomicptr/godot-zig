// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_get_skeleton: ?*c_api.godot_method_bind = null;
var mbind_get_skin: ?*c_api.godot_method_bind = null;
var mbind_skin_reference_constructor: ?fn () ?*c_api.godot_object = null;

pub const SkinReference = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_skin_reference_constructor == null) {
            mbind_skin_reference_constructor = try api.createConstructor("SkinReference");
        }
        return api.createObject(Self, mbind_skin_reference_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getSkeleton(self: *const Self) !godot.RID {
        if (mbind_get_skeleton == null) {
            mbind_get_skeleton = try api.createMethod("SkinReference", "get_skeleton");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_skeleton, base, cargs, result);
        return @ptrCast(*godot.RID, @alignCast(@alignOf(&godot.RID), result)).*;
    }

    pub fn getSkin(self: *const Self) !godot.Skin {
        if (mbind_get_skin == null) {
            mbind_get_skin = try api.createMethod("SkinReference", "get_skin");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_skin, base, cargs, result);
        return @ptrCast(*godot.Skin, @alignCast(@alignOf(&godot.Skin), result)).*;
    }
};