// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_add_animation: ?*c_api.godot_method_bind = null;
var mbind_add_frame: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_clear_all: ?*c_api.godot_method_bind = null;
var mbind_get_animation_loop: ?*c_api.godot_method_bind = null;
var mbind_get_animation_names: ?*c_api.godot_method_bind = null;
var mbind_get_animation_speed: ?*c_api.godot_method_bind = null;
var mbind_get_frame: ?*c_api.godot_method_bind = null;
var mbind_get_frame_count: ?*c_api.godot_method_bind = null;
var mbind_has_animation: ?*c_api.godot_method_bind = null;
var mbind_remove_animation: ?*c_api.godot_method_bind = null;
var mbind_remove_frame: ?*c_api.godot_method_bind = null;
var mbind_rename_animation: ?*c_api.godot_method_bind = null;
var mbind_set_animation_loop: ?*c_api.godot_method_bind = null;
var mbind_set_animation_speed: ?*c_api.godot_method_bind = null;
var mbind_set_frame: ?*c_api.godot_method_bind = null;
var mbind_sprite_frames_constructor: ?fn () ?*c_api.godot_object = null;

pub const SpriteFrames = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_sprite_frames_constructor == null) {
            mbind_sprite_frames_constructor = try api.createConstructor("SpriteFrames");
        }
        return api.createObject(Self, mbind_sprite_frames_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addAnimation(self: *const Self, arg_anim: *const godot.String) !void {
        if (mbind_add_animation == null) {
            mbind_add_animation = try api.createMethod("SpriteFrames", "add_animation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_animation, base, cargs, result);
    }

    pub fn addFrame(self: *const Self, arg_anim: *const godot.String, arg_frame: *const godot.Texture, arg_at_position: i32) !void {
        if (mbind_add_frame == null) {
            mbind_add_frame = try api.createMethod("SpriteFrames", "add_frame");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
            @ptrCast(*const anyopaque, arg_frame),
            @ptrCast(*const anyopaque, *arg_at_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_frame, base, cargs, result);
    }

    pub fn clear(self: *const Self, arg_anim: *const godot.String) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("SpriteFrames", "clear");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn clearAll(self: *const Self) !void {
        if (mbind_clear_all == null) {
            mbind_clear_all = try api.createMethod("SpriteFrames", "clear_all");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_all, base, cargs, result);
    }

    pub fn getAnimationLoop(self: *const Self, arg_anim: *const godot.String) !bool {
        if (mbind_get_animation_loop == null) {
            mbind_get_animation_loop = try api.createMethod("SpriteFrames", "get_animation_loop");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_animation_loop, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getAnimationNames(self: *const Self) !godot.PoolStringArray {
        if (mbind_get_animation_names == null) {
            mbind_get_animation_names = try api.createMethod("SpriteFrames", "get_animation_names");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_animation_names, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn getAnimationSpeed(self: *const Self, arg_anim: *const godot.String) !f32 {
        if (mbind_get_animation_speed == null) {
            mbind_get_animation_speed = try api.createMethod("SpriteFrames", "get_animation_speed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_animation_speed, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFrame(self: *const Self, arg_anim: *const godot.String, arg_idx: i32) !godot.Texture {
        if (mbind_get_frame == null) {
            mbind_get_frame = try api.createMethod("SpriteFrames", "get_frame");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_frame, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getFrameCount(self: *const Self, arg_anim: *const godot.String) !i32 {
        if (mbind_get_frame_count == null) {
            mbind_get_frame_count = try api.createMethod("SpriteFrames", "get_frame_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_frame_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn hasAnimation(self: *const Self, arg_anim: *const godot.String) !bool {
        if (mbind_has_animation == null) {
            mbind_has_animation = try api.createMethod("SpriteFrames", "has_animation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_animation, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn removeAnimation(self: *const Self, arg_anim: *const godot.String) !void {
        if (mbind_remove_animation == null) {
            mbind_remove_animation = try api.createMethod("SpriteFrames", "remove_animation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_animation, base, cargs, result);
    }

    pub fn removeFrame(self: *const Self, arg_anim: *const godot.String, arg_idx: i32) !void {
        if (mbind_remove_frame == null) {
            mbind_remove_frame = try api.createMethod("SpriteFrames", "remove_frame");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_frame, base, cargs, result);
    }

    pub fn renameAnimation(self: *const Self, arg_anim: *const godot.String, arg_newname: *const godot.String) !void {
        if (mbind_rename_animation == null) {
            mbind_rename_animation = try api.createMethod("SpriteFrames", "rename_animation");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
            @ptrCast(*const anyopaque, arg_newname),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_rename_animation, base, cargs, result);
    }

    pub fn setAnimationLoop(self: *const Self, arg_anim: *const godot.String, arg_loop: bool) !void {
        if (mbind_set_animation_loop == null) {
            mbind_set_animation_loop = try api.createMethod("SpriteFrames", "set_animation_loop");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
            @ptrCast(*const anyopaque, *arg_loop),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_animation_loop, base, cargs, result);
    }

    pub fn setAnimationSpeed(self: *const Self, arg_anim: *const godot.String, arg_speed: f32) !void {
        if (mbind_set_animation_speed == null) {
            mbind_set_animation_speed = try api.createMethod("SpriteFrames", "set_animation_speed");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
            @ptrCast(*const anyopaque, *arg_speed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_animation_speed, base, cargs, result);
    }

    pub fn setFrame(self: *const Self, arg_anim: *const godot.String, arg_idx: i32, arg_txt: *const godot.Texture) !void {
        if (mbind_set_frame == null) {
            mbind_set_frame = try api.createMethod("SpriteFrames", "set_frame");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_anim),
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_txt),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_frame, base, cargs, result);
    }
};