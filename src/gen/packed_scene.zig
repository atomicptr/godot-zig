// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_can_instance: ?*c_api.godot_method_bind = null;
var mbind_get_state: ?*c_api.godot_method_bind = null;
var mbind_instance: ?*c_api.godot_method_bind = null;
var mbind_pack: ?*c_api.godot_method_bind = null;
var mbind_packed_scene_constructor: ?fn () ?*c_api.godot_object = null;

pub const PackedScene = struct {
    const Self = @This();
    pub const BaseClass = godot.Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_packed_scene_constructor == null) {
            mbind_packed_scene_constructor = try api.createConstructor("PackedScene");
        }
        return api.createObject(Self, mbind_packed_scene_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn canInstance(self: *const Self) !bool {
        if (mbind_can_instance == null) {
            mbind_can_instance = try api.createMethod("PackedScene", "can_instance");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_can_instance, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getState(self: *const Self) !godot.SceneState {
        if (mbind_get_state == null) {
            mbind_get_state = try api.createMethod("PackedScene", "get_state");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_state, base, cargs, result);
        return @ptrCast(*godot.SceneState, @alignCast(@alignOf(&godot.SceneState), result)).*;
    }

    pub fn instance(self: *const Self, arg_edit_state: i32) !godot.Node {
        if (mbind_instance == null) {
            mbind_instance = try api.createMethod("PackedScene", "instance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_edit_state),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_instance, base, cargs, result);
        return @ptrCast(*godot.Node, @alignCast(@alignOf(&godot.Node), result)).*;
    }

    pub fn pack(self: *const Self, arg_path: *const godot.Node) !i32 {
        if (mbind_pack == null) {
            mbind_pack = try api.createMethod("PackedScene", "pack");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_pack, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }
};