// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_can_drop_data_fw: ?*c_api.godot_method_bind = null;
var mbind_drop_data_fw: ?*c_api.godot_method_bind = null;
var mbind_get_current_script: ?*c_api.godot_method_bind = null;
var mbind_get_drag_data_fw: ?*c_api.godot_method_bind = null;
var mbind_get_open_scripts: ?*c_api.godot_method_bind = null;
var mbind_goto_line: ?*c_api.godot_method_bind = null;
var mbind_open_script_create_dialog: ?*c_api.godot_method_bind = null;
var mbind_script_editor_constructor: ?fn () ?*c_api.godot_object = null;

pub const ScriptEditor = struct {
    const Self = @This();
    pub const BaseClass = godot.PanelContainer;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_script_editor_constructor == null) {
            mbind_script_editor_constructor = try api.createConstructor("ScriptEditor");
        }
        return api.createObject(Self, mbind_script_editor_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn canDropDataFw(self: *const Self, arg_point: *const godot.Vector2, arg_data: *const godot.Variant, arg_from: *const godot.Control) !bool {
        if (mbind_can_drop_data_fw == null) {
            mbind_can_drop_data_fw = try api.createMethod("ScriptEditor", "can_drop_data_fw");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point),
            @ptrCast(*const anyopaque, arg_data),
            @ptrCast(*const anyopaque, arg_from),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_can_drop_data_fw, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn dropDataFw(self: *const Self, arg_point: *const godot.Vector2, arg_data: *const godot.Variant, arg_from: *const godot.Control) !void {
        if (mbind_drop_data_fw == null) {
            mbind_drop_data_fw = try api.createMethod("ScriptEditor", "drop_data_fw");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point),
            @ptrCast(*const anyopaque, arg_data),
            @ptrCast(*const anyopaque, arg_from),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_drop_data_fw, base, cargs, result);
    }

    pub fn getCurrentScript(self: *const Self) !godot.Script {
        if (mbind_get_current_script == null) {
            mbind_get_current_script = try api.createMethod("ScriptEditor", "get_current_script");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_current_script, base, cargs, result);
        return @ptrCast(*godot.Script, @alignCast(@alignOf(&godot.Script), result)).*;
    }

    pub fn getDragDataFw(self: *const Self, arg_point: *const godot.Vector2, arg_from: *const godot.Control) !godot.Variant {
        if (mbind_get_drag_data_fw == null) {
            mbind_get_drag_data_fw = try api.createMethod("ScriptEditor", "get_drag_data_fw");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point),
            @ptrCast(*const anyopaque, arg_from),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_drag_data_fw, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getOpenScripts(self: *const Self) !godot.Array {
        if (mbind_get_open_scripts == null) {
            mbind_get_open_scripts = try api.createMethod("ScriptEditor", "get_open_scripts");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_open_scripts, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn gotoLine(self: *const Self, arg_line_number: i32) !void {
        if (mbind_goto_line == null) {
            mbind_goto_line = try api.createMethod("ScriptEditor", "goto_line");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_line_number),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_goto_line, base, cargs, result);
    }

    pub fn openScriptCreateDialog(self: *const Self, arg_base_name: *const godot.String, arg_base_path: *const godot.String) !void {
        if (mbind_open_script_create_dialog == null) {
            mbind_open_script_create_dialog = try api.createMethod("ScriptEditor", "open_script_create_dialog");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_base_name),
            @ptrCast(*const anyopaque, arg_base_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_open_script_create_dialog, base, cargs, result);
    }
};