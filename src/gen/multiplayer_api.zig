// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_get_network_connected_peers: ?*c_api.godot_method_bind = null;
var mbind_get_network_peer: ?*c_api.godot_method_bind = null;
var mbind_get_network_unique_id: ?*c_api.godot_method_bind = null;
var mbind_get_root_node: ?*c_api.godot_method_bind = null;
var mbind_get_rpc_sender_id: ?*c_api.godot_method_bind = null;
var mbind_has_network_peer: ?*c_api.godot_method_bind = null;
var mbind_is_network_server: ?*c_api.godot_method_bind = null;
var mbind_is_object_decoding_allowed: ?*c_api.godot_method_bind = null;
var mbind_is_refusing_new_network_connections: ?*c_api.godot_method_bind = null;
var mbind_poll: ?*c_api.godot_method_bind = null;
var mbind_send_bytes: ?*c_api.godot_method_bind = null;
var mbind_set_allow_object_decoding: ?*c_api.godot_method_bind = null;
var mbind_set_network_peer: ?*c_api.godot_method_bind = null;
var mbind_set_refuse_new_network_connections: ?*c_api.godot_method_bind = null;
var mbind_set_root_node: ?*c_api.godot_method_bind = null;
var mbind_multiplayer_api_constructor: ?fn () ?*c_api.godot_object = null;

pub const MultiplayerAPI = struct {
    const Self = @This();
    pub const BaseClass = godot.Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_multiplayer_api_constructor == null) {
            mbind_multiplayer_api_constructor = try api.createConstructor("MultiplayerAPI");
        }
        return api.createObject(Self, mbind_multiplayer_api_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("MultiplayerAPI", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn getNetworkConnectedPeers(self: *const Self) !godot.PoolIntArray {
        if (mbind_get_network_connected_peers == null) {
            mbind_get_network_connected_peers = try api.createMethod("MultiplayerAPI", "get_network_connected_peers");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_network_connected_peers, base, cargs, result);
        return @ptrCast(*godot.PoolIntArray, @alignCast(@alignOf(&godot.PoolIntArray), result)).*;
    }

    pub fn getNetworkPeer(self: *const Self) !godot.NetworkedMultiplayerPeer {
        if (mbind_get_network_peer == null) {
            mbind_get_network_peer = try api.createMethod("MultiplayerAPI", "get_network_peer");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_network_peer, base, cargs, result);
        return @ptrCast(*godot.NetworkedMultiplayerPeer, @alignCast(@alignOf(&godot.NetworkedMultiplayerPeer), result)).*;
    }

    pub fn getNetworkUniqueId(self: *const Self) !i32 {
        if (mbind_get_network_unique_id == null) {
            mbind_get_network_unique_id = try api.createMethod("MultiplayerAPI", "get_network_unique_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_network_unique_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getRootNode(self: *const Self) !godot.Node {
        if (mbind_get_root_node == null) {
            mbind_get_root_node = try api.createMethod("MultiplayerAPI", "get_root_node");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_root_node, base, cargs, result);
        return @ptrCast(*godot.Node, @alignCast(@alignOf(&godot.Node), result)).*;
    }

    pub fn getRpcSenderId(self: *const Self) !i32 {
        if (mbind_get_rpc_sender_id == null) {
            mbind_get_rpc_sender_id = try api.createMethod("MultiplayerAPI", "get_rpc_sender_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rpc_sender_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn hasNetworkPeer(self: *const Self) !bool {
        if (mbind_has_network_peer == null) {
            mbind_has_network_peer = try api.createMethod("MultiplayerAPI", "has_network_peer");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_network_peer, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isNetworkServer(self: *const Self) !bool {
        if (mbind_is_network_server == null) {
            mbind_is_network_server = try api.createMethod("MultiplayerAPI", "is_network_server");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_network_server, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isObjectDecodingAllowed(self: *const Self) !bool {
        if (mbind_is_object_decoding_allowed == null) {
            mbind_is_object_decoding_allowed = try api.createMethod("MultiplayerAPI", "is_object_decoding_allowed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_object_decoding_allowed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isRefusingNewNetworkConnections(self: *const Self) !bool {
        if (mbind_is_refusing_new_network_connections == null) {
            mbind_is_refusing_new_network_connections = try api.createMethod("MultiplayerAPI", "is_refusing_new_network_connections");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_refusing_new_network_connections, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn poll(self: *const Self) !void {
        if (mbind_poll == null) {
            mbind_poll = try api.createMethod("MultiplayerAPI", "poll");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_poll, base, cargs, result);
    }

    pub fn sendBytes(self: *const Self, arg_bytes: *const godot.PoolByteArray, arg_id: i32, arg_mode: i32) !i32 {
        if (mbind_send_bytes == null) {
            mbind_send_bytes = try api.createMethod("MultiplayerAPI", "send_bytes");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_bytes),
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_send_bytes, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setAllowObjectDecoding(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_allow_object_decoding == null) {
            mbind_set_allow_object_decoding = try api.createMethod("MultiplayerAPI", "set_allow_object_decoding");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_allow_object_decoding, base, cargs, result);
    }

    pub fn setNetworkPeer(self: *const Self, arg_peer: *const godot.NetworkedMultiplayerPeer) !void {
        if (mbind_set_network_peer == null) {
            mbind_set_network_peer = try api.createMethod("MultiplayerAPI", "set_network_peer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_peer),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_network_peer, base, cargs, result);
    }

    pub fn setRefuseNewNetworkConnections(self: *const Self, arg_refuse: bool) !void {
        if (mbind_set_refuse_new_network_connections == null) {
            mbind_set_refuse_new_network_connections = try api.createMethod("MultiplayerAPI", "set_refuse_new_network_connections");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_refuse),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_refuse_new_network_connections, base, cargs, result);
    }

    pub fn setRootNode(self: *const Self, arg_node: *const godot.Node) !void {
        if (mbind_set_root_node == null) {
            mbind_set_root_node = try api.createMethod("MultiplayerAPI", "set_root_node");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_root_node, base, cargs, result);
    }
};