// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_pressure: ?*c_api.godot_method_bind = null;
var mbind_get_relative: ?*c_api.godot_method_bind = null;
var mbind_get_speed: ?*c_api.godot_method_bind = null;
var mbind_get_tilt: ?*c_api.godot_method_bind = null;
var mbind_set_pressure: ?*c_api.godot_method_bind = null;
var mbind_set_relative: ?*c_api.godot_method_bind = null;
var mbind_set_speed: ?*c_api.godot_method_bind = null;
var mbind_set_tilt: ?*c_api.godot_method_bind = null;
var mbind_input_event_mouse_motion_constructor: ?fn () ?*c_api.godot_object = null;

pub const InputEventMouseMotion = struct {
    const Self = @This();
    pub const BaseClass = godot.InputEventMouse;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_input_event_mouse_motion_constructor == null) {
            mbind_input_event_mouse_motion_constructor = try api.createConstructor("InputEventMouseMotion");
        }
        return api.createObject(Self, mbind_input_event_mouse_motion_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getPressure(self: *const Self) !f32 {
        if (mbind_get_pressure == null) {
            mbind_get_pressure = try api.createMethod("InputEventMouseMotion", "get_pressure");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pressure, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRelative(self: *const Self) !godot.Vector2 {
        if (mbind_get_relative == null) {
            mbind_get_relative = try api.createMethod("InputEventMouseMotion", "get_relative");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_relative, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getSpeed(self: *const Self) !godot.Vector2 {
        if (mbind_get_speed == null) {
            mbind_get_speed = try api.createMethod("InputEventMouseMotion", "get_speed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_speed, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getTilt(self: *const Self) !godot.Vector2 {
        if (mbind_get_tilt == null) {
            mbind_get_tilt = try api.createMethod("InputEventMouseMotion", "get_tilt");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tilt, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn setPressure(self: *const Self, arg_pressure: f32) !void {
        if (mbind_set_pressure == null) {
            mbind_set_pressure = try api.createMethod("InputEventMouseMotion", "set_pressure");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pressure),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pressure, base, cargs, result);
    }

    pub fn setRelative(self: *const Self, arg_relative: *const godot.Vector2) !void {
        if (mbind_set_relative == null) {
            mbind_set_relative = try api.createMethod("InputEventMouseMotion", "set_relative");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_relative),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_relative, base, cargs, result);
    }

    pub fn setSpeed(self: *const Self, arg_speed: *const godot.Vector2) !void {
        if (mbind_set_speed == null) {
            mbind_set_speed = try api.createMethod("InputEventMouseMotion", "set_speed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_speed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_speed, base, cargs, result);
    }

    pub fn setTilt(self: *const Self, arg_tilt: *const godot.Vector2) !void {
        if (mbind_set_tilt == null) {
            mbind_set_tilt = try api.createMethod("InputEventMouseMotion", "set_tilt");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_tilt),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tilt, base, cargs, result);
    }
};