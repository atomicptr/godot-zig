// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const AnimationNode = @import("animation_node.zig").AnimationNode;

// method bindings
var mbind_get_cross_fade_time: ?*c_api.godot_method_bind = null;
var mbind_get_enabled_inputs: ?*c_api.godot_method_bind = null;
var mbind_get_input_caption: ?*c_api.godot_method_bind = null;
var mbind_is_input_set_as_auto_advance: ?*c_api.godot_method_bind = null;
var mbind_set_cross_fade_time: ?*c_api.godot_method_bind = null;
var mbind_set_enabled_inputs: ?*c_api.godot_method_bind = null;
var mbind_set_input_as_auto_advance: ?*c_api.godot_method_bind = null;
var mbind_set_input_caption: ?*c_api.godot_method_bind = null;
var mbind_animation_node_transition_constructor: ?fn () ?*c_api.godot_object = null;

pub const AnimationNodeTransition = struct {
    const Self = @This();
    const BaseClass = AnimationNode;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_animation_node_transition_constructor == null) {
            mbind_animation_node_transition_constructor = try api.createConstructor("AnimationNodeTransition");
        }
        return api.createObject(Self, mbind_animation_node_transition_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getCrossFadeTime(self: *const Self) !f32 {
        if (mbind_get_cross_fade_time == null) {
            mbind_get_cross_fade_time = try api.createMethod("AnimationNodeTransition", "get_cross_fade_time");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_cross_fade_time, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getEnabledInputs(self: *const Self) !i32 {
        if (mbind_get_enabled_inputs == null) {
            mbind_get_enabled_inputs = try api.createMethod("AnimationNodeTransition", "get_enabled_inputs");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_enabled_inputs, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getInputCaption(self: *const Self, arg_input: i32) !godot.String {
        if (mbind_get_input_caption == null) {
            mbind_get_input_caption = try api.createMethod("AnimationNodeTransition", "get_input_caption");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_input),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_input_caption, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn isInputSetAsAutoAdvance(self: *const Self, arg_input: i32) !bool {
        if (mbind_is_input_set_as_auto_advance == null) {
            mbind_is_input_set_as_auto_advance = try api.createMethod("AnimationNodeTransition", "is_input_set_as_auto_advance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_input),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_input_set_as_auto_advance, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setCrossFadeTime(self: *const Self, arg_time: f32) !void {
        if (mbind_set_cross_fade_time == null) {
            mbind_set_cross_fade_time = try api.createMethod("AnimationNodeTransition", "set_cross_fade_time");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_time),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_cross_fade_time, base, cargs, result);
    }

    pub fn setEnabledInputs(self: *const Self, arg_amount: i32) !void {
        if (mbind_set_enabled_inputs == null) {
            mbind_set_enabled_inputs = try api.createMethod("AnimationNodeTransition", "set_enabled_inputs");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_enabled_inputs, base, cargs, result);
    }

    pub fn setInputAsAutoAdvance(self: *const Self, arg_input: i32, arg_enable: bool) !void {
        if (mbind_set_input_as_auto_advance == null) {
            mbind_set_input_as_auto_advance = try api.createMethod("AnimationNodeTransition", "set_input_as_auto_advance");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_input),
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_input_as_auto_advance, base, cargs, result);
    }

    pub fn setInputCaption(self: *const Self, arg_input: i32, arg_caption: *const godot.String) !void {
        if (mbind_set_input_caption == null) {
            mbind_set_input_caption = try api.createMethod("AnimationNodeTransition", "set_input_caption");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_input),
            @ptrCast(*const anyopaque, arg_caption),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_input_caption, base, cargs, result);
    }
};