// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_get_anchor_detection_is_enabled: ?*c_api.godot_method_bind = null;
var mbind_get_camera_feed_id: ?*c_api.godot_method_bind = null;
var mbind_get_capabilities: ?*c_api.godot_method_bind = null;
var mbind_get_name: ?*c_api.godot_method_bind = null;
var mbind_get_render_targetsize: ?*c_api.godot_method_bind = null;
var mbind_get_tracking_status: ?*c_api.godot_method_bind = null;
var mbind_initialize: ?*c_api.godot_method_bind = null;
var mbind_is_initialized: ?*c_api.godot_method_bind = null;
var mbind_is_primary: ?*c_api.godot_method_bind = null;
var mbind_is_stereo: ?*c_api.godot_method_bind = null;
var mbind_set_anchor_detection_is_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_is_initialized: ?*c_api.godot_method_bind = null;
var mbind_set_is_primary: ?*c_api.godot_method_bind = null;
var mbind_uninitialize: ?*c_api.godot_method_bind = null;
var mbind_arvrinterface_constructor: ?fn () ?*c_api.godot_object = null;

pub const ARVRInterface = struct {
    const Self = @This();
    const BaseClass = Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_arvrinterface_constructor == null) {
            mbind_arvrinterface_constructor = try api.createConstructor("ARVRInterface");
        }
        return api.createObject(Self, mbind_arvrinterface_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAnchorDetectionIsEnabled(self: *const Self) !bool {
        if (mbind_get_anchor_detection_is_enabled == null) {
            mbind_get_anchor_detection_is_enabled = try api.createMethod("ARVRInterface", "get_anchor_detection_is_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_anchor_detection_is_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getCameraFeedId(self: *const Self) !i32 {
        if (mbind_get_camera_feed_id == null) {
            mbind_get_camera_feed_id = try api.createMethod("ARVRInterface", "get_camera_feed_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_camera_feed_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCapabilities(self: *const Self) !i32 {
        if (mbind_get_capabilities == null) {
            mbind_get_capabilities = try api.createMethod("ARVRInterface", "get_capabilities");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_capabilities, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getName(self: *const Self) !godot.String {
        if (mbind_get_name == null) {
            mbind_get_name = try api.createMethod("ARVRInterface", "get_name");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getRenderTargetsize(self: *const Self) !godot.Vector2 {
        if (mbind_get_render_targetsize == null) {
            mbind_get_render_targetsize = try api.createMethod("ARVRInterface", "get_render_targetsize");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_render_targetsize, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getTrackingStatus(self: *const Self) !i32 {
        if (mbind_get_tracking_status == null) {
            mbind_get_tracking_status = try api.createMethod("ARVRInterface", "get_tracking_status");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tracking_status, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn initialize(self: *const Self) !bool {
        if (mbind_initialize == null) {
            mbind_initialize = try api.createMethod("ARVRInterface", "initialize");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_initialize, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isInitialized(self: *const Self) !bool {
        if (mbind_is_initialized == null) {
            mbind_is_initialized = try api.createMethod("ARVRInterface", "is_initialized");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_initialized, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isPrimary(self: *const Self) !bool {
        if (mbind_is_primary == null) {
            mbind_is_primary = try api.createMethod("ARVRInterface", "is_primary");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_primary, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isStereo(self: *const Self) !bool {
        if (mbind_is_stereo == null) {
            mbind_is_stereo = try api.createMethod("ARVRInterface", "is_stereo");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_stereo, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setAnchorDetectionIsEnabled(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_anchor_detection_is_enabled == null) {
            mbind_set_anchor_detection_is_enabled = try api.createMethod("ARVRInterface", "set_anchor_detection_is_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_anchor_detection_is_enabled, base, cargs, result);
    }

    pub fn setIsInitialized(self: *const Self, arg_initialized: bool) !void {
        if (mbind_set_is_initialized == null) {
            mbind_set_is_initialized = try api.createMethod("ARVRInterface", "set_is_initialized");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_initialized),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_is_initialized, base, cargs, result);
    }

    pub fn setIsPrimary(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_is_primary == null) {
            mbind_set_is_primary = try api.createMethod("ARVRInterface", "set_is_primary");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_is_primary, base, cargs, result);
    }

    pub fn uninitialize(self: *const Self) !void {
        if (mbind_uninitialize == null) {
            mbind_uninitialize = try api.createMethod("ARVRInterface", "uninitialize");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_uninitialize, base, cargs, result);
    }
};