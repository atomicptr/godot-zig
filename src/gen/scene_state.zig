// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_connection_binds: ?*c_api.godot_method_bind = null;
var mbind_get_connection_count: ?*c_api.godot_method_bind = null;
var mbind_get_connection_flags: ?*c_api.godot_method_bind = null;
var mbind_get_connection_method: ?*c_api.godot_method_bind = null;
var mbind_get_connection_signal: ?*c_api.godot_method_bind = null;
var mbind_get_connection_source: ?*c_api.godot_method_bind = null;
var mbind_get_connection_target: ?*c_api.godot_method_bind = null;
var mbind_get_node_count: ?*c_api.godot_method_bind = null;
var mbind_get_node_groups: ?*c_api.godot_method_bind = null;
var mbind_get_node_index: ?*c_api.godot_method_bind = null;
var mbind_get_node_instance: ?*c_api.godot_method_bind = null;
var mbind_get_node_instance_placeholder: ?*c_api.godot_method_bind = null;
var mbind_get_node_name: ?*c_api.godot_method_bind = null;
var mbind_get_node_owner_path: ?*c_api.godot_method_bind = null;
var mbind_get_node_path: ?*c_api.godot_method_bind = null;
var mbind_get_node_property_count: ?*c_api.godot_method_bind = null;
var mbind_get_node_property_name: ?*c_api.godot_method_bind = null;
var mbind_get_node_property_value: ?*c_api.godot_method_bind = null;
var mbind_get_node_type: ?*c_api.godot_method_bind = null;
var mbind_is_node_instance_placeholder: ?*c_api.godot_method_bind = null;
var mbind_scene_state_constructor: ?fn () ?*c_api.godot_object = null;

pub const SceneState = struct {
    const Self = @This();
    pub const BaseClass = godot.Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_scene_state_constructor == null) {
            mbind_scene_state_constructor = try api.createConstructor("SceneState");
        }
        return api.createObject(Self, mbind_scene_state_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getConnectionBinds(self: *const Self, arg_idx: i32) !godot.Array {
        if (mbind_get_connection_binds == null) {
            mbind_get_connection_binds = try api.createMethod("SceneState", "get_connection_binds");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connection_binds, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getConnectionCount(self: *const Self) !i32 {
        if (mbind_get_connection_count == null) {
            mbind_get_connection_count = try api.createMethod("SceneState", "get_connection_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connection_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getConnectionFlags(self: *const Self, arg_idx: i32) !i32 {
        if (mbind_get_connection_flags == null) {
            mbind_get_connection_flags = try api.createMethod("SceneState", "get_connection_flags");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connection_flags, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getConnectionMethod(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_connection_method == null) {
            mbind_get_connection_method = try api.createMethod("SceneState", "get_connection_method");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connection_method, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getConnectionSignal(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_connection_signal == null) {
            mbind_get_connection_signal = try api.createMethod("SceneState", "get_connection_signal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connection_signal, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getConnectionSource(self: *const Self, arg_idx: i32) !godot.NodePath {
        if (mbind_get_connection_source == null) {
            mbind_get_connection_source = try api.createMethod("SceneState", "get_connection_source");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connection_source, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn getConnectionTarget(self: *const Self, arg_idx: i32) !godot.NodePath {
        if (mbind_get_connection_target == null) {
            mbind_get_connection_target = try api.createMethod("SceneState", "get_connection_target");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connection_target, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn getNodeCount(self: *const Self) !i32 {
        if (mbind_get_node_count == null) {
            mbind_get_node_count = try api.createMethod("SceneState", "get_node_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getNodeGroups(self: *const Self, arg_idx: i32) !godot.PoolStringArray {
        if (mbind_get_node_groups == null) {
            mbind_get_node_groups = try api.createMethod("SceneState", "get_node_groups");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_groups, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn getNodeIndex(self: *const Self, arg_idx: i32) !i32 {
        if (mbind_get_node_index == null) {
            mbind_get_node_index = try api.createMethod("SceneState", "get_node_index");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_index, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getNodeInstance(self: *const Self, arg_idx: i32) !godot.PackedScene {
        if (mbind_get_node_instance == null) {
            mbind_get_node_instance = try api.createMethod("SceneState", "get_node_instance");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_instance, base, cargs, result);
        return @ptrCast(*godot.PackedScene, @alignCast(@alignOf(&godot.PackedScene), result)).*;
    }

    pub fn getNodeInstancePlaceholder(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_node_instance_placeholder == null) {
            mbind_get_node_instance_placeholder = try api.createMethod("SceneState", "get_node_instance_placeholder");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_instance_placeholder, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getNodeName(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_node_name == null) {
            mbind_get_node_name = try api.createMethod("SceneState", "get_node_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getNodeOwnerPath(self: *const Self, arg_idx: i32) !godot.NodePath {
        if (mbind_get_node_owner_path == null) {
            mbind_get_node_owner_path = try api.createMethod("SceneState", "get_node_owner_path");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_owner_path, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn getNodePath(self: *const Self, arg_idx: i32, arg_for_parent: bool) !godot.NodePath {
        if (mbind_get_node_path == null) {
            mbind_get_node_path = try api.createMethod("SceneState", "get_node_path");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, *arg_for_parent),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_path, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn getNodePropertyCount(self: *const Self, arg_idx: i32) !i32 {
        if (mbind_get_node_property_count == null) {
            mbind_get_node_property_count = try api.createMethod("SceneState", "get_node_property_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_property_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getNodePropertyName(self: *const Self, arg_idx: i32, arg_prop_idx: i32) !godot.String {
        if (mbind_get_node_property_name == null) {
            mbind_get_node_property_name = try api.createMethod("SceneState", "get_node_property_name");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, *arg_prop_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_property_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getNodePropertyValue(self: *const Self, arg_idx: i32, arg_prop_idx: i32) !godot.Variant {
        if (mbind_get_node_property_value == null) {
            mbind_get_node_property_value = try api.createMethod("SceneState", "get_node_property_value");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, *arg_prop_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_property_value, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getNodeType(self: *const Self, arg_idx: i32) !godot.String {
        if (mbind_get_node_type == null) {
            mbind_get_node_type = try api.createMethod("SceneState", "get_node_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_node_type, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn isNodeInstancePlaceholder(self: *const Self, arg_idx: i32) !bool {
        if (mbind_is_node_instance_placeholder == null) {
            mbind_is_node_instance_placeholder = try api.createMethod("SceneState", "is_node_instance_placeholder");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_node_instance_placeholder, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }
};