// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_add_ice_candidate: ?*c_api.godot_method_bind = null;
var mbind_close: ?*c_api.godot_method_bind = null;
var mbind_create_data_channel: ?*c_api.godot_method_bind = null;
var mbind_create_offer: ?*c_api.godot_method_bind = null;
var mbind_get_connection_state: ?*c_api.godot_method_bind = null;
var mbind_initialize: ?*c_api.godot_method_bind = null;
var mbind_poll: ?*c_api.godot_method_bind = null;
var mbind_set_local_description: ?*c_api.godot_method_bind = null;
var mbind_set_remote_description: ?*c_api.godot_method_bind = null;
var mbind_web_rtcpeer_connection_constructor: ?fn () ?*c_api.godot_object = null;

pub const WebRTCPeerConnection = struct {
    const Self = @This();
    pub const BaseClass = godot.Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_web_rtcpeer_connection_constructor == null) {
            mbind_web_rtcpeer_connection_constructor = try api.createConstructor("WebRTCPeerConnection");
        }
        return api.createObject(Self, mbind_web_rtcpeer_connection_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addIceCandidate(self: *const Self, arg_media: *const godot.String, arg_index: i32, arg_name: *const godot.String) !i32 {
        if (mbind_add_ice_candidate == null) {
            mbind_add_ice_candidate = try api.createMethod("WebRTCPeerConnection", "add_ice_candidate");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_media),
            @ptrCast(*const anyopaque, *arg_index),
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_ice_candidate, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn close(self: *const Self) !void {
        if (mbind_close == null) {
            mbind_close = try api.createMethod("WebRTCPeerConnection", "close");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_close, base, cargs, result);
    }

    pub fn createDataChannel(self: *const Self, arg_label: *const godot.String, arg_options: *const godot.Dictionary) !godot.WebRTCDataChannel {
        if (mbind_create_data_channel == null) {
            mbind_create_data_channel = try api.createMethod("WebRTCPeerConnection", "create_data_channel");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_label),
            @ptrCast(*const anyopaque, arg_options),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_data_channel, base, cargs, result);
        return @ptrCast(*godot.WebRTCDataChannel, @alignCast(@alignOf(&godot.WebRTCDataChannel), result)).*;
    }

    pub fn createOffer(self: *const Self) !i32 {
        if (mbind_create_offer == null) {
            mbind_create_offer = try api.createMethod("WebRTCPeerConnection", "create_offer");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_offer, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getConnectionState(self: *const Self) !i32 {
        if (mbind_get_connection_state == null) {
            mbind_get_connection_state = try api.createMethod("WebRTCPeerConnection", "get_connection_state");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connection_state, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn initialize(self: *const Self, arg_configuration: *const godot.Dictionary) !i32 {
        if (mbind_initialize == null) {
            mbind_initialize = try api.createMethod("WebRTCPeerConnection", "initialize");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_configuration),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_initialize, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn poll(self: *const Self) !i32 {
        if (mbind_poll == null) {
            mbind_poll = try api.createMethod("WebRTCPeerConnection", "poll");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_poll, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setLocalDescription(self: *const Self, arg_type: *const godot.String, arg_sdp: *const godot.String) !i32 {
        if (mbind_set_local_description == null) {
            mbind_set_local_description = try api.createMethod("WebRTCPeerConnection", "set_local_description");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_type),
            @ptrCast(*const anyopaque, arg_sdp),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_local_description, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setRemoteDescription(self: *const Self, arg_type: *const godot.String, arg_sdp: *const godot.String) !i32 {
        if (mbind_set_remote_description == null) {
            mbind_set_remote_description = try api.createMethod("WebRTCPeerConnection", "set_remote_description");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_type),
            @ptrCast(*const anyopaque, arg_sdp),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_remote_description, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }
};