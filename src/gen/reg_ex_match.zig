// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_end: ?*c_api.godot_method_bind = null;
var mbind_get_group_count: ?*c_api.godot_method_bind = null;
var mbind_get_names: ?*c_api.godot_method_bind = null;
var mbind_get_start: ?*c_api.godot_method_bind = null;
var mbind_get_string: ?*c_api.godot_method_bind = null;
var mbind_get_strings: ?*c_api.godot_method_bind = null;
var mbind_get_subject: ?*c_api.godot_method_bind = null;
var mbind_reg_ex_match_constructor: ?fn () ?*c_api.godot_object = null;

pub const RegExMatch = struct {
    const Self = @This();
    pub const BaseClass = godot.Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_reg_ex_match_constructor == null) {
            mbind_reg_ex_match_constructor = try api.createConstructor("RegExMatch");
        }
        return api.createObject(Self, mbind_reg_ex_match_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getEnd(self: *const Self, arg_name: *const godot.Variant) !i32 {
        if (mbind_get_end == null) {
            mbind_get_end = try api.createMethod("RegExMatch", "get_end");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_end, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getGroupCount(self: *const Self) !i32 {
        if (mbind_get_group_count == null) {
            mbind_get_group_count = try api.createMethod("RegExMatch", "get_group_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_group_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getNames(self: *const Self) !godot.Dictionary {
        if (mbind_get_names == null) {
            mbind_get_names = try api.createMethod("RegExMatch", "get_names");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_names, base, cargs, result);
        return @ptrCast(*godot.Dictionary, @alignCast(@alignOf(&godot.Dictionary), result)).*;
    }

    pub fn getStart(self: *const Self, arg_name: *const godot.Variant) !i32 {
        if (mbind_get_start == null) {
            mbind_get_start = try api.createMethod("RegExMatch", "get_start");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_start, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getString(self: *const Self, arg_name: *const godot.Variant) !godot.String {
        if (mbind_get_string == null) {
            mbind_get_string = try api.createMethod("RegExMatch", "get_string");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_string, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getStrings(self: *const Self) !godot.Array {
        if (mbind_get_strings == null) {
            mbind_get_strings = try api.createMethod("RegExMatch", "get_strings");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_strings, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getSubject(self: *const Self) !godot.String {
        if (mbind_get_subject == null) {
            mbind_get_subject = try api.createMethod("RegExMatch", "get_subject");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_subject, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }
};