// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_erase_section: ?*c_api.godot_method_bind = null;
var mbind_erase_section_key: ?*c_api.godot_method_bind = null;
var mbind_get_section_keys: ?*c_api.godot_method_bind = null;
var mbind_get_sections: ?*c_api.godot_method_bind = null;
var mbind_get_value: ?*c_api.godot_method_bind = null;
var mbind_has_section: ?*c_api.godot_method_bind = null;
var mbind_has_section_key: ?*c_api.godot_method_bind = null;
var mbind_load: ?*c_api.godot_method_bind = null;
var mbind_load_encrypted: ?*c_api.godot_method_bind = null;
var mbind_load_encrypted_pass: ?*c_api.godot_method_bind = null;
var mbind_parse: ?*c_api.godot_method_bind = null;
var mbind_save: ?*c_api.godot_method_bind = null;
var mbind_save_encrypted: ?*c_api.godot_method_bind = null;
var mbind_save_encrypted_pass: ?*c_api.godot_method_bind = null;
var mbind_set_value: ?*c_api.godot_method_bind = null;
var mbind_config_file_constructor: ?fn () ?*c_api.godot_object = null;

pub const ConfigFile = struct {
    const Self = @This();
    pub const BaseClass = godot.Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_config_file_constructor == null) {
            mbind_config_file_constructor = try api.createConstructor("ConfigFile");
        }
        return api.createObject(Self, mbind_config_file_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("ConfigFile", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn eraseSection(self: *const Self, arg_section: *const godot.String) !void {
        if (mbind_erase_section == null) {
            mbind_erase_section = try api.createMethod("ConfigFile", "erase_section");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_section),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_erase_section, base, cargs, result);
    }

    pub fn eraseSectionKey(self: *const Self, arg_section: *const godot.String, arg_key: *const godot.String) !void {
        if (mbind_erase_section_key == null) {
            mbind_erase_section_key = try api.createMethod("ConfigFile", "erase_section_key");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_section),
            @ptrCast(*const anyopaque, arg_key),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_erase_section_key, base, cargs, result);
    }

    pub fn getSectionKeys(self: *const Self, arg_section: *const godot.String) !godot.PoolStringArray {
        if (mbind_get_section_keys == null) {
            mbind_get_section_keys = try api.createMethod("ConfigFile", "get_section_keys");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_section),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_section_keys, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn getSections(self: *const Self) !godot.PoolStringArray {
        if (mbind_get_sections == null) {
            mbind_get_sections = try api.createMethod("ConfigFile", "get_sections");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sections, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn getValue(self: *const Self, arg_section: *const godot.String, arg_key: *const godot.String, arg_default: *const godot.Variant) !godot.Variant {
        if (mbind_get_value == null) {
            mbind_get_value = try api.createMethod("ConfigFile", "get_value");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_section),
            @ptrCast(*const anyopaque, arg_key),
            @ptrCast(*const anyopaque, arg_default),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_value, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn hasSection(self: *const Self, arg_section: *const godot.String) !bool {
        if (mbind_has_section == null) {
            mbind_has_section = try api.createMethod("ConfigFile", "has_section");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_section),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_section, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn hasSectionKey(self: *const Self, arg_section: *const godot.String, arg_key: *const godot.String) !bool {
        if (mbind_has_section_key == null) {
            mbind_has_section_key = try api.createMethod("ConfigFile", "has_section_key");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_section),
            @ptrCast(*const anyopaque, arg_key),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_section_key, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn load(self: *const Self, arg_path: *const godot.String) !i32 {
        if (mbind_load == null) {
            mbind_load = try api.createMethod("ConfigFile", "load");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_load, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn loadEncrypted(self: *const Self, arg_path: *const godot.String, arg_key: *const godot.PoolByteArray) !i32 {
        if (mbind_load_encrypted == null) {
            mbind_load_encrypted = try api.createMethod("ConfigFile", "load_encrypted");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, arg_key),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_load_encrypted, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn loadEncryptedPass(self: *const Self, arg_path: *const godot.String, arg_password: *const godot.String) !i32 {
        if (mbind_load_encrypted_pass == null) {
            mbind_load_encrypted_pass = try api.createMethod("ConfigFile", "load_encrypted_pass");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, arg_password),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_load_encrypted_pass, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn parse(self: *const Self, arg_data: *const godot.String) !i32 {
        if (mbind_parse == null) {
            mbind_parse = try api.createMethod("ConfigFile", "parse");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_data),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_parse, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn save(self: *const Self, arg_path: *const godot.String) !i32 {
        if (mbind_save == null) {
            mbind_save = try api.createMethod("ConfigFile", "save");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_save, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn saveEncrypted(self: *const Self, arg_path: *const godot.String, arg_key: *const godot.PoolByteArray) !i32 {
        if (mbind_save_encrypted == null) {
            mbind_save_encrypted = try api.createMethod("ConfigFile", "save_encrypted");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, arg_key),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_save_encrypted, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn saveEncryptedPass(self: *const Self, arg_path: *const godot.String, arg_password: *const godot.String) !i32 {
        if (mbind_save_encrypted_pass == null) {
            mbind_save_encrypted_pass = try api.createMethod("ConfigFile", "save_encrypted_pass");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, arg_password),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_save_encrypted_pass, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setValue(self: *const Self, arg_section: *const godot.String, arg_key: *const godot.String, arg_value: *const godot.Variant) !void {
        if (mbind_set_value == null) {
            mbind_set_value = try api.createMethod("ConfigFile", "set_value");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_section),
            @ptrCast(*const anyopaque, arg_key),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_value, base, cargs, result);
    }
};