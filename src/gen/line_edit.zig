// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_append_at_cursor: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_cursor_get_blink_enabled: ?*c_api.godot_method_bind = null;
var mbind_cursor_get_blink_speed: ?*c_api.godot_method_bind = null;
var mbind_cursor_set_blink_enabled: ?*c_api.godot_method_bind = null;
var mbind_cursor_set_blink_speed: ?*c_api.godot_method_bind = null;
var mbind_delete_char_at_cursor: ?*c_api.godot_method_bind = null;
var mbind_delete_text: ?*c_api.godot_method_bind = null;
var mbind_deselect: ?*c_api.godot_method_bind = null;
var mbind_get_align: ?*c_api.godot_method_bind = null;
var mbind_get_cursor_position: ?*c_api.godot_method_bind = null;
var mbind_get_expand_to_text_length: ?*c_api.godot_method_bind = null;
var mbind_get_max_length: ?*c_api.godot_method_bind = null;
var mbind_get_menu: ?*c_api.godot_method_bind = null;
var mbind_get_placeholder: ?*c_api.godot_method_bind = null;
var mbind_get_placeholder_alpha: ?*c_api.godot_method_bind = null;
var mbind_get_right_icon: ?*c_api.godot_method_bind = null;
var mbind_get_scroll_offset: ?*c_api.godot_method_bind = null;
var mbind_get_secret_character: ?*c_api.godot_method_bind = null;
var mbind_get_text: ?*c_api.godot_method_bind = null;
var mbind_is_clear_button_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_context_menu_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_editable: ?*c_api.godot_method_bind = null;
var mbind_is_secret: ?*c_api.godot_method_bind = null;
var mbind_is_selecting_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_shortcut_keys_enabled: ?*c_api.godot_method_bind = null;
var mbind_is_virtual_keyboard_enabled: ?*c_api.godot_method_bind = null;
var mbind_menu_option: ?*c_api.godot_method_bind = null;
var mbind_select: ?*c_api.godot_method_bind = null;
var mbind_select_all: ?*c_api.godot_method_bind = null;
var mbind_set_align: ?*c_api.godot_method_bind = null;
var mbind_set_clear_button_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_context_menu_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_cursor_position: ?*c_api.godot_method_bind = null;
var mbind_set_editable: ?*c_api.godot_method_bind = null;
var mbind_set_expand_to_text_length: ?*c_api.godot_method_bind = null;
var mbind_set_max_length: ?*c_api.godot_method_bind = null;
var mbind_set_placeholder: ?*c_api.godot_method_bind = null;
var mbind_set_placeholder_alpha: ?*c_api.godot_method_bind = null;
var mbind_set_right_icon: ?*c_api.godot_method_bind = null;
var mbind_set_secret: ?*c_api.godot_method_bind = null;
var mbind_set_secret_character: ?*c_api.godot_method_bind = null;
var mbind_set_selecting_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_shortcut_keys_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_text: ?*c_api.godot_method_bind = null;
var mbind_set_virtual_keyboard_enabled: ?*c_api.godot_method_bind = null;
var mbind_line_edit_constructor: ?fn () ?*c_api.godot_object = null;

pub const LineEdit = struct {
    const Self = @This();
    pub const BaseClass = godot.Control;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_line_edit_constructor == null) {
            mbind_line_edit_constructor = try api.createConstructor("LineEdit");
        }
        return api.createObject(Self, mbind_line_edit_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn appendAtCursor(self: *const Self, arg_text: *const godot.String) !void {
        if (mbind_append_at_cursor == null) {
            mbind_append_at_cursor = try api.createMethod("LineEdit", "append_at_cursor");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_text),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_append_at_cursor, base, cargs, result);
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("LineEdit", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn cursorGetBlinkEnabled(self: *const Self) !bool {
        if (mbind_cursor_get_blink_enabled == null) {
            mbind_cursor_get_blink_enabled = try api.createMethod("LineEdit", "cursor_get_blink_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_cursor_get_blink_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn cursorGetBlinkSpeed(self: *const Self) !f32 {
        if (mbind_cursor_get_blink_speed == null) {
            mbind_cursor_get_blink_speed = try api.createMethod("LineEdit", "cursor_get_blink_speed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_cursor_get_blink_speed, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn cursorSetBlinkEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_cursor_set_blink_enabled == null) {
            mbind_cursor_set_blink_enabled = try api.createMethod("LineEdit", "cursor_set_blink_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_cursor_set_blink_enabled, base, cargs, result);
    }

    pub fn cursorSetBlinkSpeed(self: *const Self, arg_blink_speed: f32) !void {
        if (mbind_cursor_set_blink_speed == null) {
            mbind_cursor_set_blink_speed = try api.createMethod("LineEdit", "cursor_set_blink_speed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_blink_speed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_cursor_set_blink_speed, base, cargs, result);
    }

    pub fn deleteCharAtCursor(self: *const Self) !void {
        if (mbind_delete_char_at_cursor == null) {
            mbind_delete_char_at_cursor = try api.createMethod("LineEdit", "delete_char_at_cursor");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_delete_char_at_cursor, base, cargs, result);
    }

    pub fn deleteText(self: *const Self, arg_from_column: i32, arg_to_column: i32) !void {
        if (mbind_delete_text == null) {
            mbind_delete_text = try api.createMethod("LineEdit", "delete_text");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_from_column),
            @ptrCast(*const anyopaque, *arg_to_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_delete_text, base, cargs, result);
    }

    pub fn deselect(self: *const Self) !void {
        if (mbind_deselect == null) {
            mbind_deselect = try api.createMethod("LineEdit", "deselect");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_deselect, base, cargs, result);
    }

    pub fn getAlign(self: *const Self) !i32 {
        if (mbind_get_align == null) {
            mbind_get_align = try api.createMethod("LineEdit", "get_align");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_align, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCursorPosition(self: *const Self) !i32 {
        if (mbind_get_cursor_position == null) {
            mbind_get_cursor_position = try api.createMethod("LineEdit", "get_cursor_position");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_cursor_position, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getExpandToTextLength(self: *const Self) !bool {
        if (mbind_get_expand_to_text_length == null) {
            mbind_get_expand_to_text_length = try api.createMethod("LineEdit", "get_expand_to_text_length");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_expand_to_text_length, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getMaxLength(self: *const Self) !i32 {
        if (mbind_get_max_length == null) {
            mbind_get_max_length = try api.createMethod("LineEdit", "get_max_length");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_max_length, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMenu(self: *const Self) !godot.PopupMenu {
        if (mbind_get_menu == null) {
            mbind_get_menu = try api.createMethod("LineEdit", "get_menu");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_menu, base, cargs, result);
        return @ptrCast(*godot.PopupMenu, @alignCast(@alignOf(&godot.PopupMenu), result)).*;
    }

    pub fn getPlaceholder(self: *const Self) !godot.String {
        if (mbind_get_placeholder == null) {
            mbind_get_placeholder = try api.createMethod("LineEdit", "get_placeholder");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_placeholder, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getPlaceholderAlpha(self: *const Self) !f32 {
        if (mbind_get_placeholder_alpha == null) {
            mbind_get_placeholder_alpha = try api.createMethod("LineEdit", "get_placeholder_alpha");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_placeholder_alpha, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRightIcon(self: *const Self) !godot.Texture {
        if (mbind_get_right_icon == null) {
            mbind_get_right_icon = try api.createMethod("LineEdit", "get_right_icon");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_right_icon, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getScrollOffset(self: *const Self) !i32 {
        if (mbind_get_scroll_offset == null) {
            mbind_get_scroll_offset = try api.createMethod("LineEdit", "get_scroll_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_scroll_offset, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSecretCharacter(self: *const Self) !godot.String {
        if (mbind_get_secret_character == null) {
            mbind_get_secret_character = try api.createMethod("LineEdit", "get_secret_character");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_secret_character, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getText(self: *const Self) !godot.String {
        if (mbind_get_text == null) {
            mbind_get_text = try api.createMethod("LineEdit", "get_text");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_text, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn isClearButtonEnabled(self: *const Self) !bool {
        if (mbind_is_clear_button_enabled == null) {
            mbind_is_clear_button_enabled = try api.createMethod("LineEdit", "is_clear_button_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_clear_button_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isContextMenuEnabled(self: *const Self) !bool {
        if (mbind_is_context_menu_enabled == null) {
            mbind_is_context_menu_enabled = try api.createMethod("LineEdit", "is_context_menu_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_context_menu_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isEditable(self: *const Self) !bool {
        if (mbind_is_editable == null) {
            mbind_is_editable = try api.createMethod("LineEdit", "is_editable");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_editable, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isSecret(self: *const Self) !bool {
        if (mbind_is_secret == null) {
            mbind_is_secret = try api.createMethod("LineEdit", "is_secret");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_secret, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isSelectingEnabled(self: *const Self) !bool {
        if (mbind_is_selecting_enabled == null) {
            mbind_is_selecting_enabled = try api.createMethod("LineEdit", "is_selecting_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_selecting_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isShortcutKeysEnabled(self: *const Self) !bool {
        if (mbind_is_shortcut_keys_enabled == null) {
            mbind_is_shortcut_keys_enabled = try api.createMethod("LineEdit", "is_shortcut_keys_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_shortcut_keys_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isVirtualKeyboardEnabled(self: *const Self) !bool {
        if (mbind_is_virtual_keyboard_enabled == null) {
            mbind_is_virtual_keyboard_enabled = try api.createMethod("LineEdit", "is_virtual_keyboard_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_virtual_keyboard_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn menuOption(self: *const Self, arg_option: i32) !void {
        if (mbind_menu_option == null) {
            mbind_menu_option = try api.createMethod("LineEdit", "menu_option");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_option),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_menu_option, base, cargs, result);
    }

    pub fn select(self: *const Self, arg_from: i32, arg_to: i32) !void {
        if (mbind_select == null) {
            mbind_select = try api.createMethod("LineEdit", "select");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_from),
            @ptrCast(*const anyopaque, *arg_to),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_select, base, cargs, result);
    }

    pub fn selectAll(self: *const Self) !void {
        if (mbind_select_all == null) {
            mbind_select_all = try api.createMethod("LineEdit", "select_all");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_select_all, base, cargs, result);
    }

    pub fn setAlign(self: *const Self, arg_align: i32) !void {
        if (mbind_set_align == null) {
            mbind_set_align = try api.createMethod("LineEdit", "set_align");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_align),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_align, base, cargs, result);
    }

    pub fn setClearButtonEnabled(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_clear_button_enabled == null) {
            mbind_set_clear_button_enabled = try api.createMethod("LineEdit", "set_clear_button_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_clear_button_enabled, base, cargs, result);
    }

    pub fn setContextMenuEnabled(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_context_menu_enabled == null) {
            mbind_set_context_menu_enabled = try api.createMethod("LineEdit", "set_context_menu_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_context_menu_enabled, base, cargs, result);
    }

    pub fn setCursorPosition(self: *const Self, arg_position: i32) !void {
        if (mbind_set_cursor_position == null) {
            mbind_set_cursor_position = try api.createMethod("LineEdit", "set_cursor_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_position),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_cursor_position, base, cargs, result);
    }

    pub fn setEditable(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_editable == null) {
            mbind_set_editable = try api.createMethod("LineEdit", "set_editable");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_editable, base, cargs, result);
    }

    pub fn setExpandToTextLength(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_expand_to_text_length == null) {
            mbind_set_expand_to_text_length = try api.createMethod("LineEdit", "set_expand_to_text_length");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_expand_to_text_length, base, cargs, result);
    }

    pub fn setMaxLength(self: *const Self, arg_chars: i32) !void {
        if (mbind_set_max_length == null) {
            mbind_set_max_length = try api.createMethod("LineEdit", "set_max_length");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_chars),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_max_length, base, cargs, result);
    }

    pub fn setPlaceholder(self: *const Self, arg_text: *const godot.String) !void {
        if (mbind_set_placeholder == null) {
            mbind_set_placeholder = try api.createMethod("LineEdit", "set_placeholder");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_text),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_placeholder, base, cargs, result);
    }

    pub fn setPlaceholderAlpha(self: *const Self, arg_alpha: f32) !void {
        if (mbind_set_placeholder_alpha == null) {
            mbind_set_placeholder_alpha = try api.createMethod("LineEdit", "set_placeholder_alpha");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_alpha),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_placeholder_alpha, base, cargs, result);
    }

    pub fn setRightIcon(self: *const Self, arg_icon: *const godot.Texture) !void {
        if (mbind_set_right_icon == null) {
            mbind_set_right_icon = try api.createMethod("LineEdit", "set_right_icon");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_icon),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_right_icon, base, cargs, result);
    }

    pub fn setSecret(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_secret == null) {
            mbind_set_secret = try api.createMethod("LineEdit", "set_secret");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_secret, base, cargs, result);
    }

    pub fn setSecretCharacter(self: *const Self, arg_character: *const godot.String) !void {
        if (mbind_set_secret_character == null) {
            mbind_set_secret_character = try api.createMethod("LineEdit", "set_secret_character");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_character),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_secret_character, base, cargs, result);
    }

    pub fn setSelectingEnabled(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_selecting_enabled == null) {
            mbind_set_selecting_enabled = try api.createMethod("LineEdit", "set_selecting_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_selecting_enabled, base, cargs, result);
    }

    pub fn setShortcutKeysEnabled(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_shortcut_keys_enabled == null) {
            mbind_set_shortcut_keys_enabled = try api.createMethod("LineEdit", "set_shortcut_keys_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_shortcut_keys_enabled, base, cargs, result);
    }

    pub fn setText(self: *const Self, arg_text: *const godot.String) !void {
        if (mbind_set_text == null) {
            mbind_set_text = try api.createMethod("LineEdit", "set_text");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_text),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_text, base, cargs, result);
    }

    pub fn setVirtualKeyboardEnabled(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_virtual_keyboard_enabled == null) {
            mbind_set_virtual_keyboard_enabled = try api.createMethod("LineEdit", "set_virtual_keyboard_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_virtual_keyboard_enabled, base, cargs, result);
    }
};