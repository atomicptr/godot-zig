// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_bounce: ?*c_api.godot_method_bind = null;
var mbind_get_friction: ?*c_api.godot_method_bind = null;
var mbind_is_absorbent: ?*c_api.godot_method_bind = null;
var mbind_is_rough: ?*c_api.godot_method_bind = null;
var mbind_set_absorbent: ?*c_api.godot_method_bind = null;
var mbind_set_bounce: ?*c_api.godot_method_bind = null;
var mbind_set_friction: ?*c_api.godot_method_bind = null;
var mbind_set_rough: ?*c_api.godot_method_bind = null;
var mbind_physics_material_constructor: ?fn () ?*c_api.godot_object = null;

pub const PhysicsMaterial = struct {
    const Self = @This();
    pub const BaseClass = godot.Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_physics_material_constructor == null) {
            mbind_physics_material_constructor = try api.createConstructor("PhysicsMaterial");
        }
        return api.createObject(Self, mbind_physics_material_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBounce(self: *const Self) !f32 {
        if (mbind_get_bounce == null) {
            mbind_get_bounce = try api.createMethod("PhysicsMaterial", "get_bounce");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bounce, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFriction(self: *const Self) !f32 {
        if (mbind_get_friction == null) {
            mbind_get_friction = try api.createMethod("PhysicsMaterial", "get_friction");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_friction, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn isAbsorbent(self: *const Self) !bool {
        if (mbind_is_absorbent == null) {
            mbind_is_absorbent = try api.createMethod("PhysicsMaterial", "is_absorbent");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_absorbent, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isRough(self: *const Self) !bool {
        if (mbind_is_rough == null) {
            mbind_is_rough = try api.createMethod("PhysicsMaterial", "is_rough");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_rough, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setAbsorbent(self: *const Self, arg_absorbent: bool) !void {
        if (mbind_set_absorbent == null) {
            mbind_set_absorbent = try api.createMethod("PhysicsMaterial", "set_absorbent");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_absorbent),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_absorbent, base, cargs, result);
    }

    pub fn setBounce(self: *const Self, arg_bounce: f32) !void {
        if (mbind_set_bounce == null) {
            mbind_set_bounce = try api.createMethod("PhysicsMaterial", "set_bounce");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bounce),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bounce, base, cargs, result);
    }

    pub fn setFriction(self: *const Self, arg_friction: f32) !void {
        if (mbind_set_friction == null) {
            mbind_set_friction = try api.createMethod("PhysicsMaterial", "set_friction");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_friction),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_friction, base, cargs, result);
    }

    pub fn setRough(self: *const Self, arg_rough: bool) !void {
        if (mbind_set_rough == null) {
            mbind_set_rough = try api.createMethod("PhysicsMaterial", "set_rough");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_rough),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rough, base, cargs, result);
    }
};