// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_add_user_signal: ?*c_api.godot_method_bind = null;
var mbind_call: ?*c_api.godot_method_bind = null;
var mbind_call_deferred: ?*c_api.godot_method_bind = null;
var mbind_callv: ?*c_api.godot_method_bind = null;
var mbind_can_translate_messages: ?*c_api.godot_method_bind = null;
var mbind_connect: ?*c_api.godot_method_bind = null;
var mbind_disconnect: ?*c_api.godot_method_bind = null;
var mbind_emit_signal: ?*c_api.godot_method_bind = null;
var mbind_free: ?*c_api.godot_method_bind = null;
var mbind_get: ?*c_api.godot_method_bind = null;
var mbind_get_class: ?*c_api.godot_method_bind = null;
var mbind_get_incoming_connections: ?*c_api.godot_method_bind = null;
var mbind_get_indexed: ?*c_api.godot_method_bind = null;
var mbind_get_instance_id: ?*c_api.godot_method_bind = null;
var mbind_get_meta: ?*c_api.godot_method_bind = null;
var mbind_get_meta_list: ?*c_api.godot_method_bind = null;
var mbind_get_method_list: ?*c_api.godot_method_bind = null;
var mbind_get_property_list: ?*c_api.godot_method_bind = null;
var mbind_get_script: ?*c_api.godot_method_bind = null;
var mbind_get_signal_connection_list: ?*c_api.godot_method_bind = null;
var mbind_get_signal_list: ?*c_api.godot_method_bind = null;
var mbind_has_meta: ?*c_api.godot_method_bind = null;
var mbind_has_method: ?*c_api.godot_method_bind = null;
var mbind_has_signal: ?*c_api.godot_method_bind = null;
var mbind_has_user_signal: ?*c_api.godot_method_bind = null;
var mbind_is_blocking_signals: ?*c_api.godot_method_bind = null;
var mbind_is_class: ?*c_api.godot_method_bind = null;
var mbind_is_connected: ?*c_api.godot_method_bind = null;
var mbind_is_queued_for_deletion: ?*c_api.godot_method_bind = null;
var mbind_notification: ?*c_api.godot_method_bind = null;
var mbind_property_list_changed_notify: ?*c_api.godot_method_bind = null;
var mbind_remove_meta: ?*c_api.godot_method_bind = null;
var mbind_set: ?*c_api.godot_method_bind = null;
var mbind_set_block_signals: ?*c_api.godot_method_bind = null;
var mbind_set_deferred: ?*c_api.godot_method_bind = null;
var mbind_set_indexed: ?*c_api.godot_method_bind = null;
var mbind_set_message_translation: ?*c_api.godot_method_bind = null;
var mbind_set_meta: ?*c_api.godot_method_bind = null;
var mbind_set_script: ?*c_api.godot_method_bind = null;
var mbind_to_string: ?*c_api.godot_method_bind = null;
var mbind_tr: ?*c_api.godot_method_bind = null;
var mbind_object_constructor: ?fn () ?*c_api.godot_object = null;

pub const Object = struct {
    const Self = @This();

    pub fn init() !*Self {
        if (mbind_object_constructor == null) {
            mbind_object_constructor = try api.createConstructor("Object");
        }
        return api.createObject(Self, mbind_object_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addUserSignal(self: *const Self, arg_signal: *const godot.String, arg_arguments: *const godot.Array) !void {
        _ = self;

        if (mbind_add_user_signal == null) {
            mbind_add_user_signal = try api.createMethod("Object", "add_user_signal");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal),
            @ptrCast(*const anyopaque, arg_arguments),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_user_signal, null, cargs, result);
    }

    pub fn call(self: *const Self, arg_method: *const godot.String) !godot.Variant {
        _ = self;

        if (mbind_call == null) {
            mbind_call = try api.createMethod("Object", "call");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_method),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_call, null, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn callDeferred(self: *const Self, arg_method: *const godot.String) !void {
        _ = self;

        if (mbind_call_deferred == null) {
            mbind_call_deferred = try api.createMethod("Object", "call_deferred");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_method),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_call_deferred, null, cargs, result);
    }

    pub fn callv(self: *const Self, arg_method: *const godot.String, arg_arg_array: *const godot.Array) !godot.Variant {
        _ = self;

        if (mbind_callv == null) {
            mbind_callv = try api.createMethod("Object", "callv");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_method),
            @ptrCast(*const anyopaque, arg_arg_array),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_callv, null, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn canTranslateMessages(self: *const Self) !bool {
        _ = self;

        if (mbind_can_translate_messages == null) {
            mbind_can_translate_messages = try api.createMethod("Object", "can_translate_messages");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_can_translate_messages, null, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn connect(self: *const Self, arg_signal: *const godot.String, arg_target: *const godot.Object, arg_method: *const godot.String, arg_binds: *const godot.Array, arg_flags: i32) !i32 {
        _ = self;

        if (mbind_connect == null) {
            mbind_connect = try api.createMethod("Object", "connect");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal),
            @ptrCast(*const anyopaque, arg_target),
            @ptrCast(*const anyopaque, arg_method),
            @ptrCast(*const anyopaque, arg_binds),
            @ptrCast(*const anyopaque, *arg_flags),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_connect, null, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn disconnect(self: *const Self, arg_signal: *const godot.String, arg_target: *const godot.Object, arg_method: *const godot.String) !void {
        _ = self;

        if (mbind_disconnect == null) {
            mbind_disconnect = try api.createMethod("Object", "disconnect");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal),
            @ptrCast(*const anyopaque, arg_target),
            @ptrCast(*const anyopaque, arg_method),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_disconnect, null, cargs, result);
    }

    pub fn emitSignal(self: *const Self, arg_signal: *const godot.String) !void {
        _ = self;

        if (mbind_emit_signal == null) {
            mbind_emit_signal = try api.createMethod("Object", "emit_signal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_emit_signal, null, cargs, result);
    }

    pub fn free(self: *const Self) !void {
        _ = self;

        if (mbind_free == null) {
            mbind_free = try api.createMethod("Object", "free");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_free, null, cargs, result);
    }

    pub fn get(self: *const Self, arg_property: *const godot.String) !godot.Variant {
        _ = self;

        if (mbind_get == null) {
            mbind_get = try api.createMethod("Object", "get");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_property),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get, null, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getClass(self: *const Self) !godot.String {
        _ = self;

        if (mbind_get_class == null) {
            mbind_get_class = try api.createMethod("Object", "get_class");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_class, null, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getIncomingConnections(self: *const Self) !godot.Array {
        _ = self;

        if (mbind_get_incoming_connections == null) {
            mbind_get_incoming_connections = try api.createMethod("Object", "get_incoming_connections");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_incoming_connections, null, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getIndexed(self: *const Self, arg_property: *const godot.NodePath) !godot.Variant {
        _ = self;

        if (mbind_get_indexed == null) {
            mbind_get_indexed = try api.createMethod("Object", "get_indexed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_property),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_indexed, null, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getInstanceId(self: *const Self) !i32 {
        _ = self;

        if (mbind_get_instance_id == null) {
            mbind_get_instance_id = try api.createMethod("Object", "get_instance_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_instance_id, null, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMeta(self: *const Self, arg_name: *const godot.String) !godot.Variant {
        _ = self;

        if (mbind_get_meta == null) {
            mbind_get_meta = try api.createMethod("Object", "get_meta");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_meta, null, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getMetaList(self: *const Self) !godot.PoolStringArray {
        _ = self;

        if (mbind_get_meta_list == null) {
            mbind_get_meta_list = try api.createMethod("Object", "get_meta_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_meta_list, null, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn getMethodList(self: *const Self) !godot.Array {
        _ = self;

        if (mbind_get_method_list == null) {
            mbind_get_method_list = try api.createMethod("Object", "get_method_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_method_list, null, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getPropertyList(self: *const Self) !godot.Array {
        _ = self;

        if (mbind_get_property_list == null) {
            mbind_get_property_list = try api.createMethod("Object", "get_property_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_property_list, null, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getScript(self: *const Self) !godot.Reference {
        _ = self;

        if (mbind_get_script == null) {
            mbind_get_script = try api.createMethod("Object", "get_script");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_script, null, cargs, result);
        return @ptrCast(*godot.Reference, @alignCast(@alignOf(&godot.Reference), result)).*;
    }

    pub fn getSignalConnectionList(self: *const Self, arg_signal: *const godot.String) !godot.Array {
        _ = self;

        if (mbind_get_signal_connection_list == null) {
            mbind_get_signal_connection_list = try api.createMethod("Object", "get_signal_connection_list");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_signal_connection_list, null, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getSignalList(self: *const Self) !godot.Array {
        _ = self;

        if (mbind_get_signal_list == null) {
            mbind_get_signal_list = try api.createMethod("Object", "get_signal_list");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_signal_list, null, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn hasMeta(self: *const Self, arg_name: *const godot.String) !bool {
        _ = self;

        if (mbind_has_meta == null) {
            mbind_has_meta = try api.createMethod("Object", "has_meta");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_meta, null, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn hasMethod(self: *const Self, arg_method: *const godot.String) !bool {
        _ = self;

        if (mbind_has_method == null) {
            mbind_has_method = try api.createMethod("Object", "has_method");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_method),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_method, null, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn hasSignal(self: *const Self, arg_signal: *const godot.String) !bool {
        _ = self;

        if (mbind_has_signal == null) {
            mbind_has_signal = try api.createMethod("Object", "has_signal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_signal, null, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn hasUserSignal(self: *const Self, arg_signal: *const godot.String) !bool {
        _ = self;

        if (mbind_has_user_signal == null) {
            mbind_has_user_signal = try api.createMethod("Object", "has_user_signal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_user_signal, null, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isBlockingSignals(self: *const Self) !bool {
        _ = self;

        if (mbind_is_blocking_signals == null) {
            mbind_is_blocking_signals = try api.createMethod("Object", "is_blocking_signals");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_blocking_signals, null, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isClass(self: *const Self, arg_class: *const godot.String) !bool {
        _ = self;

        if (mbind_is_class == null) {
            mbind_is_class = try api.createMethod("Object", "is_class");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_class, null, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isConnected(self: *const Self, arg_signal: *const godot.String, arg_target: *const godot.Object, arg_method: *const godot.String) !bool {
        _ = self;

        if (mbind_is_connected == null) {
            mbind_is_connected = try api.createMethod("Object", "is_connected");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal),
            @ptrCast(*const anyopaque, arg_target),
            @ptrCast(*const anyopaque, arg_method),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_connected, null, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isQueuedForDeletion(self: *const Self) !bool {
        _ = self;

        if (mbind_is_queued_for_deletion == null) {
            mbind_is_queued_for_deletion = try api.createMethod("Object", "is_queued_for_deletion");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_queued_for_deletion, null, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn notification(self: *const Self, arg_what: i32, arg_reversed: bool) !void {
        _ = self;

        if (mbind_notification == null) {
            mbind_notification = try api.createMethod("Object", "notification");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_what),
            @ptrCast(*const anyopaque, *arg_reversed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_notification, null, cargs, result);
    }

    pub fn propertyListChangedNotify(self: *const Self) !void {
        _ = self;

        if (mbind_property_list_changed_notify == null) {
            mbind_property_list_changed_notify = try api.createMethod("Object", "property_list_changed_notify");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_property_list_changed_notify, null, cargs, result);
    }

    pub fn removeMeta(self: *const Self, arg_name: *const godot.String) !void {
        _ = self;

        if (mbind_remove_meta == null) {
            mbind_remove_meta = try api.createMethod("Object", "remove_meta");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_meta, null, cargs, result);
    }

    pub fn set(self: *const Self, arg_property: *const godot.String, arg_value: *const godot.Variant) !void {
        _ = self;

        if (mbind_set == null) {
            mbind_set = try api.createMethod("Object", "set");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_property),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set, null, cargs, result);
    }

    pub fn setBlockSignals(self: *const Self, arg_enable: bool) !void {
        _ = self;

        if (mbind_set_block_signals == null) {
            mbind_set_block_signals = try api.createMethod("Object", "set_block_signals");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_block_signals, null, cargs, result);
    }

    pub fn setDeferred(self: *const Self, arg_property: *const godot.String, arg_value: *const godot.Variant) !void {
        _ = self;

        if (mbind_set_deferred == null) {
            mbind_set_deferred = try api.createMethod("Object", "set_deferred");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_property),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_deferred, null, cargs, result);
    }

    pub fn setIndexed(self: *const Self, arg_property: *const godot.NodePath, arg_value: *const godot.Variant) !void {
        _ = self;

        if (mbind_set_indexed == null) {
            mbind_set_indexed = try api.createMethod("Object", "set_indexed");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_property),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_indexed, null, cargs, result);
    }

    pub fn setMessageTranslation(self: *const Self, arg_enable: bool) !void {
        _ = self;

        if (mbind_set_message_translation == null) {
            mbind_set_message_translation = try api.createMethod("Object", "set_message_translation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_message_translation, null, cargs, result);
    }

    pub fn setMeta(self: *const Self, arg_name: *const godot.String, arg_value: *const godot.Variant) !void {
        _ = self;

        if (mbind_set_meta == null) {
            mbind_set_meta = try api.createMethod("Object", "set_meta");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_meta, null, cargs, result);
    }

    pub fn setScript(self: *const Self, arg_script: *const godot.Reference) !void {
        _ = self;

        if (mbind_set_script == null) {
            mbind_set_script = try api.createMethod("Object", "set_script");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_script),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_script, null, cargs, result);
    }

    pub fn toString(self: *const Self) !godot.String {
        _ = self;

        if (mbind_to_string == null) {
            mbind_to_string = try api.createMethod("Object", "to_string");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_to_string, null, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn tr(self: *const Self, arg_message: *const godot.String) !godot.String {
        _ = self;

        if (mbind_tr == null) {
            mbind_tr = try api.createMethod("Object", "tr");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_message),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_tr, null, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }
};