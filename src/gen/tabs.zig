// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Control = @import("control.zig").Control;

// method bindings
var mbind_add_tab: ?*c_api.godot_method_bind = null;
var mbind_ensure_tab_visible: ?*c_api.godot_method_bind = null;
var mbind_get_current_tab: ?*c_api.godot_method_bind = null;
var mbind_get_drag_to_rearrange_enabled: ?*c_api.godot_method_bind = null;
var mbind_get_offset_buttons_visible: ?*c_api.godot_method_bind = null;
var mbind_get_previous_tab: ?*c_api.godot_method_bind = null;
var mbind_get_scrolling_enabled: ?*c_api.godot_method_bind = null;
var mbind_get_select_with_rmb: ?*c_api.godot_method_bind = null;
var mbind_get_tab_align: ?*c_api.godot_method_bind = null;
var mbind_get_tab_close_display_policy: ?*c_api.godot_method_bind = null;
var mbind_get_tab_count: ?*c_api.godot_method_bind = null;
var mbind_get_tab_disabled: ?*c_api.godot_method_bind = null;
var mbind_get_tab_icon: ?*c_api.godot_method_bind = null;
var mbind_get_tab_offset: ?*c_api.godot_method_bind = null;
var mbind_get_tab_rect: ?*c_api.godot_method_bind = null;
var mbind_get_tab_title: ?*c_api.godot_method_bind = null;
var mbind_get_tabs_rearrange_group: ?*c_api.godot_method_bind = null;
var mbind_move_tab: ?*c_api.godot_method_bind = null;
var mbind_remove_tab: ?*c_api.godot_method_bind = null;
var mbind_set_current_tab: ?*c_api.godot_method_bind = null;
var mbind_set_drag_to_rearrange_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_scrolling_enabled: ?*c_api.godot_method_bind = null;
var mbind_set_select_with_rmb: ?*c_api.godot_method_bind = null;
var mbind_set_tab_align: ?*c_api.godot_method_bind = null;
var mbind_set_tab_close_display_policy: ?*c_api.godot_method_bind = null;
var mbind_set_tab_disabled: ?*c_api.godot_method_bind = null;
var mbind_set_tab_icon: ?*c_api.godot_method_bind = null;
var mbind_set_tab_title: ?*c_api.godot_method_bind = null;
var mbind_set_tabs_rearrange_group: ?*c_api.godot_method_bind = null;
var mbind_tabs_constructor: ?fn () ?*c_api.godot_object = null;

pub const Tabs = struct {
    const Self = @This();
    const BaseClass = Control;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_tabs_constructor == null) {
            mbind_tabs_constructor = try api.createConstructor("Tabs");
        }
        return api.createObject(Self, mbind_tabs_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addTab(self: *const Self, arg_title: *const godot.String, arg_icon: *const godot.Texture) !void {
        if (mbind_add_tab == null) {
            mbind_add_tab = try api.createMethod("Tabs", "add_tab");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_title),
            @ptrCast(*const anyopaque, arg_icon),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_tab, base, cargs, result);
    }

    pub fn ensureTabVisible(self: *const Self, arg_idx: i32) !void {
        if (mbind_ensure_tab_visible == null) {
            mbind_ensure_tab_visible = try api.createMethod("Tabs", "ensure_tab_visible");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_ensure_tab_visible, base, cargs, result);
    }

    pub fn getCurrentTab(self: *const Self) !i32 {
        if (mbind_get_current_tab == null) {
            mbind_get_current_tab = try api.createMethod("Tabs", "get_current_tab");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_current_tab, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDragToRearrangeEnabled(self: *const Self) !bool {
        if (mbind_get_drag_to_rearrange_enabled == null) {
            mbind_get_drag_to_rearrange_enabled = try api.createMethod("Tabs", "get_drag_to_rearrange_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_drag_to_rearrange_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getOffsetButtonsVisible(self: *const Self) !bool {
        if (mbind_get_offset_buttons_visible == null) {
            mbind_get_offset_buttons_visible = try api.createMethod("Tabs", "get_offset_buttons_visible");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_offset_buttons_visible, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getPreviousTab(self: *const Self) !i32 {
        if (mbind_get_previous_tab == null) {
            mbind_get_previous_tab = try api.createMethod("Tabs", "get_previous_tab");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_previous_tab, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getScrollingEnabled(self: *const Self) !bool {
        if (mbind_get_scrolling_enabled == null) {
            mbind_get_scrolling_enabled = try api.createMethod("Tabs", "get_scrolling_enabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_scrolling_enabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getSelectWithRmb(self: *const Self) !bool {
        if (mbind_get_select_with_rmb == null) {
            mbind_get_select_with_rmb = try api.createMethod("Tabs", "get_select_with_rmb");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_select_with_rmb, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getTabAlign(self: *const Self) !i32 {
        if (mbind_get_tab_align == null) {
            mbind_get_tab_align = try api.createMethod("Tabs", "get_tab_align");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tab_align, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTabCloseDisplayPolicy(self: *const Self) !i32 {
        if (mbind_get_tab_close_display_policy == null) {
            mbind_get_tab_close_display_policy = try api.createMethod("Tabs", "get_tab_close_display_policy");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tab_close_display_policy, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTabCount(self: *const Self) !i32 {
        if (mbind_get_tab_count == null) {
            mbind_get_tab_count = try api.createMethod("Tabs", "get_tab_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tab_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTabDisabled(self: *const Self, arg_tab_idx: i32) !bool {
        if (mbind_get_tab_disabled == null) {
            mbind_get_tab_disabled = try api.createMethod("Tabs", "get_tab_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_tab_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tab_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getTabIcon(self: *const Self, arg_tab_idx: i32) !godot.Texture {
        if (mbind_get_tab_icon == null) {
            mbind_get_tab_icon = try api.createMethod("Tabs", "get_tab_icon");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_tab_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tab_icon, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getTabOffset(self: *const Self) !i32 {
        if (mbind_get_tab_offset == null) {
            mbind_get_tab_offset = try api.createMethod("Tabs", "get_tab_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tab_offset, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTabRect(self: *const Self, arg_tab_idx: i32) !godot.Rect2 {
        if (mbind_get_tab_rect == null) {
            mbind_get_tab_rect = try api.createMethod("Tabs", "get_tab_rect");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_tab_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tab_rect, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn getTabTitle(self: *const Self, arg_tab_idx: i32) !godot.String {
        if (mbind_get_tab_title == null) {
            mbind_get_tab_title = try api.createMethod("Tabs", "get_tab_title");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_tab_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tab_title, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getTabsRearrangeGroup(self: *const Self) !i32 {
        if (mbind_get_tabs_rearrange_group == null) {
            mbind_get_tabs_rearrange_group = try api.createMethod("Tabs", "get_tabs_rearrange_group");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tabs_rearrange_group, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn moveTab(self: *const Self, arg_from: i32, arg_to: i32) !void {
        if (mbind_move_tab == null) {
            mbind_move_tab = try api.createMethod("Tabs", "move_tab");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_from),
            @ptrCast(*const anyopaque, *arg_to),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_move_tab, base, cargs, result);
    }

    pub fn removeTab(self: *const Self, arg_tab_idx: i32) !void {
        if (mbind_remove_tab == null) {
            mbind_remove_tab = try api.createMethod("Tabs", "remove_tab");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_tab_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_tab, base, cargs, result);
    }

    pub fn setCurrentTab(self: *const Self, arg_tab_idx: i32) !void {
        if (mbind_set_current_tab == null) {
            mbind_set_current_tab = try api.createMethod("Tabs", "set_current_tab");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_tab_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_current_tab, base, cargs, result);
    }

    pub fn setDragToRearrangeEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_drag_to_rearrange_enabled == null) {
            mbind_set_drag_to_rearrange_enabled = try api.createMethod("Tabs", "set_drag_to_rearrange_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_drag_to_rearrange_enabled, base, cargs, result);
    }

    pub fn setScrollingEnabled(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_scrolling_enabled == null) {
            mbind_set_scrolling_enabled = try api.createMethod("Tabs", "set_scrolling_enabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_scrolling_enabled, base, cargs, result);
    }

    pub fn setSelectWithRmb(self: *const Self, arg_enabled: bool) !void {
        if (mbind_set_select_with_rmb == null) {
            mbind_set_select_with_rmb = try api.createMethod("Tabs", "set_select_with_rmb");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_select_with_rmb, base, cargs, result);
    }

    pub fn setTabAlign(self: *const Self, arg_align: i32) !void {
        if (mbind_set_tab_align == null) {
            mbind_set_tab_align = try api.createMethod("Tabs", "set_tab_align");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_align),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tab_align, base, cargs, result);
    }

    pub fn setTabCloseDisplayPolicy(self: *const Self, arg_policy: i32) !void {
        if (mbind_set_tab_close_display_policy == null) {
            mbind_set_tab_close_display_policy = try api.createMethod("Tabs", "set_tab_close_display_policy");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_policy),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tab_close_display_policy, base, cargs, result);
    }

    pub fn setTabDisabled(self: *const Self, arg_tab_idx: i32, arg_disabled: bool) !void {
        if (mbind_set_tab_disabled == null) {
            mbind_set_tab_disabled = try api.createMethod("Tabs", "set_tab_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_tab_idx),
            @ptrCast(*const anyopaque, *arg_disabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tab_disabled, base, cargs, result);
    }

    pub fn setTabIcon(self: *const Self, arg_tab_idx: i32, arg_icon: *const godot.Texture) !void {
        if (mbind_set_tab_icon == null) {
            mbind_set_tab_icon = try api.createMethod("Tabs", "set_tab_icon");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_tab_idx),
            @ptrCast(*const anyopaque, arg_icon),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tab_icon, base, cargs, result);
    }

    pub fn setTabTitle(self: *const Self, arg_tab_idx: i32, arg_title: *const godot.String) !void {
        if (mbind_set_tab_title == null) {
            mbind_set_tab_title = try api.createMethod("Tabs", "set_tab_title");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_tab_idx),
            @ptrCast(*const anyopaque, arg_title),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tab_title, base, cargs, result);
    }

    pub fn setTabsRearrangeGroup(self: *const Self, arg_group_id: i32) !void {
        if (mbind_set_tabs_rearrange_group == null) {
            mbind_set_tabs_rearrange_group = try api.createMethod("Tabs", "set_tabs_rearrange_group");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_group_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tabs_rearrange_group, base, cargs, result);
    }
};