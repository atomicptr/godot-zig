// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_bone: ?*c_api.godot_method_bind = null;
var mbind_get_bone_count: ?*c_api.godot_method_bind = null;
var mbind_get_skeleton: ?*c_api.godot_method_bind = null;
var mbind_skeleton_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const Skeleton2D = struct {
    const Self = @This();
    pub const BaseClass = godot.Node2D;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_skeleton_2d_constructor == null) {
            mbind_skeleton_2d_constructor = try api.createConstructor("Skeleton2D");
        }
        return api.createObject(Self, mbind_skeleton_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBone(self: *const Self, arg_idx: i32) !godot.Bone2D {
        if (mbind_get_bone == null) {
            mbind_get_bone = try api.createMethod("Skeleton2D", "get_bone");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone, base, cargs, result);
        return @ptrCast(*godot.Bone2D, @alignCast(@alignOf(&godot.Bone2D), result)).*;
    }

    pub fn getBoneCount(self: *const Self) !i32 {
        if (mbind_get_bone_count == null) {
            mbind_get_bone_count = try api.createMethod("Skeleton2D", "get_bone_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bone_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSkeleton(self: *const Self) !godot.RID {
        if (mbind_get_skeleton == null) {
            mbind_get_skeleton = try api.createMethod("Skeleton2D", "get_skeleton");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_skeleton, base, cargs, result);
        return @ptrCast(*godot.RID, @alignCast(@alignOf(&godot.RID), result)).*;
    }
};