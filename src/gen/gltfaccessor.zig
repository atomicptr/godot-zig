// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_get_buffer_view: ?*c_api.godot_method_bind = null;
var mbind_get_byte_offset: ?*c_api.godot_method_bind = null;
var mbind_get_component_type: ?*c_api.godot_method_bind = null;
var mbind_get_count: ?*c_api.godot_method_bind = null;
var mbind_get_max: ?*c_api.godot_method_bind = null;
var mbind_get_min: ?*c_api.godot_method_bind = null;
var mbind_get_normalized: ?*c_api.godot_method_bind = null;
var mbind_get_sparse_count: ?*c_api.godot_method_bind = null;
var mbind_get_sparse_indices_buffer_view: ?*c_api.godot_method_bind = null;
var mbind_get_sparse_indices_byte_offset: ?*c_api.godot_method_bind = null;
var mbind_get_sparse_indices_component_type: ?*c_api.godot_method_bind = null;
var mbind_get_sparse_values_buffer_view: ?*c_api.godot_method_bind = null;
var mbind_get_sparse_values_byte_offset: ?*c_api.godot_method_bind = null;
var mbind_get_type: ?*c_api.godot_method_bind = null;
var mbind_set_buffer_view: ?*c_api.godot_method_bind = null;
var mbind_set_byte_offset: ?*c_api.godot_method_bind = null;
var mbind_set_component_type: ?*c_api.godot_method_bind = null;
var mbind_set_count: ?*c_api.godot_method_bind = null;
var mbind_set_max: ?*c_api.godot_method_bind = null;
var mbind_set_min: ?*c_api.godot_method_bind = null;
var mbind_set_normalized: ?*c_api.godot_method_bind = null;
var mbind_set_sparse_count: ?*c_api.godot_method_bind = null;
var mbind_set_sparse_indices_buffer_view: ?*c_api.godot_method_bind = null;
var mbind_set_sparse_indices_byte_offset: ?*c_api.godot_method_bind = null;
var mbind_set_sparse_indices_component_type: ?*c_api.godot_method_bind = null;
var mbind_set_sparse_values_buffer_view: ?*c_api.godot_method_bind = null;
var mbind_set_sparse_values_byte_offset: ?*c_api.godot_method_bind = null;
var mbind_set_type: ?*c_api.godot_method_bind = null;
var mbind_gltfaccessor_constructor: ?fn () ?*c_api.godot_object = null;

pub const GLTFAccessor = struct {
    const Self = @This();
    const BaseClass = Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_gltfaccessor_constructor == null) {
            mbind_gltfaccessor_constructor = try api.createConstructor("GLTFAccessor");
        }
        return api.createObject(Self, mbind_gltfaccessor_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBufferView(self: *const Self) !i32 {
        if (mbind_get_buffer_view == null) {
            mbind_get_buffer_view = try api.createMethod("GLTFAccessor", "get_buffer_view");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_buffer_view, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getByteOffset(self: *const Self) !i32 {
        if (mbind_get_byte_offset == null) {
            mbind_get_byte_offset = try api.createMethod("GLTFAccessor", "get_byte_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_byte_offset, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getComponentType(self: *const Self) !i32 {
        if (mbind_get_component_type == null) {
            mbind_get_component_type = try api.createMethod("GLTFAccessor", "get_component_type");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_component_type, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCount(self: *const Self) !i32 {
        if (mbind_get_count == null) {
            mbind_get_count = try api.createMethod("GLTFAccessor", "get_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMax(self: *const Self) !godot.PoolRealArray {
        if (mbind_get_max == null) {
            mbind_get_max = try api.createMethod("GLTFAccessor", "get_max");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_max, base, cargs, result);
        return @ptrCast(*godot.PoolRealArray, @alignCast(@alignOf(&godot.PoolRealArray), result)).*;
    }

    pub fn getMin(self: *const Self) !godot.PoolRealArray {
        if (mbind_get_min == null) {
            mbind_get_min = try api.createMethod("GLTFAccessor", "get_min");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_min, base, cargs, result);
        return @ptrCast(*godot.PoolRealArray, @alignCast(@alignOf(&godot.PoolRealArray), result)).*;
    }

    pub fn getNormalized(self: *const Self) !bool {
        if (mbind_get_normalized == null) {
            mbind_get_normalized = try api.createMethod("GLTFAccessor", "get_normalized");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_normalized, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getSparseCount(self: *const Self) !i32 {
        if (mbind_get_sparse_count == null) {
            mbind_get_sparse_count = try api.createMethod("GLTFAccessor", "get_sparse_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sparse_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSparseIndicesBufferView(self: *const Self) !i32 {
        if (mbind_get_sparse_indices_buffer_view == null) {
            mbind_get_sparse_indices_buffer_view = try api.createMethod("GLTFAccessor", "get_sparse_indices_buffer_view");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sparse_indices_buffer_view, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSparseIndicesByteOffset(self: *const Self) !i32 {
        if (mbind_get_sparse_indices_byte_offset == null) {
            mbind_get_sparse_indices_byte_offset = try api.createMethod("GLTFAccessor", "get_sparse_indices_byte_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sparse_indices_byte_offset, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSparseIndicesComponentType(self: *const Self) !i32 {
        if (mbind_get_sparse_indices_component_type == null) {
            mbind_get_sparse_indices_component_type = try api.createMethod("GLTFAccessor", "get_sparse_indices_component_type");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sparse_indices_component_type, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSparseValuesBufferView(self: *const Self) !i32 {
        if (mbind_get_sparse_values_buffer_view == null) {
            mbind_get_sparse_values_buffer_view = try api.createMethod("GLTFAccessor", "get_sparse_values_buffer_view");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sparse_values_buffer_view, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSparseValuesByteOffset(self: *const Self) !i32 {
        if (mbind_get_sparse_values_byte_offset == null) {
            mbind_get_sparse_values_byte_offset = try api.createMethod("GLTFAccessor", "get_sparse_values_byte_offset");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sparse_values_byte_offset, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getType(self: *const Self) !i32 {
        if (mbind_get_type == null) {
            mbind_get_type = try api.createMethod("GLTFAccessor", "get_type");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_type, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setBufferView(self: *const Self, arg_buffer_view: i32) !void {
        if (mbind_set_buffer_view == null) {
            mbind_set_buffer_view = try api.createMethod("GLTFAccessor", "set_buffer_view");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_buffer_view),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_buffer_view, base, cargs, result);
    }

    pub fn setByteOffset(self: *const Self, arg_byte_offset: i32) !void {
        if (mbind_set_byte_offset == null) {
            mbind_set_byte_offset = try api.createMethod("GLTFAccessor", "set_byte_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_byte_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_byte_offset, base, cargs, result);
    }

    pub fn setComponentType(self: *const Self, arg_component_type: i32) !void {
        if (mbind_set_component_type == null) {
            mbind_set_component_type = try api.createMethod("GLTFAccessor", "set_component_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_component_type),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_component_type, base, cargs, result);
    }

    pub fn setCount(self: *const Self, arg_count: i32) !void {
        if (mbind_set_count == null) {
            mbind_set_count = try api.createMethod("GLTFAccessor", "set_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_count),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_count, base, cargs, result);
    }

    pub fn setMax(self: *const Self, arg_max: *const godot.PoolRealArray) !void {
        if (mbind_set_max == null) {
            mbind_set_max = try api.createMethod("GLTFAccessor", "set_max");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_max),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_max, base, cargs, result);
    }

    pub fn setMin(self: *const Self, arg_min: *const godot.PoolRealArray) !void {
        if (mbind_set_min == null) {
            mbind_set_min = try api.createMethod("GLTFAccessor", "set_min");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_min),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_min, base, cargs, result);
    }

    pub fn setNormalized(self: *const Self, arg_normalized: bool) !void {
        if (mbind_set_normalized == null) {
            mbind_set_normalized = try api.createMethod("GLTFAccessor", "set_normalized");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_normalized),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_normalized, base, cargs, result);
    }

    pub fn setSparseCount(self: *const Self, arg_sparse_count: i32) !void {
        if (mbind_set_sparse_count == null) {
            mbind_set_sparse_count = try api.createMethod("GLTFAccessor", "set_sparse_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_sparse_count),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sparse_count, base, cargs, result);
    }

    pub fn setSparseIndicesBufferView(self: *const Self, arg_sparse_indices_buffer_view: i32) !void {
        if (mbind_set_sparse_indices_buffer_view == null) {
            mbind_set_sparse_indices_buffer_view = try api.createMethod("GLTFAccessor", "set_sparse_indices_buffer_view");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_sparse_indices_buffer_view),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sparse_indices_buffer_view, base, cargs, result);
    }

    pub fn setSparseIndicesByteOffset(self: *const Self, arg_sparse_indices_byte_offset: i32) !void {
        if (mbind_set_sparse_indices_byte_offset == null) {
            mbind_set_sparse_indices_byte_offset = try api.createMethod("GLTFAccessor", "set_sparse_indices_byte_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_sparse_indices_byte_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sparse_indices_byte_offset, base, cargs, result);
    }

    pub fn setSparseIndicesComponentType(self: *const Self, arg_sparse_indices_component_type: i32) !void {
        if (mbind_set_sparse_indices_component_type == null) {
            mbind_set_sparse_indices_component_type = try api.createMethod("GLTFAccessor", "set_sparse_indices_component_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_sparse_indices_component_type),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sparse_indices_component_type, base, cargs, result);
    }

    pub fn setSparseValuesBufferView(self: *const Self, arg_sparse_values_buffer_view: i32) !void {
        if (mbind_set_sparse_values_buffer_view == null) {
            mbind_set_sparse_values_buffer_view = try api.createMethod("GLTFAccessor", "set_sparse_values_buffer_view");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_sparse_values_buffer_view),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sparse_values_buffer_view, base, cargs, result);
    }

    pub fn setSparseValuesByteOffset(self: *const Self, arg_sparse_values_byte_offset: i32) !void {
        if (mbind_set_sparse_values_byte_offset == null) {
            mbind_set_sparse_values_byte_offset = try api.createMethod("GLTFAccessor", "set_sparse_values_byte_offset");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_sparse_values_byte_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sparse_values_byte_offset, base, cargs, result);
    }

    pub fn setType(self: *const Self, arg_type: i32) !void {
        if (mbind_set_type == null) {
            mbind_set_type = try api.createMethod("GLTFAccessor", "set_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_type),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_type, base, cargs, result);
    }
};