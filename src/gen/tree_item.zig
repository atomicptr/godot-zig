// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Object = @import("object.zig").Object;

// method bindings
var mbind_add_button: ?*c_api.godot_method_bind = null;
var mbind_call_recursive: ?*c_api.godot_method_bind = null;
var mbind_clear_custom_bg_color: ?*c_api.godot_method_bind = null;
var mbind_clear_custom_color: ?*c_api.godot_method_bind = null;
var mbind_deselect: ?*c_api.godot_method_bind = null;
var mbind_erase_button: ?*c_api.godot_method_bind = null;
var mbind_get_button: ?*c_api.godot_method_bind = null;
var mbind_get_button_count: ?*c_api.godot_method_bind = null;
var mbind_get_button_tooltip: ?*c_api.godot_method_bind = null;
var mbind_get_cell_mode: ?*c_api.godot_method_bind = null;
var mbind_get_children: ?*c_api.godot_method_bind = null;
var mbind_get_custom_bg_color: ?*c_api.godot_method_bind = null;
var mbind_get_custom_color: ?*c_api.godot_method_bind = null;
var mbind_get_custom_minimum_height: ?*c_api.godot_method_bind = null;
var mbind_get_expand_right: ?*c_api.godot_method_bind = null;
var mbind_get_icon: ?*c_api.godot_method_bind = null;
var mbind_get_icon_max_width: ?*c_api.godot_method_bind = null;
var mbind_get_icon_modulate: ?*c_api.godot_method_bind = null;
var mbind_get_icon_region: ?*c_api.godot_method_bind = null;
var mbind_get_metadata: ?*c_api.godot_method_bind = null;
var mbind_get_next: ?*c_api.godot_method_bind = null;
var mbind_get_next_visible: ?*c_api.godot_method_bind = null;
var mbind_get_parent: ?*c_api.godot_method_bind = null;
var mbind_get_prev: ?*c_api.godot_method_bind = null;
var mbind_get_prev_visible: ?*c_api.godot_method_bind = null;
var mbind_get_range: ?*c_api.godot_method_bind = null;
var mbind_get_range_config: ?*c_api.godot_method_bind = null;
var mbind_get_suffix: ?*c_api.godot_method_bind = null;
var mbind_get_text: ?*c_api.godot_method_bind = null;
var mbind_get_text_align: ?*c_api.godot_method_bind = null;
var mbind_get_tooltip: ?*c_api.godot_method_bind = null;
var mbind_is_button_disabled: ?*c_api.godot_method_bind = null;
var mbind_is_checked: ?*c_api.godot_method_bind = null;
var mbind_is_collapsed: ?*c_api.godot_method_bind = null;
var mbind_is_custom_set_as_button: ?*c_api.godot_method_bind = null;
var mbind_is_editable: ?*c_api.godot_method_bind = null;
var mbind_is_folding_disabled: ?*c_api.godot_method_bind = null;
var mbind_is_selectable: ?*c_api.godot_method_bind = null;
var mbind_is_selected: ?*c_api.godot_method_bind = null;
var mbind_move_to_bottom: ?*c_api.godot_method_bind = null;
var mbind_move_to_top: ?*c_api.godot_method_bind = null;
var mbind_remove_child: ?*c_api.godot_method_bind = null;
var mbind_select: ?*c_api.godot_method_bind = null;
var mbind_set_button: ?*c_api.godot_method_bind = null;
var mbind_set_button_disabled: ?*c_api.godot_method_bind = null;
var mbind_set_cell_mode: ?*c_api.godot_method_bind = null;
var mbind_set_checked: ?*c_api.godot_method_bind = null;
var mbind_set_collapsed: ?*c_api.godot_method_bind = null;
var mbind_set_custom_as_button: ?*c_api.godot_method_bind = null;
var mbind_set_custom_bg_color: ?*c_api.godot_method_bind = null;
var mbind_set_custom_color: ?*c_api.godot_method_bind = null;
var mbind_set_custom_draw: ?*c_api.godot_method_bind = null;
var mbind_set_custom_minimum_height: ?*c_api.godot_method_bind = null;
var mbind_set_disable_folding: ?*c_api.godot_method_bind = null;
var mbind_set_editable: ?*c_api.godot_method_bind = null;
var mbind_set_expand_right: ?*c_api.godot_method_bind = null;
var mbind_set_icon: ?*c_api.godot_method_bind = null;
var mbind_set_icon_max_width: ?*c_api.godot_method_bind = null;
var mbind_set_icon_modulate: ?*c_api.godot_method_bind = null;
var mbind_set_icon_region: ?*c_api.godot_method_bind = null;
var mbind_set_metadata: ?*c_api.godot_method_bind = null;
var mbind_set_range: ?*c_api.godot_method_bind = null;
var mbind_set_range_config: ?*c_api.godot_method_bind = null;
var mbind_set_selectable: ?*c_api.godot_method_bind = null;
var mbind_set_suffix: ?*c_api.godot_method_bind = null;
var mbind_set_text: ?*c_api.godot_method_bind = null;
var mbind_set_text_align: ?*c_api.godot_method_bind = null;
var mbind_set_tooltip: ?*c_api.godot_method_bind = null;
var mbind_tree_item_constructor: ?fn () ?*c_api.godot_object = null;

pub const TreeItem = struct {
    const Self = @This();
    const BaseClass = Object;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_tree_item_constructor == null) {
            mbind_tree_item_constructor = try api.createConstructor("TreeItem");
        }
        return api.createObject(Self, mbind_tree_item_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addButton(self: *const Self, arg_column: i32, arg_button: *const godot.Texture, arg_button_idx: i32, arg_disabled: bool, arg_tooltip: *const godot.String) !void {
        if (mbind_add_button == null) {
            mbind_add_button = try api.createMethod("TreeItem", "add_button");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_button),
            @ptrCast(*const anyopaque, *arg_button_idx),
            @ptrCast(*const anyopaque, *arg_disabled),
            @ptrCast(*const anyopaque, arg_tooltip),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_button, base, cargs, result);
    }

    pub fn callRecursive(self: *const Self, arg_method: *const godot.String) !godot.Variant {
        if (mbind_call_recursive == null) {
            mbind_call_recursive = try api.createMethod("TreeItem", "call_recursive");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_method),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_call_recursive, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn clearCustomBgColor(self: *const Self, arg_column: i32) !void {
        if (mbind_clear_custom_bg_color == null) {
            mbind_clear_custom_bg_color = try api.createMethod("TreeItem", "clear_custom_bg_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_custom_bg_color, base, cargs, result);
    }

    pub fn clearCustomColor(self: *const Self, arg_column: i32) !void {
        if (mbind_clear_custom_color == null) {
            mbind_clear_custom_color = try api.createMethod("TreeItem", "clear_custom_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear_custom_color, base, cargs, result);
    }

    pub fn deselect(self: *const Self, arg_column: i32) !void {
        if (mbind_deselect == null) {
            mbind_deselect = try api.createMethod("TreeItem", "deselect");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_deselect, base, cargs, result);
    }

    pub fn eraseButton(self: *const Self, arg_column: i32, arg_button_idx: i32) !void {
        if (mbind_erase_button == null) {
            mbind_erase_button = try api.createMethod("TreeItem", "erase_button");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_button_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_erase_button, base, cargs, result);
    }

    pub fn getButton(self: *const Self, arg_column: i32, arg_button_idx: i32) !godot.Texture {
        if (mbind_get_button == null) {
            mbind_get_button = try api.createMethod("TreeItem", "get_button");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_button_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_button, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getButtonCount(self: *const Self, arg_column: i32) !i32 {
        if (mbind_get_button_count == null) {
            mbind_get_button_count = try api.createMethod("TreeItem", "get_button_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_button_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getButtonTooltip(self: *const Self, arg_column: i32, arg_button_idx: i32) !godot.String {
        if (mbind_get_button_tooltip == null) {
            mbind_get_button_tooltip = try api.createMethod("TreeItem", "get_button_tooltip");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_button_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_button_tooltip, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getCellMode(self: *const Self, arg_column: i32) !i32 {
        if (mbind_get_cell_mode == null) {
            mbind_get_cell_mode = try api.createMethod("TreeItem", "get_cell_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_cell_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getChildren(self: *const Self) !godot.TreeItem {
        if (mbind_get_children == null) {
            mbind_get_children = try api.createMethod("TreeItem", "get_children");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_children, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getCustomBgColor(self: *const Self, arg_column: i32) !godot.Color {
        if (mbind_get_custom_bg_color == null) {
            mbind_get_custom_bg_color = try api.createMethod("TreeItem", "get_custom_bg_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_custom_bg_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getCustomColor(self: *const Self, arg_column: i32) !godot.Color {
        if (mbind_get_custom_color == null) {
            mbind_get_custom_color = try api.createMethod("TreeItem", "get_custom_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_custom_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getCustomMinimumHeight(self: *const Self) !i32 {
        if (mbind_get_custom_minimum_height == null) {
            mbind_get_custom_minimum_height = try api.createMethod("TreeItem", "get_custom_minimum_height");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_custom_minimum_height, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getExpandRight(self: *const Self, arg_column: i32) !bool {
        if (mbind_get_expand_right == null) {
            mbind_get_expand_right = try api.createMethod("TreeItem", "get_expand_right");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_expand_right, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getIcon(self: *const Self, arg_column: i32) !godot.Texture {
        if (mbind_get_icon == null) {
            mbind_get_icon = try api.createMethod("TreeItem", "get_icon");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_icon, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getIconMaxWidth(self: *const Self, arg_column: i32) !i32 {
        if (mbind_get_icon_max_width == null) {
            mbind_get_icon_max_width = try api.createMethod("TreeItem", "get_icon_max_width");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_icon_max_width, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getIconModulate(self: *const Self, arg_column: i32) !godot.Color {
        if (mbind_get_icon_modulate == null) {
            mbind_get_icon_modulate = try api.createMethod("TreeItem", "get_icon_modulate");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_icon_modulate, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getIconRegion(self: *const Self, arg_column: i32) !godot.Rect2 {
        if (mbind_get_icon_region == null) {
            mbind_get_icon_region = try api.createMethod("TreeItem", "get_icon_region");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_icon_region, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn getMetadata(self: *const Self, arg_column: i32) !godot.Variant {
        if (mbind_get_metadata == null) {
            mbind_get_metadata = try api.createMethod("TreeItem", "get_metadata");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_metadata, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getNext(self: *const Self) !godot.TreeItem {
        if (mbind_get_next == null) {
            mbind_get_next = try api.createMethod("TreeItem", "get_next");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_next, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getNextVisible(self: *const Self, arg_wrap: bool) !godot.TreeItem {
        if (mbind_get_next_visible == null) {
            mbind_get_next_visible = try api.createMethod("TreeItem", "get_next_visible");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_wrap),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_next_visible, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getParent(self: *const Self) !godot.TreeItem {
        if (mbind_get_parent == null) {
            mbind_get_parent = try api.createMethod("TreeItem", "get_parent");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_parent, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getPrev(self: *const Self) !godot.TreeItem {
        if (mbind_get_prev == null) {
            mbind_get_prev = try api.createMethod("TreeItem", "get_prev");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_prev, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getPrevVisible(self: *const Self, arg_wrap: bool) !godot.TreeItem {
        if (mbind_get_prev_visible == null) {
            mbind_get_prev_visible = try api.createMethod("TreeItem", "get_prev_visible");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_wrap),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_prev_visible, base, cargs, result);
        return @ptrCast(*godot.TreeItem, @alignCast(@alignOf(&godot.TreeItem), result)).*;
    }

    pub fn getRange(self: *const Self, arg_column: i32) !f32 {
        if (mbind_get_range == null) {
            mbind_get_range = try api.createMethod("TreeItem", "get_range");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_range, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRangeConfig(self: *const Self, arg_column: i32) !godot.Dictionary {
        if (mbind_get_range_config == null) {
            mbind_get_range_config = try api.createMethod("TreeItem", "get_range_config");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_range_config, base, cargs, result);
        return @ptrCast(*godot.Dictionary, @alignCast(@alignOf(&godot.Dictionary), result)).*;
    }

    pub fn getSuffix(self: *const Self, arg_column: i32) !godot.String {
        if (mbind_get_suffix == null) {
            mbind_get_suffix = try api.createMethod("TreeItem", "get_suffix");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_suffix, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getText(self: *const Self, arg_column: i32) !godot.String {
        if (mbind_get_text == null) {
            mbind_get_text = try api.createMethod("TreeItem", "get_text");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_text, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getTextAlign(self: *const Self, arg_column: i32) !i32 {
        if (mbind_get_text_align == null) {
            mbind_get_text_align = try api.createMethod("TreeItem", "get_text_align");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_text_align, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTooltip(self: *const Self, arg_column: i32) !godot.String {
        if (mbind_get_tooltip == null) {
            mbind_get_tooltip = try api.createMethod("TreeItem", "get_tooltip");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_tooltip, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn isButtonDisabled(self: *const Self, arg_column: i32, arg_button_idx: i32) !bool {
        if (mbind_is_button_disabled == null) {
            mbind_is_button_disabled = try api.createMethod("TreeItem", "is_button_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_button_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_button_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isChecked(self: *const Self, arg_column: i32) !bool {
        if (mbind_is_checked == null) {
            mbind_is_checked = try api.createMethod("TreeItem", "is_checked");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_checked, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isCollapsed(self: *const Self) !bool {
        if (mbind_is_collapsed == null) {
            mbind_is_collapsed = try api.createMethod("TreeItem", "is_collapsed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_collapsed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isCustomSetAsButton(self: *const Self, arg_column: i32) !bool {
        if (mbind_is_custom_set_as_button == null) {
            mbind_is_custom_set_as_button = try api.createMethod("TreeItem", "is_custom_set_as_button");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_custom_set_as_button, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isEditable(self: *const Self, arg_column: i32) !bool {
        if (mbind_is_editable == null) {
            mbind_is_editable = try api.createMethod("TreeItem", "is_editable");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_editable, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFoldingDisabled(self: *const Self) !bool {
        if (mbind_is_folding_disabled == null) {
            mbind_is_folding_disabled = try api.createMethod("TreeItem", "is_folding_disabled");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_folding_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isSelectable(self: *const Self, arg_column: i32) !bool {
        if (mbind_is_selectable == null) {
            mbind_is_selectable = try api.createMethod("TreeItem", "is_selectable");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_selectable, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isSelected(self: *const Self, arg_column: i32) !bool {
        if (mbind_is_selected == null) {
            mbind_is_selected = try api.createMethod("TreeItem", "is_selected");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_selected, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn moveToBottom(self: *const Self) !void {
        if (mbind_move_to_bottom == null) {
            mbind_move_to_bottom = try api.createMethod("TreeItem", "move_to_bottom");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_move_to_bottom, base, cargs, result);
    }

    pub fn moveToTop(self: *const Self) !void {
        if (mbind_move_to_top == null) {
            mbind_move_to_top = try api.createMethod("TreeItem", "move_to_top");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_move_to_top, base, cargs, result);
    }

    pub fn removeChild(self: *const Self, arg_child: *const godot.Object) !void {
        if (mbind_remove_child == null) {
            mbind_remove_child = try api.createMethod("TreeItem", "remove_child");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_child),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_child, base, cargs, result);
    }

    pub fn select(self: *const Self, arg_column: i32) !void {
        if (mbind_select == null) {
            mbind_select = try api.createMethod("TreeItem", "select");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_select, base, cargs, result);
    }

    pub fn setButton(self: *const Self, arg_column: i32, arg_button_idx: i32, arg_button: *const godot.Texture) !void {
        if (mbind_set_button == null) {
            mbind_set_button = try api.createMethod("TreeItem", "set_button");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_button_idx),
            @ptrCast(*const anyopaque, arg_button),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_button, base, cargs, result);
    }

    pub fn setButtonDisabled(self: *const Self, arg_column: i32, arg_button_idx: i32, arg_disabled: bool) !void {
        if (mbind_set_button_disabled == null) {
            mbind_set_button_disabled = try api.createMethod("TreeItem", "set_button_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_button_idx),
            @ptrCast(*const anyopaque, *arg_disabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_button_disabled, base, cargs, result);
    }

    pub fn setCellMode(self: *const Self, arg_column: i32, arg_mode: i32) !void {
        if (mbind_set_cell_mode == null) {
            mbind_set_cell_mode = try api.createMethod("TreeItem", "set_cell_mode");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_cell_mode, base, cargs, result);
    }

    pub fn setChecked(self: *const Self, arg_column: i32, arg_checked: bool) !void {
        if (mbind_set_checked == null) {
            mbind_set_checked = try api.createMethod("TreeItem", "set_checked");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_checked),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_checked, base, cargs, result);
    }

    pub fn setCollapsed(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_collapsed == null) {
            mbind_set_collapsed = try api.createMethod("TreeItem", "set_collapsed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_collapsed, base, cargs, result);
    }

    pub fn setCustomAsButton(self: *const Self, arg_column: i32, arg_enable: bool) !void {
        if (mbind_set_custom_as_button == null) {
            mbind_set_custom_as_button = try api.createMethod("TreeItem", "set_custom_as_button");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_as_button, base, cargs, result);
    }

    pub fn setCustomBgColor(self: *const Self, arg_column: i32, arg_color: *const godot.Color, arg_just_outline: bool) !void {
        if (mbind_set_custom_bg_color == null) {
            mbind_set_custom_bg_color = try api.createMethod("TreeItem", "set_custom_bg_color");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_color),
            @ptrCast(*const anyopaque, *arg_just_outline),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_bg_color, base, cargs, result);
    }

    pub fn setCustomColor(self: *const Self, arg_column: i32, arg_color: *const godot.Color) !void {
        if (mbind_set_custom_color == null) {
            mbind_set_custom_color = try api.createMethod("TreeItem", "set_custom_color");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_color, base, cargs, result);
    }

    pub fn setCustomDraw(self: *const Self, arg_column: i32, arg_object: *const godot.Object, arg_callback: *const godot.String) !void {
        if (mbind_set_custom_draw == null) {
            mbind_set_custom_draw = try api.createMethod("TreeItem", "set_custom_draw");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_object),
            @ptrCast(*const anyopaque, arg_callback),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_draw, base, cargs, result);
    }

    pub fn setCustomMinimumHeight(self: *const Self, arg_height: i32) !void {
        if (mbind_set_custom_minimum_height == null) {
            mbind_set_custom_minimum_height = try api.createMethod("TreeItem", "set_custom_minimum_height");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_height),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_minimum_height, base, cargs, result);
    }

    pub fn setDisableFolding(self: *const Self, arg_disable: bool) !void {
        if (mbind_set_disable_folding == null) {
            mbind_set_disable_folding = try api.createMethod("TreeItem", "set_disable_folding");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_disable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disable_folding, base, cargs, result);
    }

    pub fn setEditable(self: *const Self, arg_column: i32, arg_enabled: bool) !void {
        if (mbind_set_editable == null) {
            mbind_set_editable = try api.createMethod("TreeItem", "set_editable");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_enabled),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_editable, base, cargs, result);
    }

    pub fn setExpandRight(self: *const Self, arg_column: i32, arg_enable: bool) !void {
        if (mbind_set_expand_right == null) {
            mbind_set_expand_right = try api.createMethod("TreeItem", "set_expand_right");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_expand_right, base, cargs, result);
    }

    pub fn setIcon(self: *const Self, arg_column: i32, arg_texture: *const godot.Texture) !void {
        if (mbind_set_icon == null) {
            mbind_set_icon = try api.createMethod("TreeItem", "set_icon");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_icon, base, cargs, result);
    }

    pub fn setIconMaxWidth(self: *const Self, arg_column: i32, arg_width: i32) !void {
        if (mbind_set_icon_max_width == null) {
            mbind_set_icon_max_width = try api.createMethod("TreeItem", "set_icon_max_width");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_width),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_icon_max_width, base, cargs, result);
    }

    pub fn setIconModulate(self: *const Self, arg_column: i32, arg_modulate: *const godot.Color) !void {
        if (mbind_set_icon_modulate == null) {
            mbind_set_icon_modulate = try api.createMethod("TreeItem", "set_icon_modulate");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_modulate),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_icon_modulate, base, cargs, result);
    }

    pub fn setIconRegion(self: *const Self, arg_column: i32, arg_region: *const godot.Rect2) !void {
        if (mbind_set_icon_region == null) {
            mbind_set_icon_region = try api.createMethod("TreeItem", "set_icon_region");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_region),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_icon_region, base, cargs, result);
    }

    pub fn setMetadata(self: *const Self, arg_column: i32, arg_meta: *const godot.Variant) !void {
        if (mbind_set_metadata == null) {
            mbind_set_metadata = try api.createMethod("TreeItem", "set_metadata");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_meta),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_metadata, base, cargs, result);
    }

    pub fn setRange(self: *const Self, arg_column: i32, arg_value: f32) !void {
        if (mbind_set_range == null) {
            mbind_set_range = try api.createMethod("TreeItem", "set_range");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_range, base, cargs, result);
    }

    pub fn setRangeConfig(self: *const Self, arg_column: i32, arg_min: f32, arg_max: f32, arg_step: f32, arg_expr: bool) !void {
        if (mbind_set_range_config == null) {
            mbind_set_range_config = try api.createMethod("TreeItem", "set_range_config");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_min),
            @ptrCast(*const anyopaque, *arg_max),
            @ptrCast(*const anyopaque, *arg_step),
            @ptrCast(*const anyopaque, *arg_expr),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_range_config, base, cargs, result);
    }

    pub fn setSelectable(self: *const Self, arg_column: i32, arg_selectable: bool) !void {
        if (mbind_set_selectable == null) {
            mbind_set_selectable = try api.createMethod("TreeItem", "set_selectable");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_selectable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_selectable, base, cargs, result);
    }

    pub fn setSuffix(self: *const Self, arg_column: i32, arg_text: *const godot.String) !void {
        if (mbind_set_suffix == null) {
            mbind_set_suffix = try api.createMethod("TreeItem", "set_suffix");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_text),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_suffix, base, cargs, result);
    }

    pub fn setText(self: *const Self, arg_column: i32, arg_text: *const godot.String) !void {
        if (mbind_set_text == null) {
            mbind_set_text = try api.createMethod("TreeItem", "set_text");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_text),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_text, base, cargs, result);
    }

    pub fn setTextAlign(self: *const Self, arg_column: i32, arg_text_align: i32) !void {
        if (mbind_set_text_align == null) {
            mbind_set_text_align = try api.createMethod("TreeItem", "set_text_align");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, *arg_text_align),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_text_align, base, cargs, result);
    }

    pub fn setTooltip(self: *const Self, arg_column: i32, arg_tooltip: *const godot.String) !void {
        if (mbind_set_tooltip == null) {
            mbind_set_tooltip = try api.createMethod("TreeItem", "set_tooltip");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_column),
            @ptrCast(*const anyopaque, arg_tooltip),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_tooltip, base, cargs, result);
    }
};