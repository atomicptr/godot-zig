// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Sky = @import("sky.zig").Sky;

// method bindings
var mbind_get_ground_bottom_color: ?*c_api.godot_method_bind = null;
var mbind_get_ground_curve: ?*c_api.godot_method_bind = null;
var mbind_get_ground_energy: ?*c_api.godot_method_bind = null;
var mbind_get_ground_horizon_color: ?*c_api.godot_method_bind = null;
var mbind_get_sky_curve: ?*c_api.godot_method_bind = null;
var mbind_get_sky_energy: ?*c_api.godot_method_bind = null;
var mbind_get_sky_horizon_color: ?*c_api.godot_method_bind = null;
var mbind_get_sky_top_color: ?*c_api.godot_method_bind = null;
var mbind_get_sun_angle_max: ?*c_api.godot_method_bind = null;
var mbind_get_sun_angle_min: ?*c_api.godot_method_bind = null;
var mbind_get_sun_color: ?*c_api.godot_method_bind = null;
var mbind_get_sun_curve: ?*c_api.godot_method_bind = null;
var mbind_get_sun_energy: ?*c_api.godot_method_bind = null;
var mbind_get_sun_latitude: ?*c_api.godot_method_bind = null;
var mbind_get_sun_longitude: ?*c_api.godot_method_bind = null;
var mbind_get_texture_size: ?*c_api.godot_method_bind = null;
var mbind_set_ground_bottom_color: ?*c_api.godot_method_bind = null;
var mbind_set_ground_curve: ?*c_api.godot_method_bind = null;
var mbind_set_ground_energy: ?*c_api.godot_method_bind = null;
var mbind_set_ground_horizon_color: ?*c_api.godot_method_bind = null;
var mbind_set_sky_curve: ?*c_api.godot_method_bind = null;
var mbind_set_sky_energy: ?*c_api.godot_method_bind = null;
var mbind_set_sky_horizon_color: ?*c_api.godot_method_bind = null;
var mbind_set_sky_top_color: ?*c_api.godot_method_bind = null;
var mbind_set_sun_angle_max: ?*c_api.godot_method_bind = null;
var mbind_set_sun_angle_min: ?*c_api.godot_method_bind = null;
var mbind_set_sun_color: ?*c_api.godot_method_bind = null;
var mbind_set_sun_curve: ?*c_api.godot_method_bind = null;
var mbind_set_sun_energy: ?*c_api.godot_method_bind = null;
var mbind_set_sun_latitude: ?*c_api.godot_method_bind = null;
var mbind_set_sun_longitude: ?*c_api.godot_method_bind = null;
var mbind_set_texture_size: ?*c_api.godot_method_bind = null;
var mbind_procedural_sky_constructor: ?fn () ?*c_api.godot_object = null;

pub const ProceduralSky = struct {
    const Self = @This();
    const BaseClass = Sky;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_procedural_sky_constructor == null) {
            mbind_procedural_sky_constructor = try api.createConstructor("ProceduralSky");
        }
        return api.createObject(Self, mbind_procedural_sky_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getGroundBottomColor(self: *const Self) !godot.Color {
        if (mbind_get_ground_bottom_color == null) {
            mbind_get_ground_bottom_color = try api.createMethod("ProceduralSky", "get_ground_bottom_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ground_bottom_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getGroundCurve(self: *const Self) !f32 {
        if (mbind_get_ground_curve == null) {
            mbind_get_ground_curve = try api.createMethod("ProceduralSky", "get_ground_curve");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ground_curve, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGroundEnergy(self: *const Self) !f32 {
        if (mbind_get_ground_energy == null) {
            mbind_get_ground_energy = try api.createMethod("ProceduralSky", "get_ground_energy");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ground_energy, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGroundHorizonColor(self: *const Self) !godot.Color {
        if (mbind_get_ground_horizon_color == null) {
            mbind_get_ground_horizon_color = try api.createMethod("ProceduralSky", "get_ground_horizon_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ground_horizon_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getSkyCurve(self: *const Self) !f32 {
        if (mbind_get_sky_curve == null) {
            mbind_get_sky_curve = try api.createMethod("ProceduralSky", "get_sky_curve");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sky_curve, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSkyEnergy(self: *const Self) !f32 {
        if (mbind_get_sky_energy == null) {
            mbind_get_sky_energy = try api.createMethod("ProceduralSky", "get_sky_energy");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sky_energy, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSkyHorizonColor(self: *const Self) !godot.Color {
        if (mbind_get_sky_horizon_color == null) {
            mbind_get_sky_horizon_color = try api.createMethod("ProceduralSky", "get_sky_horizon_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sky_horizon_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getSkyTopColor(self: *const Self) !godot.Color {
        if (mbind_get_sky_top_color == null) {
            mbind_get_sky_top_color = try api.createMethod("ProceduralSky", "get_sky_top_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sky_top_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getSunAngleMax(self: *const Self) !f32 {
        if (mbind_get_sun_angle_max == null) {
            mbind_get_sun_angle_max = try api.createMethod("ProceduralSky", "get_sun_angle_max");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sun_angle_max, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSunAngleMin(self: *const Self) !f32 {
        if (mbind_get_sun_angle_min == null) {
            mbind_get_sun_angle_min = try api.createMethod("ProceduralSky", "get_sun_angle_min");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sun_angle_min, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSunColor(self: *const Self) !godot.Color {
        if (mbind_get_sun_color == null) {
            mbind_get_sun_color = try api.createMethod("ProceduralSky", "get_sun_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sun_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getSunCurve(self: *const Self) !f32 {
        if (mbind_get_sun_curve == null) {
            mbind_get_sun_curve = try api.createMethod("ProceduralSky", "get_sun_curve");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sun_curve, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSunEnergy(self: *const Self) !f32 {
        if (mbind_get_sun_energy == null) {
            mbind_get_sun_energy = try api.createMethod("ProceduralSky", "get_sun_energy");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sun_energy, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSunLatitude(self: *const Self) !f32 {
        if (mbind_get_sun_latitude == null) {
            mbind_get_sun_latitude = try api.createMethod("ProceduralSky", "get_sun_latitude");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sun_latitude, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSunLongitude(self: *const Self) !f32 {
        if (mbind_get_sun_longitude == null) {
            mbind_get_sun_longitude = try api.createMethod("ProceduralSky", "get_sun_longitude");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sun_longitude, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTextureSize(self: *const Self) !i32 {
        if (mbind_get_texture_size == null) {
            mbind_get_texture_size = try api.createMethod("ProceduralSky", "get_texture_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_texture_size, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setGroundBottomColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_ground_bottom_color == null) {
            mbind_set_ground_bottom_color = try api.createMethod("ProceduralSky", "set_ground_bottom_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ground_bottom_color, base, cargs, result);
    }

    pub fn setGroundCurve(self: *const Self, arg_curve: f32) !void {
        if (mbind_set_ground_curve == null) {
            mbind_set_ground_curve = try api.createMethod("ProceduralSky", "set_ground_curve");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_curve),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ground_curve, base, cargs, result);
    }

    pub fn setGroundEnergy(self: *const Self, arg_energy: f32) !void {
        if (mbind_set_ground_energy == null) {
            mbind_set_ground_energy = try api.createMethod("ProceduralSky", "set_ground_energy");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_energy),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ground_energy, base, cargs, result);
    }

    pub fn setGroundHorizonColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_ground_horizon_color == null) {
            mbind_set_ground_horizon_color = try api.createMethod("ProceduralSky", "set_ground_horizon_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ground_horizon_color, base, cargs, result);
    }

    pub fn setSkyCurve(self: *const Self, arg_curve: f32) !void {
        if (mbind_set_sky_curve == null) {
            mbind_set_sky_curve = try api.createMethod("ProceduralSky", "set_sky_curve");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_curve),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sky_curve, base, cargs, result);
    }

    pub fn setSkyEnergy(self: *const Self, arg_energy: f32) !void {
        if (mbind_set_sky_energy == null) {
            mbind_set_sky_energy = try api.createMethod("ProceduralSky", "set_sky_energy");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_energy),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sky_energy, base, cargs, result);
    }

    pub fn setSkyHorizonColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_sky_horizon_color == null) {
            mbind_set_sky_horizon_color = try api.createMethod("ProceduralSky", "set_sky_horizon_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sky_horizon_color, base, cargs, result);
    }

    pub fn setSkyTopColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_sky_top_color == null) {
            mbind_set_sky_top_color = try api.createMethod("ProceduralSky", "set_sky_top_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sky_top_color, base, cargs, result);
    }

    pub fn setSunAngleMax(self: *const Self, arg_degrees: f32) !void {
        if (mbind_set_sun_angle_max == null) {
            mbind_set_sun_angle_max = try api.createMethod("ProceduralSky", "set_sun_angle_max");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sun_angle_max, base, cargs, result);
    }

    pub fn setSunAngleMin(self: *const Self, arg_degrees: f32) !void {
        if (mbind_set_sun_angle_min == null) {
            mbind_set_sun_angle_min = try api.createMethod("ProceduralSky", "set_sun_angle_min");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sun_angle_min, base, cargs, result);
    }

    pub fn setSunColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_sun_color == null) {
            mbind_set_sun_color = try api.createMethod("ProceduralSky", "set_sun_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sun_color, base, cargs, result);
    }

    pub fn setSunCurve(self: *const Self, arg_curve: f32) !void {
        if (mbind_set_sun_curve == null) {
            mbind_set_sun_curve = try api.createMethod("ProceduralSky", "set_sun_curve");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_curve),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sun_curve, base, cargs, result);
    }

    pub fn setSunEnergy(self: *const Self, arg_energy: f32) !void {
        if (mbind_set_sun_energy == null) {
            mbind_set_sun_energy = try api.createMethod("ProceduralSky", "set_sun_energy");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_energy),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sun_energy, base, cargs, result);
    }

    pub fn setSunLatitude(self: *const Self, arg_degrees: f32) !void {
        if (mbind_set_sun_latitude == null) {
            mbind_set_sun_latitude = try api.createMethod("ProceduralSky", "set_sun_latitude");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sun_latitude, base, cargs, result);
    }

    pub fn setSunLongitude(self: *const Self, arg_degrees: f32) !void {
        if (mbind_set_sun_longitude == null) {
            mbind_set_sun_longitude = try api.createMethod("ProceduralSky", "set_sun_longitude");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sun_longitude, base, cargs, result);
    }

    pub fn setTextureSize(self: *const Self, arg_size: i32) !void {
        if (mbind_set_texture_size == null) {
            mbind_set_texture_size = try api.createMethod("ProceduralSky", "set_texture_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_texture_size, base, cargs, result);
    }
};