// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node2D = @import("node_2d.zig").Node2D;

// method bindings
var mbind_capture_rect: ?*c_api.godot_method_bind = null;
var mbind_get_amount: ?*c_api.godot_method_bind = null;
var mbind_get_draw_order: ?*c_api.godot_method_bind = null;
var mbind_get_explosiveness_ratio: ?*c_api.godot_method_bind = null;
var mbind_get_fixed_fps: ?*c_api.godot_method_bind = null;
var mbind_get_fractional_delta: ?*c_api.godot_method_bind = null;
var mbind_get_lifetime: ?*c_api.godot_method_bind = null;
var mbind_get_normal_map: ?*c_api.godot_method_bind = null;
var mbind_get_one_shot: ?*c_api.godot_method_bind = null;
var mbind_get_pre_process_time: ?*c_api.godot_method_bind = null;
var mbind_get_process_material: ?*c_api.godot_method_bind = null;
var mbind_get_randomness_ratio: ?*c_api.godot_method_bind = null;
var mbind_get_speed_scale: ?*c_api.godot_method_bind = null;
var mbind_get_texture: ?*c_api.godot_method_bind = null;
var mbind_get_use_local_coordinates: ?*c_api.godot_method_bind = null;
var mbind_get_visibility_rect: ?*c_api.godot_method_bind = null;
var mbind_is_emitting: ?*c_api.godot_method_bind = null;
var mbind_restart: ?*c_api.godot_method_bind = null;
var mbind_set_amount: ?*c_api.godot_method_bind = null;
var mbind_set_draw_order: ?*c_api.godot_method_bind = null;
var mbind_set_emitting: ?*c_api.godot_method_bind = null;
var mbind_set_explosiveness_ratio: ?*c_api.godot_method_bind = null;
var mbind_set_fixed_fps: ?*c_api.godot_method_bind = null;
var mbind_set_fractional_delta: ?*c_api.godot_method_bind = null;
var mbind_set_lifetime: ?*c_api.godot_method_bind = null;
var mbind_set_normal_map: ?*c_api.godot_method_bind = null;
var mbind_set_one_shot: ?*c_api.godot_method_bind = null;
var mbind_set_pre_process_time: ?*c_api.godot_method_bind = null;
var mbind_set_process_material: ?*c_api.godot_method_bind = null;
var mbind_set_randomness_ratio: ?*c_api.godot_method_bind = null;
var mbind_set_speed_scale: ?*c_api.godot_method_bind = null;
var mbind_set_texture: ?*c_api.godot_method_bind = null;
var mbind_set_use_local_coordinates: ?*c_api.godot_method_bind = null;
var mbind_set_visibility_rect: ?*c_api.godot_method_bind = null;
var mbind_particles_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const Particles2D = struct {
    const Self = @This();
    const BaseClass = Node2D;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_particles_2d_constructor == null) {
            mbind_particles_2d_constructor = try api.createConstructor("Particles2D");
        }
        return api.createObject(Self, mbind_particles_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn captureRect(self: *const Self) !godot.Rect2 {
        if (mbind_capture_rect == null) {
            mbind_capture_rect = try api.createMethod("Particles2D", "capture_rect");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_capture_rect, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn getAmount(self: *const Self) !i32 {
        if (mbind_get_amount == null) {
            mbind_get_amount = try api.createMethod("Particles2D", "get_amount");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_amount, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDrawOrder(self: *const Self) !i32 {
        if (mbind_get_draw_order == null) {
            mbind_get_draw_order = try api.createMethod("Particles2D", "get_draw_order");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_draw_order, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getExplosivenessRatio(self: *const Self) !f32 {
        if (mbind_get_explosiveness_ratio == null) {
            mbind_get_explosiveness_ratio = try api.createMethod("Particles2D", "get_explosiveness_ratio");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_explosiveness_ratio, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFixedFps(self: *const Self) !i32 {
        if (mbind_get_fixed_fps == null) {
            mbind_get_fixed_fps = try api.createMethod("Particles2D", "get_fixed_fps");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fixed_fps, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFractionalDelta(self: *const Self) !bool {
        if (mbind_get_fractional_delta == null) {
            mbind_get_fractional_delta = try api.createMethod("Particles2D", "get_fractional_delta");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fractional_delta, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getLifetime(self: *const Self) !f32 {
        if (mbind_get_lifetime == null) {
            mbind_get_lifetime = try api.createMethod("Particles2D", "get_lifetime");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_lifetime, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getNormalMap(self: *const Self) !godot.Texture {
        if (mbind_get_normal_map == null) {
            mbind_get_normal_map = try api.createMethod("Particles2D", "get_normal_map");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_normal_map, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getOneShot(self: *const Self) !bool {
        if (mbind_get_one_shot == null) {
            mbind_get_one_shot = try api.createMethod("Particles2D", "get_one_shot");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_one_shot, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getPreProcessTime(self: *const Self) !f32 {
        if (mbind_get_pre_process_time == null) {
            mbind_get_pre_process_time = try api.createMethod("Particles2D", "get_pre_process_time");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pre_process_time, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getProcessMaterial(self: *const Self) !godot.Material {
        if (mbind_get_process_material == null) {
            mbind_get_process_material = try api.createMethod("Particles2D", "get_process_material");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_process_material, base, cargs, result);
        return @ptrCast(*godot.Material, @alignCast(@alignOf(&godot.Material), result)).*;
    }

    pub fn getRandomnessRatio(self: *const Self) !f32 {
        if (mbind_get_randomness_ratio == null) {
            mbind_get_randomness_ratio = try api.createMethod("Particles2D", "get_randomness_ratio");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_randomness_ratio, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSpeedScale(self: *const Self) !f32 {
        if (mbind_get_speed_scale == null) {
            mbind_get_speed_scale = try api.createMethod("Particles2D", "get_speed_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_speed_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTexture(self: *const Self) !godot.Texture {
        if (mbind_get_texture == null) {
            mbind_get_texture = try api.createMethod("Particles2D", "get_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getUseLocalCoordinates(self: *const Self) !bool {
        if (mbind_get_use_local_coordinates == null) {
            mbind_get_use_local_coordinates = try api.createMethod("Particles2D", "get_use_local_coordinates");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_use_local_coordinates, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getVisibilityRect(self: *const Self) !godot.Rect2 {
        if (mbind_get_visibility_rect == null) {
            mbind_get_visibility_rect = try api.createMethod("Particles2D", "get_visibility_rect");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_visibility_rect, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn isEmitting(self: *const Self) !bool {
        if (mbind_is_emitting == null) {
            mbind_is_emitting = try api.createMethod("Particles2D", "is_emitting");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_emitting, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn restart(self: *const Self) !void {
        if (mbind_restart == null) {
            mbind_restart = try api.createMethod("Particles2D", "restart");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_restart, base, cargs, result);
    }

    pub fn setAmount(self: *const Self, arg_amount: i32) !void {
        if (mbind_set_amount == null) {
            mbind_set_amount = try api.createMethod("Particles2D", "set_amount");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_amount, base, cargs, result);
    }

    pub fn setDrawOrder(self: *const Self, arg_order: i32) !void {
        if (mbind_set_draw_order == null) {
            mbind_set_draw_order = try api.createMethod("Particles2D", "set_draw_order");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_order),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_draw_order, base, cargs, result);
    }

    pub fn setEmitting(self: *const Self, arg_emitting: bool) !void {
        if (mbind_set_emitting == null) {
            mbind_set_emitting = try api.createMethod("Particles2D", "set_emitting");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_emitting),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emitting, base, cargs, result);
    }

    pub fn setExplosivenessRatio(self: *const Self, arg_ratio: f32) !void {
        if (mbind_set_explosiveness_ratio == null) {
            mbind_set_explosiveness_ratio = try api.createMethod("Particles2D", "set_explosiveness_ratio");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_ratio),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_explosiveness_ratio, base, cargs, result);
    }

    pub fn setFixedFps(self: *const Self, arg_fps: i32) !void {
        if (mbind_set_fixed_fps == null) {
            mbind_set_fixed_fps = try api.createMethod("Particles2D", "set_fixed_fps");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_fps),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fixed_fps, base, cargs, result);
    }

    pub fn setFractionalDelta(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_fractional_delta == null) {
            mbind_set_fractional_delta = try api.createMethod("Particles2D", "set_fractional_delta");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fractional_delta, base, cargs, result);
    }

    pub fn setLifetime(self: *const Self, arg_secs: f32) !void {
        if (mbind_set_lifetime == null) {
            mbind_set_lifetime = try api.createMethod("Particles2D", "set_lifetime");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_secs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_lifetime, base, cargs, result);
    }

    pub fn setNormalMap(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_normal_map == null) {
            mbind_set_normal_map = try api.createMethod("Particles2D", "set_normal_map");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_normal_map, base, cargs, result);
    }

    pub fn setOneShot(self: *const Self, arg_secs: bool) !void {
        if (mbind_set_one_shot == null) {
            mbind_set_one_shot = try api.createMethod("Particles2D", "set_one_shot");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_secs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_one_shot, base, cargs, result);
    }

    pub fn setPreProcessTime(self: *const Self, arg_secs: f32) !void {
        if (mbind_set_pre_process_time == null) {
            mbind_set_pre_process_time = try api.createMethod("Particles2D", "set_pre_process_time");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_secs),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_pre_process_time, base, cargs, result);
    }

    pub fn setProcessMaterial(self: *const Self, arg_material: *const godot.Material) !void {
        if (mbind_set_process_material == null) {
            mbind_set_process_material = try api.createMethod("Particles2D", "set_process_material");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_material),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_process_material, base, cargs, result);
    }

    pub fn setRandomnessRatio(self: *const Self, arg_ratio: f32) !void {
        if (mbind_set_randomness_ratio == null) {
            mbind_set_randomness_ratio = try api.createMethod("Particles2D", "set_randomness_ratio");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_ratio),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_randomness_ratio, base, cargs, result);
    }

    pub fn setSpeedScale(self: *const Self, arg_scale: f32) !void {
        if (mbind_set_speed_scale == null) {
            mbind_set_speed_scale = try api.createMethod("Particles2D", "set_speed_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_speed_scale, base, cargs, result);
    }

    pub fn setTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_texture == null) {
            mbind_set_texture = try api.createMethod("Particles2D", "set_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_texture, base, cargs, result);
    }

    pub fn setUseLocalCoordinates(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_use_local_coordinates == null) {
            mbind_set_use_local_coordinates = try api.createMethod("Particles2D", "set_use_local_coordinates");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_use_local_coordinates, base, cargs, result);
    }

    pub fn setVisibilityRect(self: *const Self, arg_visibility_rect: *const godot.Rect2) !void {
        if (mbind_set_visibility_rect == null) {
            mbind_set_visibility_rect = try api.createMethod("Particles2D", "set_visibility_rect");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_visibility_rect),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_visibility_rect, base, cargs, result);
    }
};