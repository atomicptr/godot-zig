// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Object = @import("object.zig").Object;

// method bindings
var mbind_add_custom_node: ?*c_api.godot_method_bind = null;
var mbind_remove_custom_node: ?*c_api.godot_method_bind = null;
var mbind__visual_script_editor_constructor: ?fn () ?*c_api.godot_object = null;

pub const _VisualScriptEditor = struct {
    const Self = @This();
    const BaseClass = Object;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind__visual_script_editor_constructor == null) {
            mbind__visual_script_editor_constructor = try api.createConstructor("_VisualScriptEditor");
        }
        return api.createObject(Self, mbind__visual_script_editor_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addCustomNode(self: *const Self, arg_name: *const godot.String, arg_category: *const godot.String, arg_script: *const godot.Script) !void {
        if (mbind_add_custom_node == null) {
            mbind_add_custom_node = try api.createMethod("_VisualScriptEditor", "add_custom_node");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_category),
            @ptrCast(*const anyopaque, arg_script),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_custom_node, base, cargs, result);
    }

    pub fn removeCustomNode(self: *const Self, arg_name: *const godot.String, arg_category: *const godot.String) !void {
        if (mbind_remove_custom_node == null) {
            mbind_remove_custom_node = try api.createMethod("_VisualScriptEditor", "remove_custom_node");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_category),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_custom_node, base, cargs, result);
    }
};