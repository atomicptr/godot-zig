// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Material = @import("material.zig").Material;

// method bindings
var mbind_get_blend_mode: ?*c_api.godot_method_bind = null;
var mbind_get_light_mode: ?*c_api.godot_method_bind = null;
var mbind_get_particles_anim_h_frames: ?*c_api.godot_method_bind = null;
var mbind_get_particles_anim_loop: ?*c_api.godot_method_bind = null;
var mbind_get_particles_anim_v_frames: ?*c_api.godot_method_bind = null;
var mbind_get_particles_animation: ?*c_api.godot_method_bind = null;
var mbind_set_blend_mode: ?*c_api.godot_method_bind = null;
var mbind_set_light_mode: ?*c_api.godot_method_bind = null;
var mbind_set_particles_anim_h_frames: ?*c_api.godot_method_bind = null;
var mbind_set_particles_anim_loop: ?*c_api.godot_method_bind = null;
var mbind_set_particles_anim_v_frames: ?*c_api.godot_method_bind = null;
var mbind_set_particles_animation: ?*c_api.godot_method_bind = null;
var mbind_canvas_item_material_constructor: ?fn () ?*c_api.godot_object = null;

pub const CanvasItemMaterial = struct {
    const Self = @This();
    const BaseClass = Material;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_canvas_item_material_constructor == null) {
            mbind_canvas_item_material_constructor = try api.createConstructor("CanvasItemMaterial");
        }
        return api.createObject(Self, mbind_canvas_item_material_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBlendMode(self: *const Self) !i32 {
        if (mbind_get_blend_mode == null) {
            mbind_get_blend_mode = try api.createMethod("CanvasItemMaterial", "get_blend_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_blend_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getLightMode(self: *const Self) !i32 {
        if (mbind_get_light_mode == null) {
            mbind_get_light_mode = try api.createMethod("CanvasItemMaterial", "get_light_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_light_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getParticlesAnimHFrames(self: *const Self) !i32 {
        if (mbind_get_particles_anim_h_frames == null) {
            mbind_get_particles_anim_h_frames = try api.createMethod("CanvasItemMaterial", "get_particles_anim_h_frames");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_particles_anim_h_frames, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getParticlesAnimLoop(self: *const Self) !bool {
        if (mbind_get_particles_anim_loop == null) {
            mbind_get_particles_anim_loop = try api.createMethod("CanvasItemMaterial", "get_particles_anim_loop");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_particles_anim_loop, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getParticlesAnimVFrames(self: *const Self) !i32 {
        if (mbind_get_particles_anim_v_frames == null) {
            mbind_get_particles_anim_v_frames = try api.createMethod("CanvasItemMaterial", "get_particles_anim_v_frames");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_particles_anim_v_frames, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getParticlesAnimation(self: *const Self) !bool {
        if (mbind_get_particles_animation == null) {
            mbind_get_particles_animation = try api.createMethod("CanvasItemMaterial", "get_particles_animation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_particles_animation, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setBlendMode(self: *const Self, arg_blend_mode: i32) !void {
        if (mbind_set_blend_mode == null) {
            mbind_set_blend_mode = try api.createMethod("CanvasItemMaterial", "set_blend_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_blend_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_blend_mode, base, cargs, result);
    }

    pub fn setLightMode(self: *const Self, arg_light_mode: i32) !void {
        if (mbind_set_light_mode == null) {
            mbind_set_light_mode = try api.createMethod("CanvasItemMaterial", "set_light_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_light_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_light_mode, base, cargs, result);
    }

    pub fn setParticlesAnimHFrames(self: *const Self, arg_frames: i32) !void {
        if (mbind_set_particles_anim_h_frames == null) {
            mbind_set_particles_anim_h_frames = try api.createMethod("CanvasItemMaterial", "set_particles_anim_h_frames");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_frames),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_particles_anim_h_frames, base, cargs, result);
    }

    pub fn setParticlesAnimLoop(self: *const Self, arg_loop: bool) !void {
        if (mbind_set_particles_anim_loop == null) {
            mbind_set_particles_anim_loop = try api.createMethod("CanvasItemMaterial", "set_particles_anim_loop");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_loop),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_particles_anim_loop, base, cargs, result);
    }

    pub fn setParticlesAnimVFrames(self: *const Self, arg_frames: i32) !void {
        if (mbind_set_particles_anim_v_frames == null) {
            mbind_set_particles_anim_v_frames = try api.createMethod("CanvasItemMaterial", "set_particles_anim_v_frames");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_frames),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_particles_anim_v_frames, base, cargs, result);
    }

    pub fn setParticlesAnimation(self: *const Self, arg_particles_anim: bool) !void {
        if (mbind_set_particles_animation == null) {
            mbind_set_particles_animation = try api.createMethod("CanvasItemMaterial", "set_particles_animation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_particles_anim),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_particles_animation, base, cargs, result);
    }
};