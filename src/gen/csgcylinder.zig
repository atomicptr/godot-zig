// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const CSGPrimitive = @import("csgprimitive.zig").CSGPrimitive;

// method bindings
var mbind_get_height: ?*c_api.godot_method_bind = null;
var mbind_get_material: ?*c_api.godot_method_bind = null;
var mbind_get_radius: ?*c_api.godot_method_bind = null;
var mbind_get_sides: ?*c_api.godot_method_bind = null;
var mbind_get_smooth_faces: ?*c_api.godot_method_bind = null;
var mbind_is_cone: ?*c_api.godot_method_bind = null;
var mbind_set_cone: ?*c_api.godot_method_bind = null;
var mbind_set_height: ?*c_api.godot_method_bind = null;
var mbind_set_material: ?*c_api.godot_method_bind = null;
var mbind_set_radius: ?*c_api.godot_method_bind = null;
var mbind_set_sides: ?*c_api.godot_method_bind = null;
var mbind_set_smooth_faces: ?*c_api.godot_method_bind = null;
var mbind_csgcylinder_constructor: ?fn () ?*c_api.godot_object = null;

pub const CSGCylinder = struct {
    const Self = @This();
    const BaseClass = CSGPrimitive;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_csgcylinder_constructor == null) {
            mbind_csgcylinder_constructor = try api.createConstructor("CSGCylinder");
        }
        return api.createObject(Self, mbind_csgcylinder_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getHeight(self: *const Self) !f32 {
        if (mbind_get_height == null) {
            mbind_get_height = try api.createMethod("CSGCylinder", "get_height");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_height, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getMaterial(self: *const Self) !godot.Material {
        if (mbind_get_material == null) {
            mbind_get_material = try api.createMethod("CSGCylinder", "get_material");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_material, base, cargs, result);
        return @ptrCast(*godot.Material, @alignCast(@alignOf(&godot.Material), result)).*;
    }

    pub fn getRadius(self: *const Self) !f32 {
        if (mbind_get_radius == null) {
            mbind_get_radius = try api.createMethod("CSGCylinder", "get_radius");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_radius, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSides(self: *const Self) !i32 {
        if (mbind_get_sides == null) {
            mbind_get_sides = try api.createMethod("CSGCylinder", "get_sides");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_sides, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSmoothFaces(self: *const Self) !bool {
        if (mbind_get_smooth_faces == null) {
            mbind_get_smooth_faces = try api.createMethod("CSGCylinder", "get_smooth_faces");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_smooth_faces, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isCone(self: *const Self) !bool {
        if (mbind_is_cone == null) {
            mbind_is_cone = try api.createMethod("CSGCylinder", "is_cone");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_cone, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setCone(self: *const Self, arg_cone: bool) !void {
        if (mbind_set_cone == null) {
            mbind_set_cone = try api.createMethod("CSGCylinder", "set_cone");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_cone),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_cone, base, cargs, result);
    }

    pub fn setHeight(self: *const Self, arg_height: f32) !void {
        if (mbind_set_height == null) {
            mbind_set_height = try api.createMethod("CSGCylinder", "set_height");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_height),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_height, base, cargs, result);
    }

    pub fn setMaterial(self: *const Self, arg_material: *const godot.Material) !void {
        if (mbind_set_material == null) {
            mbind_set_material = try api.createMethod("CSGCylinder", "set_material");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_material),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_material, base, cargs, result);
    }

    pub fn setRadius(self: *const Self, arg_radius: f32) !void {
        if (mbind_set_radius == null) {
            mbind_set_radius = try api.createMethod("CSGCylinder", "set_radius");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radius),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_radius, base, cargs, result);
    }

    pub fn setSides(self: *const Self, arg_sides: i32) !void {
        if (mbind_set_sides == null) {
            mbind_set_sides = try api.createMethod("CSGCylinder", "set_sides");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_sides),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_sides, base, cargs, result);
    }

    pub fn setSmoothFaces(self: *const Self, arg_smooth_faces: bool) !void {
        if (mbind_set_smooth_faces == null) {
            mbind_set_smooth_faces = try api.createMethod("CSGCylinder", "set_smooth_faces");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_smooth_faces),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_smooth_faces, base, cargs, result);
    }
};