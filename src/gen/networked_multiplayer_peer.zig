// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_connection_status: ?*c_api.godot_method_bind = null;
var mbind_get_packet_peer: ?*c_api.godot_method_bind = null;
var mbind_get_transfer_mode: ?*c_api.godot_method_bind = null;
var mbind_get_unique_id: ?*c_api.godot_method_bind = null;
var mbind_is_refusing_new_connections: ?*c_api.godot_method_bind = null;
var mbind_poll: ?*c_api.godot_method_bind = null;
var mbind_set_refuse_new_connections: ?*c_api.godot_method_bind = null;
var mbind_set_target_peer: ?*c_api.godot_method_bind = null;
var mbind_set_transfer_mode: ?*c_api.godot_method_bind = null;
var mbind_networked_multiplayer_peer_constructor: ?fn () ?*c_api.godot_object = null;

pub const NetworkedMultiplayerPeer = struct {
    const Self = @This();
    pub const BaseClass = godot.PacketPeer;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_networked_multiplayer_peer_constructor == null) {
            mbind_networked_multiplayer_peer_constructor = try api.createConstructor("NetworkedMultiplayerPeer");
        }
        return api.createObject(Self, mbind_networked_multiplayer_peer_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getConnectionStatus(self: *const Self) !i32 {
        if (mbind_get_connection_status == null) {
            mbind_get_connection_status = try api.createMethod("NetworkedMultiplayerPeer", "get_connection_status");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connection_status, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPacketPeer(self: *const Self) !i32 {
        if (mbind_get_packet_peer == null) {
            mbind_get_packet_peer = try api.createMethod("NetworkedMultiplayerPeer", "get_packet_peer");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_packet_peer, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTransferMode(self: *const Self) !i32 {
        if (mbind_get_transfer_mode == null) {
            mbind_get_transfer_mode = try api.createMethod("NetworkedMultiplayerPeer", "get_transfer_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_transfer_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getUniqueId(self: *const Self) !i32 {
        if (mbind_get_unique_id == null) {
            mbind_get_unique_id = try api.createMethod("NetworkedMultiplayerPeer", "get_unique_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_unique_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isRefusingNewConnections(self: *const Self) !bool {
        if (mbind_is_refusing_new_connections == null) {
            mbind_is_refusing_new_connections = try api.createMethod("NetworkedMultiplayerPeer", "is_refusing_new_connections");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_refusing_new_connections, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn poll(self: *const Self) !void {
        if (mbind_poll == null) {
            mbind_poll = try api.createMethod("NetworkedMultiplayerPeer", "poll");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_poll, base, cargs, result);
    }

    pub fn setRefuseNewConnections(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_refuse_new_connections == null) {
            mbind_set_refuse_new_connections = try api.createMethod("NetworkedMultiplayerPeer", "set_refuse_new_connections");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_refuse_new_connections, base, cargs, result);
    }

    pub fn setTargetPeer(self: *const Self, arg_id: i32) !void {
        if (mbind_set_target_peer == null) {
            mbind_set_target_peer = try api.createMethod("NetworkedMultiplayerPeer", "set_target_peer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_target_peer, base, cargs, result);
    }

    pub fn setTransferMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_transfer_mode == null) {
            mbind_set_transfer_mode = try api.createMethod("NetworkedMultiplayerPeer", "set_transfer_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_transfer_mode, base, cargs, result);
    }
};