// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Popup = @import("popup.zig").Popup;

// method bindings
var mbind_get_close_button: ?*c_api.godot_method_bind = null;
var mbind_get_resizable: ?*c_api.godot_method_bind = null;
var mbind_get_title: ?*c_api.godot_method_bind = null;
var mbind_set_resizable: ?*c_api.godot_method_bind = null;
var mbind_set_title: ?*c_api.godot_method_bind = null;
var mbind_window_dialog_constructor: ?fn () ?*c_api.godot_object = null;

pub const WindowDialog = struct {
    const Self = @This();
    const BaseClass = Popup;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_window_dialog_constructor == null) {
            mbind_window_dialog_constructor = try api.createConstructor("WindowDialog");
        }
        return api.createObject(Self, mbind_window_dialog_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getCloseButton(self: *const Self) !godot.TextureButton {
        if (mbind_get_close_button == null) {
            mbind_get_close_button = try api.createMethod("WindowDialog", "get_close_button");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_close_button, base, cargs, result);
        return @ptrCast(*godot.TextureButton, @alignCast(@alignOf(&godot.TextureButton), result)).*;
    }

    pub fn getResizable(self: *const Self) !bool {
        if (mbind_get_resizable == null) {
            mbind_get_resizable = try api.createMethod("WindowDialog", "get_resizable");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_resizable, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getTitle(self: *const Self) !godot.String {
        if (mbind_get_title == null) {
            mbind_get_title = try api.createMethod("WindowDialog", "get_title");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_title, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn setResizable(self: *const Self, arg_resizable: bool) !void {
        if (mbind_set_resizable == null) {
            mbind_set_resizable = try api.createMethod("WindowDialog", "set_resizable");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_resizable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_resizable, base, cargs, result);
    }

    pub fn setTitle(self: *const Self, arg_title: *const godot.String) !void {
        if (mbind_set_title == null) {
            mbind_set_title = try api.createMethod("WindowDialog", "set_title");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_title),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_title, base, cargs, result);
    }
};