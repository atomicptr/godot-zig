// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_is_public_only: ?*c_api.godot_method_bind = null;
var mbind_load: ?*c_api.godot_method_bind = null;
var mbind_load_from_string: ?*c_api.godot_method_bind = null;
var mbind_save: ?*c_api.godot_method_bind = null;
var mbind_save_to_string: ?*c_api.godot_method_bind = null;
var mbind_crypto_key_constructor: ?fn () ?*c_api.godot_object = null;

pub const CryptoKey = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_crypto_key_constructor == null) {
            mbind_crypto_key_constructor = try api.createConstructor("CryptoKey");
        }
        return api.createObject(Self, mbind_crypto_key_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn isPublicOnly(self: *const Self) !bool {
        if (mbind_is_public_only == null) {
            mbind_is_public_only = try api.createMethod("CryptoKey", "is_public_only");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_public_only, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn load(self: *const Self, arg_path: *const godot.String, arg_public_only: bool) !i32 {
        if (mbind_load == null) {
            mbind_load = try api.createMethod("CryptoKey", "load");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, *arg_public_only),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_load, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn loadFromString(self: *const Self, arg_string_key: *const godot.String, arg_public_only: bool) !i32 {
        if (mbind_load_from_string == null) {
            mbind_load_from_string = try api.createMethod("CryptoKey", "load_from_string");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_string_key),
            @ptrCast(*const anyopaque, *arg_public_only),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_load_from_string, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn save(self: *const Self, arg_path: *const godot.String, arg_public_only: bool) !i32 {
        if (mbind_save == null) {
            mbind_save = try api.createMethod("CryptoKey", "save");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, *arg_public_only),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_save, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn saveToString(self: *const Self, arg_public_only: bool) !godot.String {
        if (mbind_save_to_string == null) {
            mbind_save_to_string = try api.createMethod("CryptoKey", "save_to_string");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_public_only),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_save_to_string, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }
};