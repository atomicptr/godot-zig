// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Shape2D = @import("shape_2d.zig").Shape2D;

// method bindings
var mbind_get_points: ?*c_api.godot_method_bind = null;
var mbind_set_point_cloud: ?*c_api.godot_method_bind = null;
var mbind_set_points: ?*c_api.godot_method_bind = null;
var mbind_convex_polygon_shape_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const ConvexPolygonShape2D = struct {
    const Self = @This();
    const BaseClass = Shape2D;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_convex_polygon_shape_2d_constructor == null) {
            mbind_convex_polygon_shape_2d_constructor = try api.createConstructor("ConvexPolygonShape2D");
        }
        return api.createObject(Self, mbind_convex_polygon_shape_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getPoints(self: *const Self) !godot.PoolVector2Array {
        if (mbind_get_points == null) {
            mbind_get_points = try api.createMethod("ConvexPolygonShape2D", "get_points");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_points, base, cargs, result);
        return @ptrCast(*godot.PoolVector2Array, @alignCast(@alignOf(&godot.PoolVector2Array), result)).*;
    }

    pub fn setPointCloud(self: *const Self, arg_point_cloud: *const godot.PoolVector2Array) !void {
        if (mbind_set_point_cloud == null) {
            mbind_set_point_cloud = try api.createMethod("ConvexPolygonShape2D", "set_point_cloud");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point_cloud),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_point_cloud, base, cargs, result);
    }

    pub fn setPoints(self: *const Self, arg_points: *const godot.PoolVector2Array) !void {
        if (mbind_set_points == null) {
            mbind_set_points = try api.createMethod("ConvexPolygonShape2D", "set_points");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_points),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_points, base, cargs, result);
    }
};