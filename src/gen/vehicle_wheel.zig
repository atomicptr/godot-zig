// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Spatial = @import("spatial.zig").Spatial;

// method bindings
var mbind_get_brake: ?*c_api.godot_method_bind = null;
var mbind_get_damping_compression: ?*c_api.godot_method_bind = null;
var mbind_get_damping_relaxation: ?*c_api.godot_method_bind = null;
var mbind_get_engine_force: ?*c_api.godot_method_bind = null;
var mbind_get_friction_slip: ?*c_api.godot_method_bind = null;
var mbind_get_radius: ?*c_api.godot_method_bind = null;
var mbind_get_roll_influence: ?*c_api.godot_method_bind = null;
var mbind_get_rpm: ?*c_api.godot_method_bind = null;
var mbind_get_skidinfo: ?*c_api.godot_method_bind = null;
var mbind_get_steering: ?*c_api.godot_method_bind = null;
var mbind_get_suspension_max_force: ?*c_api.godot_method_bind = null;
var mbind_get_suspension_rest_length: ?*c_api.godot_method_bind = null;
var mbind_get_suspension_stiffness: ?*c_api.godot_method_bind = null;
var mbind_get_suspension_travel: ?*c_api.godot_method_bind = null;
var mbind_is_in_contact: ?*c_api.godot_method_bind = null;
var mbind_is_used_as_steering: ?*c_api.godot_method_bind = null;
var mbind_is_used_as_traction: ?*c_api.godot_method_bind = null;
var mbind_set_brake: ?*c_api.godot_method_bind = null;
var mbind_set_damping_compression: ?*c_api.godot_method_bind = null;
var mbind_set_damping_relaxation: ?*c_api.godot_method_bind = null;
var mbind_set_engine_force: ?*c_api.godot_method_bind = null;
var mbind_set_friction_slip: ?*c_api.godot_method_bind = null;
var mbind_set_radius: ?*c_api.godot_method_bind = null;
var mbind_set_roll_influence: ?*c_api.godot_method_bind = null;
var mbind_set_steering: ?*c_api.godot_method_bind = null;
var mbind_set_suspension_max_force: ?*c_api.godot_method_bind = null;
var mbind_set_suspension_rest_length: ?*c_api.godot_method_bind = null;
var mbind_set_suspension_stiffness: ?*c_api.godot_method_bind = null;
var mbind_set_suspension_travel: ?*c_api.godot_method_bind = null;
var mbind_set_use_as_steering: ?*c_api.godot_method_bind = null;
var mbind_set_use_as_traction: ?*c_api.godot_method_bind = null;
var mbind_vehicle_wheel_constructor: ?fn () ?*c_api.godot_object = null;

pub const VehicleWheel = struct {
    const Self = @This();
    const BaseClass = Spatial;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_vehicle_wheel_constructor == null) {
            mbind_vehicle_wheel_constructor = try api.createConstructor("VehicleWheel");
        }
        return api.createObject(Self, mbind_vehicle_wheel_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBrake(self: *const Self) !f32 {
        if (mbind_get_brake == null) {
            mbind_get_brake = try api.createMethod("VehicleWheel", "get_brake");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_brake, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDampingCompression(self: *const Self) !f32 {
        if (mbind_get_damping_compression == null) {
            mbind_get_damping_compression = try api.createMethod("VehicleWheel", "get_damping_compression");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_damping_compression, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDampingRelaxation(self: *const Self) !f32 {
        if (mbind_get_damping_relaxation == null) {
            mbind_get_damping_relaxation = try api.createMethod("VehicleWheel", "get_damping_relaxation");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_damping_relaxation, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getEngineForce(self: *const Self) !f32 {
        if (mbind_get_engine_force == null) {
            mbind_get_engine_force = try api.createMethod("VehicleWheel", "get_engine_force");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_engine_force, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFrictionSlip(self: *const Self) !f32 {
        if (mbind_get_friction_slip == null) {
            mbind_get_friction_slip = try api.createMethod("VehicleWheel", "get_friction_slip");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_friction_slip, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRadius(self: *const Self) !f32 {
        if (mbind_get_radius == null) {
            mbind_get_radius = try api.createMethod("VehicleWheel", "get_radius");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_radius, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRollInfluence(self: *const Self) !f32 {
        if (mbind_get_roll_influence == null) {
            mbind_get_roll_influence = try api.createMethod("VehicleWheel", "get_roll_influence");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_roll_influence, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getRpm(self: *const Self) !f32 {
        if (mbind_get_rpm == null) {
            mbind_get_rpm = try api.createMethod("VehicleWheel", "get_rpm");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rpm, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSkidinfo(self: *const Self) !f32 {
        if (mbind_get_skidinfo == null) {
            mbind_get_skidinfo = try api.createMethod("VehicleWheel", "get_skidinfo");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_skidinfo, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSteering(self: *const Self) !f32 {
        if (mbind_get_steering == null) {
            mbind_get_steering = try api.createMethod("VehicleWheel", "get_steering");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_steering, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSuspensionMaxForce(self: *const Self) !f32 {
        if (mbind_get_suspension_max_force == null) {
            mbind_get_suspension_max_force = try api.createMethod("VehicleWheel", "get_suspension_max_force");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_suspension_max_force, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSuspensionRestLength(self: *const Self) !f32 {
        if (mbind_get_suspension_rest_length == null) {
            mbind_get_suspension_rest_length = try api.createMethod("VehicleWheel", "get_suspension_rest_length");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_suspension_rest_length, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSuspensionStiffness(self: *const Self) !f32 {
        if (mbind_get_suspension_stiffness == null) {
            mbind_get_suspension_stiffness = try api.createMethod("VehicleWheel", "get_suspension_stiffness");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_suspension_stiffness, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSuspensionTravel(self: *const Self) !f32 {
        if (mbind_get_suspension_travel == null) {
            mbind_get_suspension_travel = try api.createMethod("VehicleWheel", "get_suspension_travel");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_suspension_travel, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn isInContact(self: *const Self) !bool {
        if (mbind_is_in_contact == null) {
            mbind_is_in_contact = try api.createMethod("VehicleWheel", "is_in_contact");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_in_contact, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isUsedAsSteering(self: *const Self) !bool {
        if (mbind_is_used_as_steering == null) {
            mbind_is_used_as_steering = try api.createMethod("VehicleWheel", "is_used_as_steering");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_used_as_steering, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isUsedAsTraction(self: *const Self) !bool {
        if (mbind_is_used_as_traction == null) {
            mbind_is_used_as_traction = try api.createMethod("VehicleWheel", "is_used_as_traction");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_used_as_traction, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setBrake(self: *const Self, arg_brake: f32) !void {
        if (mbind_set_brake == null) {
            mbind_set_brake = try api.createMethod("VehicleWheel", "set_brake");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_brake),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_brake, base, cargs, result);
    }

    pub fn setDampingCompression(self: *const Self, arg_length: f32) !void {
        if (mbind_set_damping_compression == null) {
            mbind_set_damping_compression = try api.createMethod("VehicleWheel", "set_damping_compression");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_damping_compression, base, cargs, result);
    }

    pub fn setDampingRelaxation(self: *const Self, arg_length: f32) !void {
        if (mbind_set_damping_relaxation == null) {
            mbind_set_damping_relaxation = try api.createMethod("VehicleWheel", "set_damping_relaxation");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_damping_relaxation, base, cargs, result);
    }

    pub fn setEngineForce(self: *const Self, arg_engine_force: f32) !void {
        if (mbind_set_engine_force == null) {
            mbind_set_engine_force = try api.createMethod("VehicleWheel", "set_engine_force");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_engine_force),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_engine_force, base, cargs, result);
    }

    pub fn setFrictionSlip(self: *const Self, arg_length: f32) !void {
        if (mbind_set_friction_slip == null) {
            mbind_set_friction_slip = try api.createMethod("VehicleWheel", "set_friction_slip");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_friction_slip, base, cargs, result);
    }

    pub fn setRadius(self: *const Self, arg_length: f32) !void {
        if (mbind_set_radius == null) {
            mbind_set_radius = try api.createMethod("VehicleWheel", "set_radius");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_radius, base, cargs, result);
    }

    pub fn setRollInfluence(self: *const Self, arg_roll_influence: f32) !void {
        if (mbind_set_roll_influence == null) {
            mbind_set_roll_influence = try api.createMethod("VehicleWheel", "set_roll_influence");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_roll_influence),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_roll_influence, base, cargs, result);
    }

    pub fn setSteering(self: *const Self, arg_steering: f32) !void {
        if (mbind_set_steering == null) {
            mbind_set_steering = try api.createMethod("VehicleWheel", "set_steering");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_steering),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_steering, base, cargs, result);
    }

    pub fn setSuspensionMaxForce(self: *const Self, arg_length: f32) !void {
        if (mbind_set_suspension_max_force == null) {
            mbind_set_suspension_max_force = try api.createMethod("VehicleWheel", "set_suspension_max_force");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_suspension_max_force, base, cargs, result);
    }

    pub fn setSuspensionRestLength(self: *const Self, arg_length: f32) !void {
        if (mbind_set_suspension_rest_length == null) {
            mbind_set_suspension_rest_length = try api.createMethod("VehicleWheel", "set_suspension_rest_length");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_suspension_rest_length, base, cargs, result);
    }

    pub fn setSuspensionStiffness(self: *const Self, arg_length: f32) !void {
        if (mbind_set_suspension_stiffness == null) {
            mbind_set_suspension_stiffness = try api.createMethod("VehicleWheel", "set_suspension_stiffness");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_suspension_stiffness, base, cargs, result);
    }

    pub fn setSuspensionTravel(self: *const Self, arg_length: f32) !void {
        if (mbind_set_suspension_travel == null) {
            mbind_set_suspension_travel = try api.createMethod("VehicleWheel", "set_suspension_travel");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_length),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_suspension_travel, base, cargs, result);
    }

    pub fn setUseAsSteering(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_use_as_steering == null) {
            mbind_set_use_as_steering = try api.createMethod("VehicleWheel", "set_use_as_steering");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_use_as_steering, base, cargs, result);
    }

    pub fn setUseAsTraction(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_use_as_traction == null) {
            mbind_set_use_as_traction = try api.createMethod("VehicleWheel", "set_use_as_traction");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_use_as_traction, base, cargs, result);
    }
};