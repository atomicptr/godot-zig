// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Spatial = @import("spatial.zig").Spatial;

// method bindings
var mbind_get_anchor_id: ?*c_api.godot_method_bind = null;
var mbind_get_anchor_name: ?*c_api.godot_method_bind = null;
var mbind_get_is_active: ?*c_api.godot_method_bind = null;
var mbind_get_mesh: ?*c_api.godot_method_bind = null;
var mbind_get_plane: ?*c_api.godot_method_bind = null;
var mbind_get_size: ?*c_api.godot_method_bind = null;
var mbind_set_anchor_id: ?*c_api.godot_method_bind = null;
var mbind_arvranchor_constructor: ?fn () ?*c_api.godot_object = null;

pub const ARVRAnchor = struct {
    const Self = @This();
    const BaseClass = Spatial;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_arvranchor_constructor == null) {
            mbind_arvranchor_constructor = try api.createConstructor("ARVRAnchor");
        }
        return api.createObject(Self, mbind_arvranchor_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAnchorId(self: *const Self) !i32 {
        if (mbind_get_anchor_id == null) {
            mbind_get_anchor_id = try api.createMethod("ARVRAnchor", "get_anchor_id");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_anchor_id, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getAnchorName(self: *const Self) !godot.String {
        if (mbind_get_anchor_name == null) {
            mbind_get_anchor_name = try api.createMethod("ARVRAnchor", "get_anchor_name");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_anchor_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getIsActive(self: *const Self) !bool {
        if (mbind_get_is_active == null) {
            mbind_get_is_active = try api.createMethod("ARVRAnchor", "get_is_active");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_is_active, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getMesh(self: *const Self) !godot.Mesh {
        if (mbind_get_mesh == null) {
            mbind_get_mesh = try api.createMethod("ARVRAnchor", "get_mesh");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mesh, base, cargs, result);
        return @ptrCast(*godot.Mesh, @alignCast(@alignOf(&godot.Mesh), result)).*;
    }

    pub fn getPlane(self: *const Self) !godot.Plane {
        if (mbind_get_plane == null) {
            mbind_get_plane = try api.createMethod("ARVRAnchor", "get_plane");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_plane, base, cargs, result);
        return @ptrCast(*godot.Plane, @alignCast(@alignOf(&godot.Plane), result)).*;
    }

    pub fn getSize(self: *const Self) !godot.Vector3 {
        if (mbind_get_size == null) {
            mbind_get_size = try api.createMethod("ARVRAnchor", "get_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_size, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn setAnchorId(self: *const Self, arg_anchor_id: i32) !void {
        if (mbind_set_anchor_id == null) {
            mbind_set_anchor_id = try api.createMethod("ARVRAnchor", "set_anchor_id");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_anchor_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_anchor_id, base, cargs, result);
    }
};