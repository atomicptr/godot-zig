// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_import_animation_from_other_importer: ?*c_api.godot_method_bind = null;
var mbind_import_scene_from_other_importer: ?*c_api.godot_method_bind = null;
var mbind_editor_scene_importer_constructor: ?fn () ?*c_api.godot_object = null;

pub const EditorSceneImporter = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_editor_scene_importer_constructor == null) {
            mbind_editor_scene_importer_constructor = try api.createConstructor("EditorSceneImporter");
        }
        return api.createObject(Self, mbind_editor_scene_importer_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn importAnimationFromOtherImporter(self: *const Self, arg_path: *const godot.String, arg_flags: i32, arg_bake_fps: i32) !godot.Animation {
        if (mbind_import_animation_from_other_importer == null) {
            mbind_import_animation_from_other_importer = try api.createMethod("EditorSceneImporter", "import_animation_from_other_importer");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, *arg_flags),
            @ptrCast(*const anyopaque, *arg_bake_fps),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_import_animation_from_other_importer, base, cargs, result);
        return @ptrCast(*godot.Animation, @alignCast(@alignOf(&godot.Animation), result)).*;
    }

    pub fn importSceneFromOtherImporter(self: *const Self, arg_path: *const godot.String, arg_flags: i32, arg_bake_fps: i32, arg_compress_flags: i32) !godot.Node {
        if (mbind_import_scene_from_other_importer == null) {
            mbind_import_scene_from_other_importer = try api.createMethod("EditorSceneImporter", "import_scene_from_other_importer");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, *arg_flags),
            @ptrCast(*const anyopaque, *arg_bake_fps),
            @ptrCast(*const anyopaque, *arg_compress_flags),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_import_scene_from_other_importer, base, cargs, result);
        return @ptrCast(*godot.Node, @alignCast(@alignOf(&godot.Node), result)).*;
    }
};