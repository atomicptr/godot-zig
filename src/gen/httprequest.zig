// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node = @import("node.zig").Node;

// method bindings
var mbind_cancel_request: ?*c_api.godot_method_bind = null;
var mbind_get_body_size: ?*c_api.godot_method_bind = null;
var mbind_get_body_size_limit: ?*c_api.godot_method_bind = null;
var mbind_get_download_chunk_size: ?*c_api.godot_method_bind = null;
var mbind_get_download_file: ?*c_api.godot_method_bind = null;
var mbind_get_downloaded_bytes: ?*c_api.godot_method_bind = null;
var mbind_get_http_client_status: ?*c_api.godot_method_bind = null;
var mbind_get_max_redirects: ?*c_api.godot_method_bind = null;
var mbind_get_timeout: ?*c_api.godot_method_bind = null;
var mbind_is_using_threads: ?*c_api.godot_method_bind = null;
var mbind_request: ?*c_api.godot_method_bind = null;
var mbind_request_raw: ?*c_api.godot_method_bind = null;
var mbind_set_body_size_limit: ?*c_api.godot_method_bind = null;
var mbind_set_download_chunk_size: ?*c_api.godot_method_bind = null;
var mbind_set_download_file: ?*c_api.godot_method_bind = null;
var mbind_set_max_redirects: ?*c_api.godot_method_bind = null;
var mbind_set_timeout: ?*c_api.godot_method_bind = null;
var mbind_set_use_threads: ?*c_api.godot_method_bind = null;
var mbind_httprequest_constructor: ?fn () ?*c_api.godot_object = null;

pub const HTTPRequest = struct {
    const Self = @This();
    const BaseClass = Node;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_httprequest_constructor == null) {
            mbind_httprequest_constructor = try api.createConstructor("HTTPRequest");
        }
        return api.createObject(Self, mbind_httprequest_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn cancelRequest(self: *const Self) !void {
        if (mbind_cancel_request == null) {
            mbind_cancel_request = try api.createMethod("HTTPRequest", "cancel_request");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_cancel_request, base, cargs, result);
    }

    pub fn getBodySize(self: *const Self) !i32 {
        if (mbind_get_body_size == null) {
            mbind_get_body_size = try api.createMethod("HTTPRequest", "get_body_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_body_size, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBodySizeLimit(self: *const Self) !i32 {
        if (mbind_get_body_size_limit == null) {
            mbind_get_body_size_limit = try api.createMethod("HTTPRequest", "get_body_size_limit");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_body_size_limit, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDownloadChunkSize(self: *const Self) !i32 {
        if (mbind_get_download_chunk_size == null) {
            mbind_get_download_chunk_size = try api.createMethod("HTTPRequest", "get_download_chunk_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_download_chunk_size, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getDownloadFile(self: *const Self) !godot.String {
        if (mbind_get_download_file == null) {
            mbind_get_download_file = try api.createMethod("HTTPRequest", "get_download_file");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_download_file, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getDownloadedBytes(self: *const Self) !i32 {
        if (mbind_get_downloaded_bytes == null) {
            mbind_get_downloaded_bytes = try api.createMethod("HTTPRequest", "get_downloaded_bytes");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_downloaded_bytes, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getHttpClientStatus(self: *const Self) !i32 {
        if (mbind_get_http_client_status == null) {
            mbind_get_http_client_status = try api.createMethod("HTTPRequest", "get_http_client_status");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_http_client_status, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMaxRedirects(self: *const Self) !i32 {
        if (mbind_get_max_redirects == null) {
            mbind_get_max_redirects = try api.createMethod("HTTPRequest", "get_max_redirects");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_max_redirects, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTimeout(self: *const Self) !i32 {
        if (mbind_get_timeout == null) {
            mbind_get_timeout = try api.createMethod("HTTPRequest", "get_timeout");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_timeout, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn isUsingThreads(self: *const Self) !bool {
        if (mbind_is_using_threads == null) {
            mbind_is_using_threads = try api.createMethod("HTTPRequest", "is_using_threads");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_using_threads, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn request(self: *const Self, arg_url: *const godot.String, arg_custom_headers: *const godot.PoolStringArray, arg_ssl_validate_domain: bool, arg_method: i32, arg_request_data: *const godot.String) !i32 {
        if (mbind_request == null) {
            mbind_request = try api.createMethod("HTTPRequest", "request");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_url),
            @ptrCast(*const anyopaque, arg_custom_headers),
            @ptrCast(*const anyopaque, *arg_ssl_validate_domain),
            @ptrCast(*const anyopaque, *arg_method),
            @ptrCast(*const anyopaque, arg_request_data),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_request, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn requestRaw(self: *const Self, arg_url: *const godot.String, arg_custom_headers: *const godot.PoolStringArray, arg_ssl_validate_domain: bool, arg_method: i32, arg_request_data_raw: *const godot.PoolByteArray) !i32 {
        if (mbind_request_raw == null) {
            mbind_request_raw = try api.createMethod("HTTPRequest", "request_raw");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_url),
            @ptrCast(*const anyopaque, arg_custom_headers),
            @ptrCast(*const anyopaque, *arg_ssl_validate_domain),
            @ptrCast(*const anyopaque, *arg_method),
            @ptrCast(*const anyopaque, arg_request_data_raw),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_request_raw, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setBodySizeLimit(self: *const Self, arg_bytes: i32) !void {
        if (mbind_set_body_size_limit == null) {
            mbind_set_body_size_limit = try api.createMethod("HTTPRequest", "set_body_size_limit");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_bytes),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_body_size_limit, base, cargs, result);
    }

    pub fn setDownloadChunkSize(self: *const Self, arg_arg0: i32) !void {
        if (mbind_set_download_chunk_size == null) {
            mbind_set_download_chunk_size = try api.createMethod("HTTPRequest", "set_download_chunk_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_arg0),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_download_chunk_size, base, cargs, result);
    }

    pub fn setDownloadFile(self: *const Self, arg_path: *const godot.String) !void {
        if (mbind_set_download_file == null) {
            mbind_set_download_file = try api.createMethod("HTTPRequest", "set_download_file");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_download_file, base, cargs, result);
    }

    pub fn setMaxRedirects(self: *const Self, arg_amount: i32) !void {
        if (mbind_set_max_redirects == null) {
            mbind_set_max_redirects = try api.createMethod("HTTPRequest", "set_max_redirects");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_max_redirects, base, cargs, result);
    }

    pub fn setTimeout(self: *const Self, arg_timeout: i32) !void {
        if (mbind_set_timeout == null) {
            mbind_set_timeout = try api.createMethod("HTTPRequest", "set_timeout");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_timeout),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_timeout, base, cargs, result);
    }

    pub fn setUseThreads(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_use_threads == null) {
            mbind_set_use_threads = try api.createMethod("HTTPRequest", "set_use_threads");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_use_threads, base, cargs, result);
    }
};