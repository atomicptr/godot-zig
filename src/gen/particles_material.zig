// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_color: ?*c_api.godot_method_bind = null;
var mbind_get_color_ramp: ?*c_api.godot_method_bind = null;
var mbind_get_direction: ?*c_api.godot_method_bind = null;
var mbind_get_emission_box_extents: ?*c_api.godot_method_bind = null;
var mbind_get_emission_color_texture: ?*c_api.godot_method_bind = null;
var mbind_get_emission_normal_texture: ?*c_api.godot_method_bind = null;
var mbind_get_emission_point_count: ?*c_api.godot_method_bind = null;
var mbind_get_emission_point_texture: ?*c_api.godot_method_bind = null;
var mbind_get_emission_ring_axis: ?*c_api.godot_method_bind = null;
var mbind_get_emission_ring_height: ?*c_api.godot_method_bind = null;
var mbind_get_emission_ring_inner_radius: ?*c_api.godot_method_bind = null;
var mbind_get_emission_ring_radius: ?*c_api.godot_method_bind = null;
var mbind_get_emission_shape: ?*c_api.godot_method_bind = null;
var mbind_get_emission_sphere_radius: ?*c_api.godot_method_bind = null;
var mbind_get_flag: ?*c_api.godot_method_bind = null;
var mbind_get_flatness: ?*c_api.godot_method_bind = null;
var mbind_get_gravity: ?*c_api.godot_method_bind = null;
var mbind_get_lifetime_randomness: ?*c_api.godot_method_bind = null;
var mbind_get_param: ?*c_api.godot_method_bind = null;
var mbind_get_param_randomness: ?*c_api.godot_method_bind = null;
var mbind_get_param_texture: ?*c_api.godot_method_bind = null;
var mbind_get_spread: ?*c_api.godot_method_bind = null;
var mbind_get_trail_color_modifier: ?*c_api.godot_method_bind = null;
var mbind_get_trail_divisor: ?*c_api.godot_method_bind = null;
var mbind_get_trail_size_modifier: ?*c_api.godot_method_bind = null;
var mbind_set_color: ?*c_api.godot_method_bind = null;
var mbind_set_color_ramp: ?*c_api.godot_method_bind = null;
var mbind_set_direction: ?*c_api.godot_method_bind = null;
var mbind_set_emission_box_extents: ?*c_api.godot_method_bind = null;
var mbind_set_emission_color_texture: ?*c_api.godot_method_bind = null;
var mbind_set_emission_normal_texture: ?*c_api.godot_method_bind = null;
var mbind_set_emission_point_count: ?*c_api.godot_method_bind = null;
var mbind_set_emission_point_texture: ?*c_api.godot_method_bind = null;
var mbind_set_emission_ring_axis: ?*c_api.godot_method_bind = null;
var mbind_set_emission_ring_height: ?*c_api.godot_method_bind = null;
var mbind_set_emission_ring_inner_radius: ?*c_api.godot_method_bind = null;
var mbind_set_emission_ring_radius: ?*c_api.godot_method_bind = null;
var mbind_set_emission_shape: ?*c_api.godot_method_bind = null;
var mbind_set_emission_sphere_radius: ?*c_api.godot_method_bind = null;
var mbind_set_flag: ?*c_api.godot_method_bind = null;
var mbind_set_flatness: ?*c_api.godot_method_bind = null;
var mbind_set_gravity: ?*c_api.godot_method_bind = null;
var mbind_set_lifetime_randomness: ?*c_api.godot_method_bind = null;
var mbind_set_param: ?*c_api.godot_method_bind = null;
var mbind_set_param_randomness: ?*c_api.godot_method_bind = null;
var mbind_set_param_texture: ?*c_api.godot_method_bind = null;
var mbind_set_spread: ?*c_api.godot_method_bind = null;
var mbind_set_trail_color_modifier: ?*c_api.godot_method_bind = null;
var mbind_set_trail_divisor: ?*c_api.godot_method_bind = null;
var mbind_set_trail_size_modifier: ?*c_api.godot_method_bind = null;
var mbind_particles_material_constructor: ?fn () ?*c_api.godot_object = null;

pub const ParticlesMaterial = struct {
    const Self = @This();
    pub const BaseClass = godot.Material;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_particles_material_constructor == null) {
            mbind_particles_material_constructor = try api.createConstructor("ParticlesMaterial");
        }
        return api.createObject(Self, mbind_particles_material_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getColor(self: *const Self) !godot.Color {
        if (mbind_get_color == null) {
            mbind_get_color = try api.createMethod("ParticlesMaterial", "get_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getColorRamp(self: *const Self) !godot.Texture {
        if (mbind_get_color_ramp == null) {
            mbind_get_color_ramp = try api.createMethod("ParticlesMaterial", "get_color_ramp");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_color_ramp, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getDirection(self: *const Self) !godot.Vector3 {
        if (mbind_get_direction == null) {
            mbind_get_direction = try api.createMethod("ParticlesMaterial", "get_direction");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_direction, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getEmissionBoxExtents(self: *const Self) !godot.Vector3 {
        if (mbind_get_emission_box_extents == null) {
            mbind_get_emission_box_extents = try api.createMethod("ParticlesMaterial", "get_emission_box_extents");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_box_extents, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getEmissionColorTexture(self: *const Self) !godot.Texture {
        if (mbind_get_emission_color_texture == null) {
            mbind_get_emission_color_texture = try api.createMethod("ParticlesMaterial", "get_emission_color_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_color_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getEmissionNormalTexture(self: *const Self) !godot.Texture {
        if (mbind_get_emission_normal_texture == null) {
            mbind_get_emission_normal_texture = try api.createMethod("ParticlesMaterial", "get_emission_normal_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_normal_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getEmissionPointCount(self: *const Self) !i32 {
        if (mbind_get_emission_point_count == null) {
            mbind_get_emission_point_count = try api.createMethod("ParticlesMaterial", "get_emission_point_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_point_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getEmissionPointTexture(self: *const Self) !godot.Texture {
        if (mbind_get_emission_point_texture == null) {
            mbind_get_emission_point_texture = try api.createMethod("ParticlesMaterial", "get_emission_point_texture");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_point_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getEmissionRingAxis(self: *const Self) !godot.Vector3 {
        if (mbind_get_emission_ring_axis == null) {
            mbind_get_emission_ring_axis = try api.createMethod("ParticlesMaterial", "get_emission_ring_axis");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_ring_axis, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getEmissionRingHeight(self: *const Self) !f32 {
        if (mbind_get_emission_ring_height == null) {
            mbind_get_emission_ring_height = try api.createMethod("ParticlesMaterial", "get_emission_ring_height");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_ring_height, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getEmissionRingInnerRadius(self: *const Self) !f32 {
        if (mbind_get_emission_ring_inner_radius == null) {
            mbind_get_emission_ring_inner_radius = try api.createMethod("ParticlesMaterial", "get_emission_ring_inner_radius");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_ring_inner_radius, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getEmissionRingRadius(self: *const Self) !f32 {
        if (mbind_get_emission_ring_radius == null) {
            mbind_get_emission_ring_radius = try api.createMethod("ParticlesMaterial", "get_emission_ring_radius");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_ring_radius, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getEmissionShape(self: *const Self) !i32 {
        if (mbind_get_emission_shape == null) {
            mbind_get_emission_shape = try api.createMethod("ParticlesMaterial", "get_emission_shape");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_shape, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getEmissionSphereRadius(self: *const Self) !f32 {
        if (mbind_get_emission_sphere_radius == null) {
            mbind_get_emission_sphere_radius = try api.createMethod("ParticlesMaterial", "get_emission_sphere_radius");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_emission_sphere_radius, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getFlag(self: *const Self, arg_flag: i32) !bool {
        if (mbind_get_flag == null) {
            mbind_get_flag = try api.createMethod("ParticlesMaterial", "get_flag");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flag),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_flag, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getFlatness(self: *const Self) !f32 {
        if (mbind_get_flatness == null) {
            mbind_get_flatness = try api.createMethod("ParticlesMaterial", "get_flatness");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_flatness, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getGravity(self: *const Self) !godot.Vector3 {
        if (mbind_get_gravity == null) {
            mbind_get_gravity = try api.createMethod("ParticlesMaterial", "get_gravity");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_gravity, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getLifetimeRandomness(self: *const Self) !f32 {
        if (mbind_get_lifetime_randomness == null) {
            mbind_get_lifetime_randomness = try api.createMethod("ParticlesMaterial", "get_lifetime_randomness");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_lifetime_randomness, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getParam(self: *const Self, arg_param: i32) !f32 {
        if (mbind_get_param == null) {
            mbind_get_param = try api.createMethod("ParticlesMaterial", "get_param");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_param, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getParamRandomness(self: *const Self, arg_param: i32) !f32 {
        if (mbind_get_param_randomness == null) {
            mbind_get_param_randomness = try api.createMethod("ParticlesMaterial", "get_param_randomness");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_param_randomness, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getParamTexture(self: *const Self, arg_param: i32) !godot.Texture {
        if (mbind_get_param_texture == null) {
            mbind_get_param_texture = try api.createMethod("ParticlesMaterial", "get_param_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_param_texture, base, cargs, result);
        return @ptrCast(*godot.Texture, @alignCast(@alignOf(&godot.Texture), result)).*;
    }

    pub fn getSpread(self: *const Self) !f32 {
        if (mbind_get_spread == null) {
            mbind_get_spread = try api.createMethod("ParticlesMaterial", "get_spread");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_spread, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getTrailColorModifier(self: *const Self) !godot.GradientTexture {
        if (mbind_get_trail_color_modifier == null) {
            mbind_get_trail_color_modifier = try api.createMethod("ParticlesMaterial", "get_trail_color_modifier");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_trail_color_modifier, base, cargs, result);
        return @ptrCast(*godot.GradientTexture, @alignCast(@alignOf(&godot.GradientTexture), result)).*;
    }

    pub fn getTrailDivisor(self: *const Self) !i32 {
        if (mbind_get_trail_divisor == null) {
            mbind_get_trail_divisor = try api.createMethod("ParticlesMaterial", "get_trail_divisor");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_trail_divisor, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getTrailSizeModifier(self: *const Self) !godot.CurveTexture {
        if (mbind_get_trail_size_modifier == null) {
            mbind_get_trail_size_modifier = try api.createMethod("ParticlesMaterial", "get_trail_size_modifier");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_trail_size_modifier, base, cargs, result);
        return @ptrCast(*godot.CurveTexture, @alignCast(@alignOf(&godot.CurveTexture), result)).*;
    }

    pub fn setColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_color == null) {
            mbind_set_color = try api.createMethod("ParticlesMaterial", "set_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_color, base, cargs, result);
    }

    pub fn setColorRamp(self: *const Self, arg_ramp: *const godot.Texture) !void {
        if (mbind_set_color_ramp == null) {
            mbind_set_color_ramp = try api.createMethod("ParticlesMaterial", "set_color_ramp");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_ramp),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_color_ramp, base, cargs, result);
    }

    pub fn setDirection(self: *const Self, arg_degrees: *const godot.Vector3) !void {
        if (mbind_set_direction == null) {
            mbind_set_direction = try api.createMethod("ParticlesMaterial", "set_direction");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_direction, base, cargs, result);
    }

    pub fn setEmissionBoxExtents(self: *const Self, arg_extents: *const godot.Vector3) !void {
        if (mbind_set_emission_box_extents == null) {
            mbind_set_emission_box_extents = try api.createMethod("ParticlesMaterial", "set_emission_box_extents");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_extents),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_box_extents, base, cargs, result);
    }

    pub fn setEmissionColorTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_emission_color_texture == null) {
            mbind_set_emission_color_texture = try api.createMethod("ParticlesMaterial", "set_emission_color_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_color_texture, base, cargs, result);
    }

    pub fn setEmissionNormalTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_emission_normal_texture == null) {
            mbind_set_emission_normal_texture = try api.createMethod("ParticlesMaterial", "set_emission_normal_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_normal_texture, base, cargs, result);
    }

    pub fn setEmissionPointCount(self: *const Self, arg_point_count: i32) !void {
        if (mbind_set_emission_point_count == null) {
            mbind_set_emission_point_count = try api.createMethod("ParticlesMaterial", "set_emission_point_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point_count),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_point_count, base, cargs, result);
    }

    pub fn setEmissionPointTexture(self: *const Self, arg_texture: *const godot.Texture) !void {
        if (mbind_set_emission_point_texture == null) {
            mbind_set_emission_point_texture = try api.createMethod("ParticlesMaterial", "set_emission_point_texture");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_point_texture, base, cargs, result);
    }

    pub fn setEmissionRingAxis(self: *const Self, arg_axis: *const godot.Vector3) !void {
        if (mbind_set_emission_ring_axis == null) {
            mbind_set_emission_ring_axis = try api.createMethod("ParticlesMaterial", "set_emission_ring_axis");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_axis),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_ring_axis, base, cargs, result);
    }

    pub fn setEmissionRingHeight(self: *const Self, arg_height: f32) !void {
        if (mbind_set_emission_ring_height == null) {
            mbind_set_emission_ring_height = try api.createMethod("ParticlesMaterial", "set_emission_ring_height");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_height),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_ring_height, base, cargs, result);
    }

    pub fn setEmissionRingInnerRadius(self: *const Self, arg_offset: f32) !void {
        if (mbind_set_emission_ring_inner_radius == null) {
            mbind_set_emission_ring_inner_radius = try api.createMethod("ParticlesMaterial", "set_emission_ring_inner_radius");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_offset),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_ring_inner_radius, base, cargs, result);
    }

    pub fn setEmissionRingRadius(self: *const Self, arg_radius: f32) !void {
        if (mbind_set_emission_ring_radius == null) {
            mbind_set_emission_ring_radius = try api.createMethod("ParticlesMaterial", "set_emission_ring_radius");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radius),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_ring_radius, base, cargs, result);
    }

    pub fn setEmissionShape(self: *const Self, arg_shape: i32) !void {
        if (mbind_set_emission_shape == null) {
            mbind_set_emission_shape = try api.createMethod("ParticlesMaterial", "set_emission_shape");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_shape),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_shape, base, cargs, result);
    }

    pub fn setEmissionSphereRadius(self: *const Self, arg_radius: f32) !void {
        if (mbind_set_emission_sphere_radius == null) {
            mbind_set_emission_sphere_radius = try api.createMethod("ParticlesMaterial", "set_emission_sphere_radius");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_radius),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_emission_sphere_radius, base, cargs, result);
    }

    pub fn setFlag(self: *const Self, arg_flag: i32, arg_enable: bool) !void {
        if (mbind_set_flag == null) {
            mbind_set_flag = try api.createMethod("ParticlesMaterial", "set_flag");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flag),
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_flag, base, cargs, result);
    }

    pub fn setFlatness(self: *const Self, arg_amount: f32) !void {
        if (mbind_set_flatness == null) {
            mbind_set_flatness = try api.createMethod("ParticlesMaterial", "set_flatness");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_amount),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_flatness, base, cargs, result);
    }

    pub fn setGravity(self: *const Self, arg_accel_vec: *const godot.Vector3) !void {
        if (mbind_set_gravity == null) {
            mbind_set_gravity = try api.createMethod("ParticlesMaterial", "set_gravity");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_accel_vec),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_gravity, base, cargs, result);
    }

    pub fn setLifetimeRandomness(self: *const Self, arg_randomness: f32) !void {
        if (mbind_set_lifetime_randomness == null) {
            mbind_set_lifetime_randomness = try api.createMethod("ParticlesMaterial", "set_lifetime_randomness");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_randomness),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_lifetime_randomness, base, cargs, result);
    }

    pub fn setParam(self: *const Self, arg_param: i32, arg_value: f32) !void {
        if (mbind_set_param == null) {
            mbind_set_param = try api.createMethod("ParticlesMaterial", "set_param");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
            @ptrCast(*const anyopaque, *arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_param, base, cargs, result);
    }

    pub fn setParamRandomness(self: *const Self, arg_param: i32, arg_randomness: f32) !void {
        if (mbind_set_param_randomness == null) {
            mbind_set_param_randomness = try api.createMethod("ParticlesMaterial", "set_param_randomness");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
            @ptrCast(*const anyopaque, *arg_randomness),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_param_randomness, base, cargs, result);
    }

    pub fn setParamTexture(self: *const Self, arg_param: i32, arg_texture: *const godot.Texture) !void {
        if (mbind_set_param_texture == null) {
            mbind_set_param_texture = try api.createMethod("ParticlesMaterial", "set_param_texture");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_param),
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_param_texture, base, cargs, result);
    }

    pub fn setSpread(self: *const Self, arg_degrees: f32) !void {
        if (mbind_set_spread == null) {
            mbind_set_spread = try api.createMethod("ParticlesMaterial", "set_spread");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_degrees),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_spread, base, cargs, result);
    }

    pub fn setTrailColorModifier(self: *const Self, arg_texture: *const godot.GradientTexture) !void {
        if (mbind_set_trail_color_modifier == null) {
            mbind_set_trail_color_modifier = try api.createMethod("ParticlesMaterial", "set_trail_color_modifier");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_trail_color_modifier, base, cargs, result);
    }

    pub fn setTrailDivisor(self: *const Self, arg_divisor: i32) !void {
        if (mbind_set_trail_divisor == null) {
            mbind_set_trail_divisor = try api.createMethod("ParticlesMaterial", "set_trail_divisor");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_divisor),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_trail_divisor, base, cargs, result);
    }

    pub fn setTrailSizeModifier(self: *const Self, arg_texture: *const godot.CurveTexture) !void {
        if (mbind_set_trail_size_modifier == null) {
            mbind_set_trail_size_modifier = try api.createMethod("ParticlesMaterial", "set_trail_size_modifier");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_texture),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_trail_size_modifier, base, cargs, result);
    }
};