// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_create_convex_shape: ?*c_api.godot_method_bind = null;
var mbind_create_outline: ?*c_api.godot_method_bind = null;
var mbind_create_trimesh_shape: ?*c_api.godot_method_bind = null;
var mbind_generate_triangle_mesh: ?*c_api.godot_method_bind = null;
var mbind_get_aabb: ?*c_api.godot_method_bind = null;
var mbind_get_faces: ?*c_api.godot_method_bind = null;
var mbind_get_lightmap_size_hint: ?*c_api.godot_method_bind = null;
var mbind_get_surface_count: ?*c_api.godot_method_bind = null;
var mbind_set_lightmap_size_hint: ?*c_api.godot_method_bind = null;
var mbind_surface_get_arrays: ?*c_api.godot_method_bind = null;
var mbind_surface_get_blend_shape_arrays: ?*c_api.godot_method_bind = null;
var mbind_surface_get_material: ?*c_api.godot_method_bind = null;
var mbind_surface_set_material: ?*c_api.godot_method_bind = null;
var mbind_mesh_constructor: ?fn () ?*c_api.godot_object = null;

pub const Mesh = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_mesh_constructor == null) {
            mbind_mesh_constructor = try api.createConstructor("Mesh");
        }
        return api.createObject(Self, mbind_mesh_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn createConvexShape(self: *const Self, arg_clean: bool, arg_simplify: bool) !godot.Shape {
        if (mbind_create_convex_shape == null) {
            mbind_create_convex_shape = try api.createMethod("Mesh", "create_convex_shape");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_clean),
            @ptrCast(*const anyopaque, *arg_simplify),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_convex_shape, base, cargs, result);
        return @ptrCast(*godot.Shape, @alignCast(@alignOf(&godot.Shape), result)).*;
    }

    pub fn createOutline(self: *const Self, arg_margin: f32) !godot.Mesh {
        if (mbind_create_outline == null) {
            mbind_create_outline = try api.createMethod("Mesh", "create_outline");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_margin),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_outline, base, cargs, result);
        return @ptrCast(*godot.Mesh, @alignCast(@alignOf(&godot.Mesh), result)).*;
    }

    pub fn createTrimeshShape(self: *const Self) !godot.Shape {
        if (mbind_create_trimesh_shape == null) {
            mbind_create_trimesh_shape = try api.createMethod("Mesh", "create_trimesh_shape");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_trimesh_shape, base, cargs, result);
        return @ptrCast(*godot.Shape, @alignCast(@alignOf(&godot.Shape), result)).*;
    }

    pub fn generateTriangleMesh(self: *const Self) !godot.TriangleMesh {
        if (mbind_generate_triangle_mesh == null) {
            mbind_generate_triangle_mesh = try api.createMethod("Mesh", "generate_triangle_mesh");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_generate_triangle_mesh, base, cargs, result);
        return @ptrCast(*godot.TriangleMesh, @alignCast(@alignOf(&godot.TriangleMesh), result)).*;
    }

    pub fn getAabb(self: *const Self) !godot.AABB {
        if (mbind_get_aabb == null) {
            mbind_get_aabb = try api.createMethod("Mesh", "get_aabb");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_aabb, base, cargs, result);
        return @ptrCast(*godot.AABB, @alignCast(@alignOf(&godot.AABB), result)).*;
    }

    pub fn getFaces(self: *const Self) !godot.PoolVector3Array {
        if (mbind_get_faces == null) {
            mbind_get_faces = try api.createMethod("Mesh", "get_faces");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_faces, base, cargs, result);
        return @ptrCast(*godot.PoolVector3Array, @alignCast(@alignOf(&godot.PoolVector3Array), result)).*;
    }

    pub fn getLightmapSizeHint(self: *const Self) !godot.Vector2 {
        if (mbind_get_lightmap_size_hint == null) {
            mbind_get_lightmap_size_hint = try api.createMethod("Mesh", "get_lightmap_size_hint");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_lightmap_size_hint, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getSurfaceCount(self: *const Self) !i32 {
        if (mbind_get_surface_count == null) {
            mbind_get_surface_count = try api.createMethod("Mesh", "get_surface_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_surface_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setLightmapSizeHint(self: *const Self, arg_size: *const godot.Vector2) !void {
        if (mbind_set_lightmap_size_hint == null) {
            mbind_set_lightmap_size_hint = try api.createMethod("Mesh", "set_lightmap_size_hint");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_lightmap_size_hint, base, cargs, result);
    }

    pub fn surfaceGetArrays(self: *const Self, arg_surf_idx: i32) !godot.Array {
        if (mbind_surface_get_arrays == null) {
            mbind_surface_get_arrays = try api.createMethod("Mesh", "surface_get_arrays");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_surf_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_surface_get_arrays, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn surfaceGetBlendShapeArrays(self: *const Self, arg_surf_idx: i32) !godot.Array {
        if (mbind_surface_get_blend_shape_arrays == null) {
            mbind_surface_get_blend_shape_arrays = try api.createMethod("Mesh", "surface_get_blend_shape_arrays");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_surf_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_surface_get_blend_shape_arrays, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn surfaceGetMaterial(self: *const Self, arg_surf_idx: i32) !godot.Material {
        if (mbind_surface_get_material == null) {
            mbind_surface_get_material = try api.createMethod("Mesh", "surface_get_material");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_surf_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_surface_get_material, base, cargs, result);
        return @ptrCast(*godot.Material, @alignCast(@alignOf(&godot.Material), result)).*;
    }

    pub fn surfaceSetMaterial(self: *const Self, arg_surf_idx: i32, arg_material: *const godot.Material) !void {
        if (mbind_surface_set_material == null) {
            mbind_surface_set_material = try api.createMethod("Mesh", "surface_set_material");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_surf_idx),
            @ptrCast(*const anyopaque, arg_material),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_surface_set_material, base, cargs, result);
    }
};