// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const InputEvent = @import("input_event.zig").InputEvent;

// method bindings
var mbind_get_axis: ?*c_api.godot_method_bind = null;
var mbind_get_axis_value: ?*c_api.godot_method_bind = null;
var mbind_set_axis: ?*c_api.godot_method_bind = null;
var mbind_set_axis_value: ?*c_api.godot_method_bind = null;
var mbind_input_event_joypad_motion_constructor: ?fn () ?*c_api.godot_object = null;

pub const InputEventJoypadMotion = struct {
    const Self = @This();
    const BaseClass = InputEvent;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_input_event_joypad_motion_constructor == null) {
            mbind_input_event_joypad_motion_constructor = try api.createConstructor("InputEventJoypadMotion");
        }
        return api.createObject(Self, mbind_input_event_joypad_motion_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAxis(self: *const Self) !i32 {
        if (mbind_get_axis == null) {
            mbind_get_axis = try api.createMethod("InputEventJoypadMotion", "get_axis");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_axis, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getAxisValue(self: *const Self) !f32 {
        if (mbind_get_axis_value == null) {
            mbind_get_axis_value = try api.createMethod("InputEventJoypadMotion", "get_axis_value");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_axis_value, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn setAxis(self: *const Self, arg_axis: i32) !void {
        if (mbind_set_axis == null) {
            mbind_set_axis = try api.createMethod("InputEventJoypadMotion", "set_axis");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_axis),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_axis, base, cargs, result);
    }

    pub fn setAxisValue(self: *const Self, arg_axis_value: f32) !void {
        if (mbind_set_axis_value == null) {
            mbind_set_axis_value = try api.createMethod("InputEventJoypadMotion", "set_axis_value");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_axis_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_axis_value, base, cargs, result);
    }
};