// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Object = @import("object.zig").Object;

// method bindings
var mbind_action_press: ?*c_api.godot_method_bind = null;
var mbind_action_release: ?*c_api.godot_method_bind = null;
var mbind_add_joy_mapping: ?*c_api.godot_method_bind = null;
var mbind_flush_buffered_events: ?*c_api.godot_method_bind = null;
var mbind_get_accelerometer: ?*c_api.godot_method_bind = null;
var mbind_get_action_raw_strength: ?*c_api.godot_method_bind = null;
var mbind_get_action_strength: ?*c_api.godot_method_bind = null;
var mbind_get_axis: ?*c_api.godot_method_bind = null;
var mbind_get_connected_joypads: ?*c_api.godot_method_bind = null;
var mbind_get_current_cursor_shape: ?*c_api.godot_method_bind = null;
var mbind_get_gravity: ?*c_api.godot_method_bind = null;
var mbind_get_gyroscope: ?*c_api.godot_method_bind = null;
var mbind_get_joy_axis: ?*c_api.godot_method_bind = null;
var mbind_get_joy_axis_index_from_string: ?*c_api.godot_method_bind = null;
var mbind_get_joy_axis_string: ?*c_api.godot_method_bind = null;
var mbind_get_joy_button_index_from_string: ?*c_api.godot_method_bind = null;
var mbind_get_joy_button_string: ?*c_api.godot_method_bind = null;
var mbind_get_joy_guid: ?*c_api.godot_method_bind = null;
var mbind_get_joy_name: ?*c_api.godot_method_bind = null;
var mbind_get_joy_vibration_duration: ?*c_api.godot_method_bind = null;
var mbind_get_joy_vibration_strength: ?*c_api.godot_method_bind = null;
var mbind_get_last_mouse_speed: ?*c_api.godot_method_bind = null;
var mbind_get_magnetometer: ?*c_api.godot_method_bind = null;
var mbind_get_mouse_button_mask: ?*c_api.godot_method_bind = null;
var mbind_get_mouse_mode: ?*c_api.godot_method_bind = null;
var mbind_get_vector: ?*c_api.godot_method_bind = null;
var mbind_is_action_just_pressed: ?*c_api.godot_method_bind = null;
var mbind_is_action_just_released: ?*c_api.godot_method_bind = null;
var mbind_is_action_pressed: ?*c_api.godot_method_bind = null;
var mbind_is_joy_button_pressed: ?*c_api.godot_method_bind = null;
var mbind_is_joy_known: ?*c_api.godot_method_bind = null;
var mbind_is_key_pressed: ?*c_api.godot_method_bind = null;
var mbind_is_mouse_button_pressed: ?*c_api.godot_method_bind = null;
var mbind_is_physical_key_pressed: ?*c_api.godot_method_bind = null;
var mbind_joy_connection_changed: ?*c_api.godot_method_bind = null;
var mbind_parse_input_event: ?*c_api.godot_method_bind = null;
var mbind_remove_joy_mapping: ?*c_api.godot_method_bind = null;
var mbind_set_accelerometer: ?*c_api.godot_method_bind = null;
var mbind_set_custom_mouse_cursor: ?*c_api.godot_method_bind = null;
var mbind_set_default_cursor_shape: ?*c_api.godot_method_bind = null;
var mbind_set_gravity: ?*c_api.godot_method_bind = null;
var mbind_set_gyroscope: ?*c_api.godot_method_bind = null;
var mbind_set_magnetometer: ?*c_api.godot_method_bind = null;
var mbind_set_mouse_mode: ?*c_api.godot_method_bind = null;
var mbind_set_use_accumulated_input: ?*c_api.godot_method_bind = null;
var mbind_start_joy_vibration: ?*c_api.godot_method_bind = null;
var mbind_stop_joy_vibration: ?*c_api.godot_method_bind = null;
var mbind_vibrate_handheld: ?*c_api.godot_method_bind = null;
var mbind_warp_mouse_position: ?*c_api.godot_method_bind = null;
var mbind_input_constructor: ?fn () ?*c_api.godot_object = null;

pub const Input = struct {
    const Self = @This();
    const BaseClass = Object;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_input_constructor == null) {
            mbind_input_constructor = try api.createConstructor("Input");
        }
        return api.createObject(Self, mbind_input_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn actionPress(self: *const Self, arg_action: *const godot.String, arg_strength: f32) !void {
        if (mbind_action_press == null) {
            mbind_action_press = try api.createMethod("Input", "action_press");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_action),
            @ptrCast(*const anyopaque, *arg_strength),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_action_press, base, cargs, result);
    }

    pub fn actionRelease(self: *const Self, arg_action: *const godot.String) !void {
        if (mbind_action_release == null) {
            mbind_action_release = try api.createMethod("Input", "action_release");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_action),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_action_release, base, cargs, result);
    }

    pub fn addJoyMapping(self: *const Self, arg_mapping: *const godot.String, arg_update_existing: bool) !void {
        if (mbind_add_joy_mapping == null) {
            mbind_add_joy_mapping = try api.createMethod("Input", "add_joy_mapping");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mapping),
            @ptrCast(*const anyopaque, *arg_update_existing),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_joy_mapping, base, cargs, result);
    }

    pub fn flushBufferedEvents(self: *const Self) !void {
        if (mbind_flush_buffered_events == null) {
            mbind_flush_buffered_events = try api.createMethod("Input", "flush_buffered_events");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_flush_buffered_events, base, cargs, result);
    }

    pub fn getAccelerometer(self: *const Self) !godot.Vector3 {
        if (mbind_get_accelerometer == null) {
            mbind_get_accelerometer = try api.createMethod("Input", "get_accelerometer");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_accelerometer, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getActionRawStrength(self: *const Self, arg_action: *const godot.String, arg_exact: bool) !f32 {
        if (mbind_get_action_raw_strength == null) {
            mbind_get_action_raw_strength = try api.createMethod("Input", "get_action_raw_strength");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_action),
            @ptrCast(*const anyopaque, *arg_exact),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_action_raw_strength, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getActionStrength(self: *const Self, arg_action: *const godot.String, arg_exact: bool) !f32 {
        if (mbind_get_action_strength == null) {
            mbind_get_action_strength = try api.createMethod("Input", "get_action_strength");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_action),
            @ptrCast(*const anyopaque, *arg_exact),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_action_strength, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getAxis(self: *const Self, arg_negative_action: *const godot.String, arg_positive_action: *const godot.String) !f32 {
        if (mbind_get_axis == null) {
            mbind_get_axis = try api.createMethod("Input", "get_axis");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_negative_action),
            @ptrCast(*const anyopaque, arg_positive_action),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_axis, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getConnectedJoypads(self: *const Self) !godot.Array {
        if (mbind_get_connected_joypads == null) {
            mbind_get_connected_joypads = try api.createMethod("Input", "get_connected_joypads");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_connected_joypads, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getCurrentCursorShape(self: *const Self) !i32 {
        if (mbind_get_current_cursor_shape == null) {
            mbind_get_current_cursor_shape = try api.createMethod("Input", "get_current_cursor_shape");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_current_cursor_shape, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getGravity(self: *const Self) !godot.Vector3 {
        if (mbind_get_gravity == null) {
            mbind_get_gravity = try api.createMethod("Input", "get_gravity");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_gravity, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getGyroscope(self: *const Self) !godot.Vector3 {
        if (mbind_get_gyroscope == null) {
            mbind_get_gyroscope = try api.createMethod("Input", "get_gyroscope");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_gyroscope, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getJoyAxis(self: *const Self, arg_device: i32, arg_axis: i32) !f32 {
        if (mbind_get_joy_axis == null) {
            mbind_get_joy_axis = try api.createMethod("Input", "get_joy_axis");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_device),
            @ptrCast(*const anyopaque, *arg_axis),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joy_axis, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getJoyAxisIndexFromString(self: *const Self, arg_axis: *const godot.String) !i32 {
        if (mbind_get_joy_axis_index_from_string == null) {
            mbind_get_joy_axis_index_from_string = try api.createMethod("Input", "get_joy_axis_index_from_string");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_axis),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joy_axis_index_from_string, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getJoyAxisString(self: *const Self, arg_axis_index: i32) !godot.String {
        if (mbind_get_joy_axis_string == null) {
            mbind_get_joy_axis_string = try api.createMethod("Input", "get_joy_axis_string");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_axis_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joy_axis_string, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getJoyButtonIndexFromString(self: *const Self, arg_button: *const godot.String) !i32 {
        if (mbind_get_joy_button_index_from_string == null) {
            mbind_get_joy_button_index_from_string = try api.createMethod("Input", "get_joy_button_index_from_string");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_button),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joy_button_index_from_string, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getJoyButtonString(self: *const Self, arg_button_index: i32) !godot.String {
        if (mbind_get_joy_button_string == null) {
            mbind_get_joy_button_string = try api.createMethod("Input", "get_joy_button_string");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_button_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joy_button_string, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getJoyGuid(self: *const Self, arg_device: i32) !godot.String {
        if (mbind_get_joy_guid == null) {
            mbind_get_joy_guid = try api.createMethod("Input", "get_joy_guid");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_device),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joy_guid, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getJoyName(self: *const Self, arg_device: i32) !godot.String {
        if (mbind_get_joy_name == null) {
            mbind_get_joy_name = try api.createMethod("Input", "get_joy_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_device),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joy_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getJoyVibrationDuration(self: *const Self, arg_device: i32) !f32 {
        if (mbind_get_joy_vibration_duration == null) {
            mbind_get_joy_vibration_duration = try api.createMethod("Input", "get_joy_vibration_duration");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_device),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joy_vibration_duration, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getJoyVibrationStrength(self: *const Self, arg_device: i32) !godot.Vector2 {
        if (mbind_get_joy_vibration_strength == null) {
            mbind_get_joy_vibration_strength = try api.createMethod("Input", "get_joy_vibration_strength");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_device),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_joy_vibration_strength, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getLastMouseSpeed(self: *const Self) !godot.Vector2 {
        if (mbind_get_last_mouse_speed == null) {
            mbind_get_last_mouse_speed = try api.createMethod("Input", "get_last_mouse_speed");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_last_mouse_speed, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn getMagnetometer(self: *const Self) !godot.Vector3 {
        if (mbind_get_magnetometer == null) {
            mbind_get_magnetometer = try api.createMethod("Input", "get_magnetometer");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_magnetometer, base, cargs, result);
        return @ptrCast(*godot.Vector3, @alignCast(@alignOf(&godot.Vector3), result)).*;
    }

    pub fn getMouseButtonMask(self: *const Self) !i32 {
        if (mbind_get_mouse_button_mask == null) {
            mbind_get_mouse_button_mask = try api.createMethod("Input", "get_mouse_button_mask");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mouse_button_mask, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getMouseMode(self: *const Self) !i32 {
        if (mbind_get_mouse_mode == null) {
            mbind_get_mouse_mode = try api.createMethod("Input", "get_mouse_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mouse_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getVector(self: *const Self, arg_negative_x: *const godot.String, arg_positive_x: *const godot.String, arg_negative_y: *const godot.String, arg_positive_y: *const godot.String, arg_deadzone: f32) !godot.Vector2 {
        if (mbind_get_vector == null) {
            mbind_get_vector = try api.createMethod("Input", "get_vector");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_negative_x),
            @ptrCast(*const anyopaque, arg_positive_x),
            @ptrCast(*const anyopaque, arg_negative_y),
            @ptrCast(*const anyopaque, arg_positive_y),
            @ptrCast(*const anyopaque, *arg_deadzone),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_vector, base, cargs, result);
        return @ptrCast(*godot.Vector2, @alignCast(@alignOf(&godot.Vector2), result)).*;
    }

    pub fn isActionJustPressed(self: *const Self, arg_action: *const godot.String, arg_exact: bool) !bool {
        if (mbind_is_action_just_pressed == null) {
            mbind_is_action_just_pressed = try api.createMethod("Input", "is_action_just_pressed");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_action),
            @ptrCast(*const anyopaque, *arg_exact),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_action_just_pressed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isActionJustReleased(self: *const Self, arg_action: *const godot.String, arg_exact: bool) !bool {
        if (mbind_is_action_just_released == null) {
            mbind_is_action_just_released = try api.createMethod("Input", "is_action_just_released");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_action),
            @ptrCast(*const anyopaque, *arg_exact),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_action_just_released, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isActionPressed(self: *const Self, arg_action: *const godot.String, arg_exact: bool) !bool {
        if (mbind_is_action_pressed == null) {
            mbind_is_action_pressed = try api.createMethod("Input", "is_action_pressed");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_action),
            @ptrCast(*const anyopaque, *arg_exact),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_action_pressed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isJoyButtonPressed(self: *const Self, arg_device: i32, arg_button: i32) !bool {
        if (mbind_is_joy_button_pressed == null) {
            mbind_is_joy_button_pressed = try api.createMethod("Input", "is_joy_button_pressed");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_device),
            @ptrCast(*const anyopaque, *arg_button),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_joy_button_pressed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isJoyKnown(self: *const Self, arg_device: i32) !bool {
        if (mbind_is_joy_known == null) {
            mbind_is_joy_known = try api.createMethod("Input", "is_joy_known");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_device),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_joy_known, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isKeyPressed(self: *const Self, arg_scancode: i32) !bool {
        if (mbind_is_key_pressed == null) {
            mbind_is_key_pressed = try api.createMethod("Input", "is_key_pressed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_scancode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_key_pressed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isMouseButtonPressed(self: *const Self, arg_button: i32) !bool {
        if (mbind_is_mouse_button_pressed == null) {
            mbind_is_mouse_button_pressed = try api.createMethod("Input", "is_mouse_button_pressed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_button),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_mouse_button_pressed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isPhysicalKeyPressed(self: *const Self, arg_scancode: i32) !bool {
        if (mbind_is_physical_key_pressed == null) {
            mbind_is_physical_key_pressed = try api.createMethod("Input", "is_physical_key_pressed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_scancode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_physical_key_pressed, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn joyConnectionChanged(self: *const Self, arg_device: i32, arg_connected: bool, arg_name: *const godot.String, arg_guid: *const godot.String) !void {
        if (mbind_joy_connection_changed == null) {
            mbind_joy_connection_changed = try api.createMethod("Input", "joy_connection_changed");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_device),
            @ptrCast(*const anyopaque, *arg_connected),
            @ptrCast(*const anyopaque, arg_name),
            @ptrCast(*const anyopaque, arg_guid),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_joy_connection_changed, base, cargs, result);
    }

    pub fn parseInputEvent(self: *const Self, arg_event: *const godot.InputEvent) !void {
        if (mbind_parse_input_event == null) {
            mbind_parse_input_event = try api.createMethod("Input", "parse_input_event");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_event),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_parse_input_event, base, cargs, result);
    }

    pub fn removeJoyMapping(self: *const Self, arg_guid: *const godot.String) !void {
        if (mbind_remove_joy_mapping == null) {
            mbind_remove_joy_mapping = try api.createMethod("Input", "remove_joy_mapping");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_guid),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_joy_mapping, base, cargs, result);
    }

    pub fn setAccelerometer(self: *const Self, arg_value: *const godot.Vector3) !void {
        if (mbind_set_accelerometer == null) {
            mbind_set_accelerometer = try api.createMethod("Input", "set_accelerometer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_accelerometer, base, cargs, result);
    }

    pub fn setCustomMouseCursor(self: *const Self, arg_image: *const godot.Resource, arg_shape: i32, arg_hotspot: *const godot.Vector2) !void {
        if (mbind_set_custom_mouse_cursor == null) {
            mbind_set_custom_mouse_cursor = try api.createMethod("Input", "set_custom_mouse_cursor");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_image),
            @ptrCast(*const anyopaque, *arg_shape),
            @ptrCast(*const anyopaque, arg_hotspot),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_mouse_cursor, base, cargs, result);
    }

    pub fn setDefaultCursorShape(self: *const Self, arg_shape: i32) !void {
        if (mbind_set_default_cursor_shape == null) {
            mbind_set_default_cursor_shape = try api.createMethod("Input", "set_default_cursor_shape");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_shape),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_default_cursor_shape, base, cargs, result);
    }

    pub fn setGravity(self: *const Self, arg_value: *const godot.Vector3) !void {
        if (mbind_set_gravity == null) {
            mbind_set_gravity = try api.createMethod("Input", "set_gravity");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_gravity, base, cargs, result);
    }

    pub fn setGyroscope(self: *const Self, arg_value: *const godot.Vector3) !void {
        if (mbind_set_gyroscope == null) {
            mbind_set_gyroscope = try api.createMethod("Input", "set_gyroscope");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_gyroscope, base, cargs, result);
    }

    pub fn setMagnetometer(self: *const Self, arg_value: *const godot.Vector3) !void {
        if (mbind_set_magnetometer == null) {
            mbind_set_magnetometer = try api.createMethod("Input", "set_magnetometer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_magnetometer, base, cargs, result);
    }

    pub fn setMouseMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_mouse_mode == null) {
            mbind_set_mouse_mode = try api.createMethod("Input", "set_mouse_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mouse_mode, base, cargs, result);
    }

    pub fn setUseAccumulatedInput(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_use_accumulated_input == null) {
            mbind_set_use_accumulated_input = try api.createMethod("Input", "set_use_accumulated_input");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_use_accumulated_input, base, cargs, result);
    }

    pub fn startJoyVibration(self: *const Self, arg_device: i32, arg_weak_magnitude: f32, arg_strong_magnitude: f32, arg_duration: f32) !void {
        if (mbind_start_joy_vibration == null) {
            mbind_start_joy_vibration = try api.createMethod("Input", "start_joy_vibration");
        }

        var result: ?*anyopaque = null;
        var args: [4]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_device),
            @ptrCast(*const anyopaque, *arg_weak_magnitude),
            @ptrCast(*const anyopaque, *arg_strong_magnitude),
            @ptrCast(*const anyopaque, *arg_duration),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_start_joy_vibration, base, cargs, result);
    }

    pub fn stopJoyVibration(self: *const Self, arg_device: i32) !void {
        if (mbind_stop_joy_vibration == null) {
            mbind_stop_joy_vibration = try api.createMethod("Input", "stop_joy_vibration");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_device),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_stop_joy_vibration, base, cargs, result);
    }

    pub fn vibrateHandheld(self: *const Self, arg_duration_ms: i32) !void {
        if (mbind_vibrate_handheld == null) {
            mbind_vibrate_handheld = try api.createMethod("Input", "vibrate_handheld");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_duration_ms),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_vibrate_handheld, base, cargs, result);
    }

    pub fn warpMousePosition(self: *const Self, arg_to: *const godot.Vector2) !void {
        if (mbind_warp_mouse_position == null) {
            mbind_warp_mouse_position = try api.createMethod("Input", "warp_mouse_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_to),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_warp_mouse_position, base, cargs, result);
    }
};