// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const VBoxContainer = @import("vbox_container.zig").VBoxContainer;

// method bindings
var mbind_can_drop_data_fw: ?*c_api.godot_method_bind = null;
var mbind_drop_data_fw: ?*c_api.godot_method_bind = null;
var mbind_get_drag_data_fw: ?*c_api.godot_method_bind = null;
var mbind_navigate_to_path: ?*c_api.godot_method_bind = null;
var mbind_file_system_dock_constructor: ?fn () ?*c_api.godot_object = null;

pub const FileSystemDock = struct {
    const Self = @This();
    const BaseClass = VBoxContainer;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_file_system_dock_constructor == null) {
            mbind_file_system_dock_constructor = try api.createConstructor("FileSystemDock");
        }
        return api.createObject(Self, mbind_file_system_dock_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn canDropDataFw(self: *const Self, arg_point: *const godot.Vector2, arg_data: *const godot.Variant, arg_from: *const godot.Control) !bool {
        if (mbind_can_drop_data_fw == null) {
            mbind_can_drop_data_fw = try api.createMethod("FileSystemDock", "can_drop_data_fw");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point),
            @ptrCast(*const anyopaque, arg_data),
            @ptrCast(*const anyopaque, arg_from),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_can_drop_data_fw, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn dropDataFw(self: *const Self, arg_point: *const godot.Vector2, arg_data: *const godot.Variant, arg_from: *const godot.Control) !void {
        if (mbind_drop_data_fw == null) {
            mbind_drop_data_fw = try api.createMethod("FileSystemDock", "drop_data_fw");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point),
            @ptrCast(*const anyopaque, arg_data),
            @ptrCast(*const anyopaque, arg_from),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_drop_data_fw, base, cargs, result);
    }

    pub fn getDragDataFw(self: *const Self, arg_point: *const godot.Vector2, arg_from: *const godot.Control) !godot.Variant {
        if (mbind_get_drag_data_fw == null) {
            mbind_get_drag_data_fw = try api.createMethod("FileSystemDock", "get_drag_data_fw");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_point),
            @ptrCast(*const anyopaque, arg_from),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_drag_data_fw, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn navigateToPath(self: *const Self, arg_path: *const godot.String) !void {
        if (mbind_navigate_to_path == null) {
            mbind_navigate_to_path = try api.createMethod("FileSystemDock", "navigate_to_path");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_navigate_to_path, base, cargs, result);
    }
};