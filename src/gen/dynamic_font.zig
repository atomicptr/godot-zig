// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Font = @import("font.zig").Font;

// method bindings
var mbind_add_fallback: ?*c_api.godot_method_bind = null;
var mbind_get_available_chars: ?*c_api.godot_method_bind = null;
var mbind_get_fallback: ?*c_api.godot_method_bind = null;
var mbind_get_fallback_count: ?*c_api.godot_method_bind = null;
var mbind_get_font_data: ?*c_api.godot_method_bind = null;
var mbind_get_outline_color: ?*c_api.godot_method_bind = null;
var mbind_get_outline_size: ?*c_api.godot_method_bind = null;
var mbind_get_size: ?*c_api.godot_method_bind = null;
var mbind_get_spacing: ?*c_api.godot_method_bind = null;
var mbind_get_use_filter: ?*c_api.godot_method_bind = null;
var mbind_get_use_mipmaps: ?*c_api.godot_method_bind = null;
var mbind_remove_fallback: ?*c_api.godot_method_bind = null;
var mbind_set_fallback: ?*c_api.godot_method_bind = null;
var mbind_set_font_data: ?*c_api.godot_method_bind = null;
var mbind_set_outline_color: ?*c_api.godot_method_bind = null;
var mbind_set_outline_size: ?*c_api.godot_method_bind = null;
var mbind_set_size: ?*c_api.godot_method_bind = null;
var mbind_set_spacing: ?*c_api.godot_method_bind = null;
var mbind_set_use_filter: ?*c_api.godot_method_bind = null;
var mbind_set_use_mipmaps: ?*c_api.godot_method_bind = null;
var mbind_dynamic_font_constructor: ?fn () ?*c_api.godot_object = null;

pub const DynamicFont = struct {
    const Self = @This();
    const BaseClass = Font;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_dynamic_font_constructor == null) {
            mbind_dynamic_font_constructor = try api.createConstructor("DynamicFont");
        }
        return api.createObject(Self, mbind_dynamic_font_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addFallback(self: *const Self, arg_data: *const godot.DynamicFontData) !void {
        if (mbind_add_fallback == null) {
            mbind_add_fallback = try api.createMethod("DynamicFont", "add_fallback");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_data),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_fallback, base, cargs, result);
    }

    pub fn getAvailableChars(self: *const Self) !godot.String {
        if (mbind_get_available_chars == null) {
            mbind_get_available_chars = try api.createMethod("DynamicFont", "get_available_chars");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_available_chars, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getFallback(self: *const Self, arg_idx: i32) !godot.DynamicFontData {
        if (mbind_get_fallback == null) {
            mbind_get_fallback = try api.createMethod("DynamicFont", "get_fallback");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fallback, base, cargs, result);
        return @ptrCast(*godot.DynamicFontData, @alignCast(@alignOf(&godot.DynamicFontData), result)).*;
    }

    pub fn getFallbackCount(self: *const Self) !i32 {
        if (mbind_get_fallback_count == null) {
            mbind_get_fallback_count = try api.createMethod("DynamicFont", "get_fallback_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_fallback_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getFontData(self: *const Self) !godot.DynamicFontData {
        if (mbind_get_font_data == null) {
            mbind_get_font_data = try api.createMethod("DynamicFont", "get_font_data");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_font_data, base, cargs, result);
        return @ptrCast(*godot.DynamicFontData, @alignCast(@alignOf(&godot.DynamicFontData), result)).*;
    }

    pub fn getOutlineColor(self: *const Self) !godot.Color {
        if (mbind_get_outline_color == null) {
            mbind_get_outline_color = try api.createMethod("DynamicFont", "get_outline_color");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_outline_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getOutlineSize(self: *const Self) !i32 {
        if (mbind_get_outline_size == null) {
            mbind_get_outline_size = try api.createMethod("DynamicFont", "get_outline_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_outline_size, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSize(self: *const Self) !i32 {
        if (mbind_get_size == null) {
            mbind_get_size = try api.createMethod("DynamicFont", "get_size");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_size, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSpacing(self: *const Self, arg_type: i32) !i32 {
        if (mbind_get_spacing == null) {
            mbind_get_spacing = try api.createMethod("DynamicFont", "get_spacing");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_type),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_spacing, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getUseFilter(self: *const Self) !bool {
        if (mbind_get_use_filter == null) {
            mbind_get_use_filter = try api.createMethod("DynamicFont", "get_use_filter");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_use_filter, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn getUseMipmaps(self: *const Self) !bool {
        if (mbind_get_use_mipmaps == null) {
            mbind_get_use_mipmaps = try api.createMethod("DynamicFont", "get_use_mipmaps");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_use_mipmaps, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn removeFallback(self: *const Self, arg_idx: i32) !void {
        if (mbind_remove_fallback == null) {
            mbind_remove_fallback = try api.createMethod("DynamicFont", "remove_fallback");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_fallback, base, cargs, result);
    }

    pub fn setFallback(self: *const Self, arg_idx: i32, arg_data: *const godot.DynamicFontData) !void {
        if (mbind_set_fallback == null) {
            mbind_set_fallback = try api.createMethod("DynamicFont", "set_fallback");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_idx),
            @ptrCast(*const anyopaque, arg_data),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_fallback, base, cargs, result);
    }

    pub fn setFontData(self: *const Self, arg_data: *const godot.DynamicFontData) !void {
        if (mbind_set_font_data == null) {
            mbind_set_font_data = try api.createMethod("DynamicFont", "set_font_data");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_data),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_font_data, base, cargs, result);
    }

    pub fn setOutlineColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_set_outline_color == null) {
            mbind_set_outline_color = try api.createMethod("DynamicFont", "set_outline_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_outline_color, base, cargs, result);
    }

    pub fn setOutlineSize(self: *const Self, arg_size: i32) !void {
        if (mbind_set_outline_size == null) {
            mbind_set_outline_size = try api.createMethod("DynamicFont", "set_outline_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_size),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_outline_size, base, cargs, result);
    }

    pub fn setSize(self: *const Self, arg_data: i32) !void {
        if (mbind_set_size == null) {
            mbind_set_size = try api.createMethod("DynamicFont", "set_size");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_data),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_size, base, cargs, result);
    }

    pub fn setSpacing(self: *const Self, arg_type: i32, arg_value: i32) !void {
        if (mbind_set_spacing == null) {
            mbind_set_spacing = try api.createMethod("DynamicFont", "set_spacing");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_type),
            @ptrCast(*const anyopaque, *arg_value),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_spacing, base, cargs, result);
    }

    pub fn setUseFilter(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_use_filter == null) {
            mbind_set_use_filter = try api.createMethod("DynamicFont", "set_use_filter");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_use_filter, base, cargs, result);
    }

    pub fn setUseMipmaps(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_use_mipmaps == null) {
            mbind_set_use_mipmaps = try api.createMethod("DynamicFont", "set_use_mipmaps");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_use_mipmaps, base, cargs, result);
    }
};