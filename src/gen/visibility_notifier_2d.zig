// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Node2D = @import("node_2d.zig").Node2D;

// method bindings
var mbind_get_rect: ?*c_api.godot_method_bind = null;
var mbind_is_on_screen: ?*c_api.godot_method_bind = null;
var mbind_set_rect: ?*c_api.godot_method_bind = null;
var mbind_visibility_notifier_2d_constructor: ?fn () ?*c_api.godot_object = null;

pub const VisibilityNotifier2D = struct {
    const Self = @This();
    const BaseClass = Node2D;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_visibility_notifier_2d_constructor == null) {
            mbind_visibility_notifier_2d_constructor = try api.createConstructor("VisibilityNotifier2D");
        }
        return api.createObject(Self, mbind_visibility_notifier_2d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getRect(self: *const Self) !godot.Rect2 {
        if (mbind_get_rect == null) {
            mbind_get_rect = try api.createMethod("VisibilityNotifier2D", "get_rect");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_rect, base, cargs, result);
        return @ptrCast(*godot.Rect2, @alignCast(@alignOf(&godot.Rect2), result)).*;
    }

    pub fn isOnScreen(self: *const Self) !bool {
        if (mbind_is_on_screen == null) {
            mbind_is_on_screen = try api.createMethod("VisibilityNotifier2D", "is_on_screen");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_on_screen, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setRect(self: *const Self, arg_rect: *const godot.Rect2) !void {
        if (mbind_set_rect == null) {
            mbind_set_rect = try api.createMethod("VisibilityNotifier2D", "set_rect");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_rect),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_rect, base, cargs, result);
    }
};