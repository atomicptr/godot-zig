// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_get_feature_name: ?*c_api.godot_method_bind = null;
var mbind_is_class_disabled: ?*c_api.godot_method_bind = null;
var mbind_is_class_editor_disabled: ?*c_api.godot_method_bind = null;
var mbind_is_class_property_disabled: ?*c_api.godot_method_bind = null;
var mbind_is_feature_disabled: ?*c_api.godot_method_bind = null;
var mbind_load_from_file: ?*c_api.godot_method_bind = null;
var mbind_save_to_file: ?*c_api.godot_method_bind = null;
var mbind_set_disable_class: ?*c_api.godot_method_bind = null;
var mbind_set_disable_class_editor: ?*c_api.godot_method_bind = null;
var mbind_set_disable_class_property: ?*c_api.godot_method_bind = null;
var mbind_set_disable_feature: ?*c_api.godot_method_bind = null;
var mbind_editor_feature_profile_constructor: ?fn () ?*c_api.godot_object = null;

pub const EditorFeatureProfile = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_editor_feature_profile_constructor == null) {
            mbind_editor_feature_profile_constructor = try api.createConstructor("EditorFeatureProfile");
        }
        return api.createObject(Self, mbind_editor_feature_profile_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getFeatureName(self: *const Self, arg_feature: i32) !godot.String {
        if (mbind_get_feature_name == null) {
            mbind_get_feature_name = try api.createMethod("EditorFeatureProfile", "get_feature_name");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_feature),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_feature_name, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn isClassDisabled(self: *const Self, arg_class_name: *const godot.String) !bool {
        if (mbind_is_class_disabled == null) {
            mbind_is_class_disabled = try api.createMethod("EditorFeatureProfile", "is_class_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_class_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isClassEditorDisabled(self: *const Self, arg_class_name: *const godot.String) !bool {
        if (mbind_is_class_editor_disabled == null) {
            mbind_is_class_editor_disabled = try api.createMethod("EditorFeatureProfile", "is_class_editor_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class_name),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_class_editor_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isClassPropertyDisabled(self: *const Self, arg_class_name: *const godot.String, arg_property: *const godot.String) !bool {
        if (mbind_is_class_property_disabled == null) {
            mbind_is_class_property_disabled = try api.createMethod("EditorFeatureProfile", "is_class_property_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class_name),
            @ptrCast(*const anyopaque, arg_property),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_class_property_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isFeatureDisabled(self: *const Self, arg_feature: i32) !bool {
        if (mbind_is_feature_disabled == null) {
            mbind_is_feature_disabled = try api.createMethod("EditorFeatureProfile", "is_feature_disabled");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_feature),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_feature_disabled, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn loadFromFile(self: *const Self, arg_path: *const godot.String) !i32 {
        if (mbind_load_from_file == null) {
            mbind_load_from_file = try api.createMethod("EditorFeatureProfile", "load_from_file");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_load_from_file, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn saveToFile(self: *const Self, arg_path: *const godot.String) !i32 {
        if (mbind_save_to_file == null) {
            mbind_save_to_file = try api.createMethod("EditorFeatureProfile", "save_to_file");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_save_to_file, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setDisableClass(self: *const Self, arg_class_name: *const godot.String, arg_disable: bool) !void {
        if (mbind_set_disable_class == null) {
            mbind_set_disable_class = try api.createMethod("EditorFeatureProfile", "set_disable_class");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class_name),
            @ptrCast(*const anyopaque, *arg_disable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disable_class, base, cargs, result);
    }

    pub fn setDisableClassEditor(self: *const Self, arg_class_name: *const godot.String, arg_disable: bool) !void {
        if (mbind_set_disable_class_editor == null) {
            mbind_set_disable_class_editor = try api.createMethod("EditorFeatureProfile", "set_disable_class_editor");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class_name),
            @ptrCast(*const anyopaque, *arg_disable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disable_class_editor, base, cargs, result);
    }

    pub fn setDisableClassProperty(self: *const Self, arg_class_name: *const godot.String, arg_property: *const godot.String, arg_disable: bool) !void {
        if (mbind_set_disable_class_property == null) {
            mbind_set_disable_class_property = try api.createMethod("EditorFeatureProfile", "set_disable_class_property");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_class_name),
            @ptrCast(*const anyopaque, arg_property),
            @ptrCast(*const anyopaque, *arg_disable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disable_class_property, base, cargs, result);
    }

    pub fn setDisableFeature(self: *const Self, arg_feature: i32, arg_disable: bool) !void {
        if (mbind_set_disable_feature == null) {
            mbind_set_disable_feature = try api.createMethod("EditorFeatureProfile", "set_disable_feature");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_feature),
            @ptrCast(*const anyopaque, *arg_disable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_disable_feature, base, cargs, result);
    }
};