// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Resource = @import("resource.zig").Resource;

// method bindings
var mbind_get_blend_weights: ?*c_api.godot_method_bind = null;
var mbind_get_instance_materials: ?*c_api.godot_method_bind = null;
var mbind_get_mesh: ?*c_api.godot_method_bind = null;
var mbind_set_blend_weights: ?*c_api.godot_method_bind = null;
var mbind_set_instance_materials: ?*c_api.godot_method_bind = null;
var mbind_set_mesh: ?*c_api.godot_method_bind = null;
var mbind_gltfmesh_constructor: ?fn () ?*c_api.godot_object = null;

pub const GLTFMesh = struct {
    const Self = @This();
    const BaseClass = Resource;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_gltfmesh_constructor == null) {
            mbind_gltfmesh_constructor = try api.createConstructor("GLTFMesh");
        }
        return api.createObject(Self, mbind_gltfmesh_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBlendWeights(self: *const Self) !godot.PoolRealArray {
        if (mbind_get_blend_weights == null) {
            mbind_get_blend_weights = try api.createMethod("GLTFMesh", "get_blend_weights");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_blend_weights, base, cargs, result);
        return @ptrCast(*godot.PoolRealArray, @alignCast(@alignOf(&godot.PoolRealArray), result)).*;
    }

    pub fn getInstanceMaterials(self: *const Self) !godot.Array {
        if (mbind_get_instance_materials == null) {
            mbind_get_instance_materials = try api.createMethod("GLTFMesh", "get_instance_materials");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_instance_materials, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getMesh(self: *const Self) !godot.ArrayMesh {
        if (mbind_get_mesh == null) {
            mbind_get_mesh = try api.createMethod("GLTFMesh", "get_mesh");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mesh, base, cargs, result);
        return @ptrCast(*godot.ArrayMesh, @alignCast(@alignOf(&godot.ArrayMesh), result)).*;
    }

    pub fn setBlendWeights(self: *const Self, arg_blend_weights: *const godot.PoolRealArray) !void {
        if (mbind_set_blend_weights == null) {
            mbind_set_blend_weights = try api.createMethod("GLTFMesh", "set_blend_weights");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_blend_weights),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_blend_weights, base, cargs, result);
    }

    pub fn setInstanceMaterials(self: *const Self, arg_instance_materials: *const godot.Array) !void {
        if (mbind_set_instance_materials == null) {
            mbind_set_instance_materials = try api.createMethod("GLTFMesh", "set_instance_materials");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_instance_materials),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_instance_materials, base, cargs, result);
    }

    pub fn setMesh(self: *const Self, arg_mesh: *const godot.ArrayMesh) !void {
        if (mbind_set_mesh == null) {
            mbind_set_mesh = try api.createMethod("GLTFMesh", "set_mesh");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mesh),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mesh, base, cargs, result);
    }
};