// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const VisualScriptNode = @import("visual_script_node.zig").VisualScriptNode;

// method bindings
var mbind_get_base_path: ?*c_api.godot_method_bind = null;
var mbind_get_base_type: ?*c_api.godot_method_bind = null;
var mbind_get_call_mode: ?*c_api.godot_method_bind = null;
var mbind_get_signal: ?*c_api.godot_method_bind = null;
var mbind_set_base_path: ?*c_api.godot_method_bind = null;
var mbind_set_base_type: ?*c_api.godot_method_bind = null;
var mbind_set_call_mode: ?*c_api.godot_method_bind = null;
var mbind_set_signal: ?*c_api.godot_method_bind = null;
var mbind_visual_script_yield_signal_constructor: ?fn () ?*c_api.godot_object = null;

pub const VisualScriptYieldSignal = struct {
    const Self = @This();
    const BaseClass = VisualScriptNode;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_visual_script_yield_signal_constructor == null) {
            mbind_visual_script_yield_signal_constructor = try api.createConstructor("VisualScriptYieldSignal");
        }
        return api.createObject(Self, mbind_visual_script_yield_signal_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getBasePath(self: *const Self) !godot.NodePath {
        if (mbind_get_base_path == null) {
            mbind_get_base_path = try api.createMethod("VisualScriptYieldSignal", "get_base_path");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_base_path, base, cargs, result);
        return @ptrCast(*godot.NodePath, @alignCast(@alignOf(&godot.NodePath), result)).*;
    }

    pub fn getBaseType(self: *const Self) !godot.String {
        if (mbind_get_base_type == null) {
            mbind_get_base_type = try api.createMethod("VisualScriptYieldSignal", "get_base_type");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_base_type, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getCallMode(self: *const Self) !i32 {
        if (mbind_get_call_mode == null) {
            mbind_get_call_mode = try api.createMethod("VisualScriptYieldSignal", "get_call_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_call_mode, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getSignal(self: *const Self) !godot.String {
        if (mbind_get_signal == null) {
            mbind_get_signal = try api.createMethod("VisualScriptYieldSignal", "get_signal");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_signal, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn setBasePath(self: *const Self, arg_base_path: *const godot.NodePath) !void {
        if (mbind_set_base_path == null) {
            mbind_set_base_path = try api.createMethod("VisualScriptYieldSignal", "set_base_path");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_base_path),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_base_path, base, cargs, result);
    }

    pub fn setBaseType(self: *const Self, arg_base_type: *const godot.String) !void {
        if (mbind_set_base_type == null) {
            mbind_set_base_type = try api.createMethod("VisualScriptYieldSignal", "set_base_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_base_type),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_base_type, base, cargs, result);
    }

    pub fn setCallMode(self: *const Self, arg_mode: i32) !void {
        if (mbind_set_call_mode == null) {
            mbind_set_call_mode = try api.createMethod("VisualScriptYieldSignal", "set_call_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_mode),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_call_mode, base, cargs, result);
    }

    pub fn setSignal(self: *const Self, arg_signal: *const godot.String) !void {
        if (mbind_set_signal == null) {
            mbind_set_signal = try api.createMethod("VisualScriptYieldSignal", "set_signal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_signal),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_signal, base, cargs, result);
    }
};