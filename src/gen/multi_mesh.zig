// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_aabb: ?*c_api.godot_method_bind = null;
var mbind_get_color_format: ?*c_api.godot_method_bind = null;
var mbind_get_custom_data_format: ?*c_api.godot_method_bind = null;
var mbind_get_instance_color: ?*c_api.godot_method_bind = null;
var mbind_get_instance_count: ?*c_api.godot_method_bind = null;
var mbind_get_instance_custom_data: ?*c_api.godot_method_bind = null;
var mbind_get_instance_transform: ?*c_api.godot_method_bind = null;
var mbind_get_instance_transform_2d: ?*c_api.godot_method_bind = null;
var mbind_get_mesh: ?*c_api.godot_method_bind = null;
var mbind_get_transform_format: ?*c_api.godot_method_bind = null;
var mbind_get_visible_instance_count: ?*c_api.godot_method_bind = null;
var mbind_set_as_bulk_array: ?*c_api.godot_method_bind = null;
var mbind_set_color_format: ?*c_api.godot_method_bind = null;
var mbind_set_custom_data_format: ?*c_api.godot_method_bind = null;
var mbind_set_instance_color: ?*c_api.godot_method_bind = null;
var mbind_set_instance_count: ?*c_api.godot_method_bind = null;
var mbind_set_instance_custom_data: ?*c_api.godot_method_bind = null;
var mbind_set_instance_transform: ?*c_api.godot_method_bind = null;
var mbind_set_instance_transform_2d: ?*c_api.godot_method_bind = null;
var mbind_set_mesh: ?*c_api.godot_method_bind = null;
var mbind_set_transform_format: ?*c_api.godot_method_bind = null;
var mbind_set_visible_instance_count: ?*c_api.godot_method_bind = null;
var mbind_multi_mesh_constructor: ?fn () ?*c_api.godot_object = null;

pub const MultiMesh = struct {
    const Self = @This();
    pub const BaseClass = godot.Resource;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_multi_mesh_constructor == null) {
            mbind_multi_mesh_constructor = try api.createConstructor("MultiMesh");
        }
        return api.createObject(Self, mbind_multi_mesh_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getAabb(self: *const Self) !godot.AABB {
        if (mbind_get_aabb == null) {
            mbind_get_aabb = try api.createMethod("MultiMesh", "get_aabb");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_aabb, base, cargs, result);
        return @ptrCast(*godot.AABB, @alignCast(@alignOf(&godot.AABB), result)).*;
    }

    pub fn getColorFormat(self: *const Self) !i32 {
        if (mbind_get_color_format == null) {
            mbind_get_color_format = try api.createMethod("MultiMesh", "get_color_format");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_color_format, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getCustomDataFormat(self: *const Self) !i32 {
        if (mbind_get_custom_data_format == null) {
            mbind_get_custom_data_format = try api.createMethod("MultiMesh", "get_custom_data_format");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_custom_data_format, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getInstanceColor(self: *const Self, arg_instance: i32) !godot.Color {
        if (mbind_get_instance_color == null) {
            mbind_get_instance_color = try api.createMethod("MultiMesh", "get_instance_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_instance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_instance_color, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getInstanceCount(self: *const Self) !i32 {
        if (mbind_get_instance_count == null) {
            mbind_get_instance_count = try api.createMethod("MultiMesh", "get_instance_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_instance_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getInstanceCustomData(self: *const Self, arg_instance: i32) !godot.Color {
        if (mbind_get_instance_custom_data == null) {
            mbind_get_instance_custom_data = try api.createMethod("MultiMesh", "get_instance_custom_data");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_instance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_instance_custom_data, base, cargs, result);
        return @ptrCast(*godot.Color, @alignCast(@alignOf(&godot.Color), result)).*;
    }

    pub fn getInstanceTransform(self: *const Self, arg_instance: i32) !godot.Transform {
        if (mbind_get_instance_transform == null) {
            mbind_get_instance_transform = try api.createMethod("MultiMesh", "get_instance_transform");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_instance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_instance_transform, base, cargs, result);
        return @ptrCast(*godot.Transform, @alignCast(@alignOf(&godot.Transform), result)).*;
    }

    pub fn getInstanceTransform2d(self: *const Self, arg_instance: i32) !godot.Transform2D {
        if (mbind_get_instance_transform_2d == null) {
            mbind_get_instance_transform_2d = try api.createMethod("MultiMesh", "get_instance_transform_2d");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_instance),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_instance_transform_2d, base, cargs, result);
        return @ptrCast(*godot.Transform2D, @alignCast(@alignOf(&godot.Transform2D), result)).*;
    }

    pub fn getMesh(self: *const Self) !godot.Mesh {
        if (mbind_get_mesh == null) {
            mbind_get_mesh = try api.createMethod("MultiMesh", "get_mesh");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_mesh, base, cargs, result);
        return @ptrCast(*godot.Mesh, @alignCast(@alignOf(&godot.Mesh), result)).*;
    }

    pub fn getTransformFormat(self: *const Self) !i32 {
        if (mbind_get_transform_format == null) {
            mbind_get_transform_format = try api.createMethod("MultiMesh", "get_transform_format");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_transform_format, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getVisibleInstanceCount(self: *const Self) !i32 {
        if (mbind_get_visible_instance_count == null) {
            mbind_get_visible_instance_count = try api.createMethod("MultiMesh", "get_visible_instance_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_visible_instance_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setAsBulkArray(self: *const Self, arg_array: *const godot.PoolRealArray) !void {
        if (mbind_set_as_bulk_array == null) {
            mbind_set_as_bulk_array = try api.createMethod("MultiMesh", "set_as_bulk_array");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_array),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_as_bulk_array, base, cargs, result);
    }

    pub fn setColorFormat(self: *const Self, arg_format: i32) !void {
        if (mbind_set_color_format == null) {
            mbind_set_color_format = try api.createMethod("MultiMesh", "set_color_format");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_format),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_color_format, base, cargs, result);
    }

    pub fn setCustomDataFormat(self: *const Self, arg_format: i32) !void {
        if (mbind_set_custom_data_format == null) {
            mbind_set_custom_data_format = try api.createMethod("MultiMesh", "set_custom_data_format");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_format),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_custom_data_format, base, cargs, result);
    }

    pub fn setInstanceColor(self: *const Self, arg_instance: i32, arg_color: *const godot.Color) !void {
        if (mbind_set_instance_color == null) {
            mbind_set_instance_color = try api.createMethod("MultiMesh", "set_instance_color");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_instance),
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_instance_color, base, cargs, result);
    }

    pub fn setInstanceCount(self: *const Self, arg_count: i32) !void {
        if (mbind_set_instance_count == null) {
            mbind_set_instance_count = try api.createMethod("MultiMesh", "set_instance_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_count),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_instance_count, base, cargs, result);
    }

    pub fn setInstanceCustomData(self: *const Self, arg_instance: i32, arg_custom_data: *const godot.Color) !void {
        if (mbind_set_instance_custom_data == null) {
            mbind_set_instance_custom_data = try api.createMethod("MultiMesh", "set_instance_custom_data");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_instance),
            @ptrCast(*const anyopaque, arg_custom_data),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_instance_custom_data, base, cargs, result);
    }

    pub fn setInstanceTransform(self: *const Self, arg_instance: i32, arg_transform: *const godot.Transform) !void {
        if (mbind_set_instance_transform == null) {
            mbind_set_instance_transform = try api.createMethod("MultiMesh", "set_instance_transform");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_instance),
            @ptrCast(*const anyopaque, arg_transform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_instance_transform, base, cargs, result);
    }

    pub fn setInstanceTransform2d(self: *const Self, arg_instance: i32, arg_transform: *const godot.Transform2D) !void {
        if (mbind_set_instance_transform_2d == null) {
            mbind_set_instance_transform_2d = try api.createMethod("MultiMesh", "set_instance_transform_2d");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_instance),
            @ptrCast(*const anyopaque, arg_transform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_instance_transform_2d, base, cargs, result);
    }

    pub fn setMesh(self: *const Self, arg_mesh: *const godot.Mesh) !void {
        if (mbind_set_mesh == null) {
            mbind_set_mesh = try api.createMethod("MultiMesh", "set_mesh");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_mesh),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_mesh, base, cargs, result);
    }

    pub fn setTransformFormat(self: *const Self, arg_format: i32) !void {
        if (mbind_set_transform_format == null) {
            mbind_set_transform_format = try api.createMethod("MultiMesh", "set_transform_format");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_format),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_transform_format, base, cargs, result);
    }

    pub fn setVisibleInstanceCount(self: *const Self, arg_count: i32) !void {
        if (mbind_set_visible_instance_count == null) {
            mbind_set_visible_instance_count = try api.createMethod("MultiMesh", "set_visible_instance_count");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_count),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_visible_instance_count, base, cargs, result);
    }
};