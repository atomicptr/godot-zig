// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_call_native: ?*c_api.godot_method_bind = null;
var mbind_get_library: ?*c_api.godot_method_bind = null;
var mbind_initialize: ?*c_api.godot_method_bind = null;
var mbind_set_library: ?*c_api.godot_method_bind = null;
var mbind_terminate: ?*c_api.godot_method_bind = null;
var mbind_gdnative_constructor: ?fn () ?*c_api.godot_object = null;

pub const GDNative = struct {
    const Self = @This();
    const BaseClass = Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_gdnative_constructor == null) {
            mbind_gdnative_constructor = try api.createConstructor("GDNative");
        }
        return api.createObject(Self, mbind_gdnative_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn callNative(self: *const Self, arg_calling_type: *const godot.String, arg_procedure_name: *const godot.String, arg_arguments: *const godot.Array) !godot.Variant {
        if (mbind_call_native == null) {
            mbind_call_native = try api.createMethod("GDNative", "call_native");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_calling_type),
            @ptrCast(*const anyopaque, arg_procedure_name),
            @ptrCast(*const anyopaque, arg_arguments),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_call_native, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getLibrary(self: *const Self) !godot.GDNativeLibrary {
        if (mbind_get_library == null) {
            mbind_get_library = try api.createMethod("GDNative", "get_library");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_library, base, cargs, result);
        return @ptrCast(*godot.GDNativeLibrary, @alignCast(@alignOf(&godot.GDNativeLibrary), result)).*;
    }

    pub fn initialize(self: *const Self) !bool {
        if (mbind_initialize == null) {
            mbind_initialize = try api.createMethod("GDNative", "initialize");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_initialize, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setLibrary(self: *const Self, arg_library: *const godot.GDNativeLibrary) !void {
        if (mbind_set_library == null) {
            mbind_set_library = try api.createMethod("GDNative", "set_library");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_library),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_library, base, cargs, result);
    }

    pub fn terminate(self: *const Self) !bool {
        if (mbind_terminate == null) {
            mbind_terminate = try api.createMethod("GDNative", "terminate");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_terminate, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }
};