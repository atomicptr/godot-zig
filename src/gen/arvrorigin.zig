// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Spatial = @import("spatial.zig").Spatial;

// method bindings
var mbind_get_world_scale: ?*c_api.godot_method_bind = null;
var mbind_set_world_scale: ?*c_api.godot_method_bind = null;
var mbind_arvrorigin_constructor: ?fn () ?*c_api.godot_object = null;

pub const ARVROrigin = struct {
    const Self = @This();
    const BaseClass = Spatial;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_arvrorigin_constructor == null) {
            mbind_arvrorigin_constructor = try api.createConstructor("ARVROrigin");
        }
        return api.createObject(Self, mbind_arvrorigin_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getWorldScale(self: *const Self) !f32 {
        if (mbind_get_world_scale == null) {
            mbind_get_world_scale = try api.createMethod("ARVROrigin", "get_world_scale");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_world_scale, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn setWorldScale(self: *const Self, arg_world_scale: f32) !void {
        if (mbind_set_world_scale == null) {
            mbind_set_world_scale = try api.createMethod("ARVROrigin", "set_world_scale");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_world_scale),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_world_scale, base, cargs, result);
    }
};