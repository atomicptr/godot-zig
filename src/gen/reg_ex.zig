// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_compile: ?*c_api.godot_method_bind = null;
var mbind_get_group_count: ?*c_api.godot_method_bind = null;
var mbind_get_names: ?*c_api.godot_method_bind = null;
var mbind_get_pattern: ?*c_api.godot_method_bind = null;
var mbind_is_valid: ?*c_api.godot_method_bind = null;
var mbind_search: ?*c_api.godot_method_bind = null;
var mbind_search_all: ?*c_api.godot_method_bind = null;
var mbind_sub: ?*c_api.godot_method_bind = null;
var mbind_reg_ex_constructor: ?fn () ?*c_api.godot_object = null;

pub const RegEx = struct {
    const Self = @This();
    pub const BaseClass = godot.Reference;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_reg_ex_constructor == null) {
            mbind_reg_ex_constructor = try api.createConstructor("RegEx");
        }
        return api.createObject(Self, mbind_reg_ex_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("RegEx", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn compile(self: *const Self, arg_pattern: *const godot.String) !i32 {
        if (mbind_compile == null) {
            mbind_compile = try api.createMethod("RegEx", "compile");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_pattern),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_compile, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getGroupCount(self: *const Self) !i32 {
        if (mbind_get_group_count == null) {
            mbind_get_group_count = try api.createMethod("RegEx", "get_group_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_group_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getNames(self: *const Self) !godot.Array {
        if (mbind_get_names == null) {
            mbind_get_names = try api.createMethod("RegEx", "get_names");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_names, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn getPattern(self: *const Self) !godot.String {
        if (mbind_get_pattern == null) {
            mbind_get_pattern = try api.createMethod("RegEx", "get_pattern");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_pattern, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn isValid(self: *const Self) !bool {
        if (mbind_is_valid == null) {
            mbind_is_valid = try api.createMethod("RegEx", "is_valid");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_valid, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn search(self: *const Self, arg_subject: *const godot.String, arg_offset: i32, arg_end: i32) !godot.RegExMatch {
        if (mbind_search == null) {
            mbind_search = try api.createMethod("RegEx", "search");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_subject),
            @ptrCast(*const anyopaque, *arg_offset),
            @ptrCast(*const anyopaque, *arg_end),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_search, base, cargs, result);
        return @ptrCast(*godot.RegExMatch, @alignCast(@alignOf(&godot.RegExMatch), result)).*;
    }

    pub fn searchAll(self: *const Self, arg_subject: *const godot.String, arg_offset: i32, arg_end: i32) !godot.Array {
        if (mbind_search_all == null) {
            mbind_search_all = try api.createMethod("RegEx", "search_all");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_subject),
            @ptrCast(*const anyopaque, *arg_offset),
            @ptrCast(*const anyopaque, *arg_end),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_search_all, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn sub(self: *const Self, arg_subject: *const godot.String, arg_replacement: *const godot.String, arg_all: bool, arg_offset: i32, arg_end: i32) !godot.String {
        if (mbind_sub == null) {
            mbind_sub = try api.createMethod("RegEx", "sub");
        }

        var result: ?*anyopaque = null;
        var args: [5]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_subject),
            @ptrCast(*const anyopaque, arg_replacement),
            @ptrCast(*const anyopaque, *arg_all),
            @ptrCast(*const anyopaque, *arg_offset),
            @ptrCast(*const anyopaque, *arg_end),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_sub, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }
};