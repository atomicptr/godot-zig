// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_add_blend_point: ?*c_api.godot_method_bind = null;
var mbind_get_blend_point_count: ?*c_api.godot_method_bind = null;
var mbind_get_blend_point_node: ?*c_api.godot_method_bind = null;
var mbind_get_blend_point_position: ?*c_api.godot_method_bind = null;
var mbind_get_max_space: ?*c_api.godot_method_bind = null;
var mbind_get_min_space: ?*c_api.godot_method_bind = null;
var mbind_get_snap: ?*c_api.godot_method_bind = null;
var mbind_get_value_label: ?*c_api.godot_method_bind = null;
var mbind_remove_blend_point: ?*c_api.godot_method_bind = null;
var mbind_set_blend_point_node: ?*c_api.godot_method_bind = null;
var mbind_set_blend_point_position: ?*c_api.godot_method_bind = null;
var mbind_set_max_space: ?*c_api.godot_method_bind = null;
var mbind_set_min_space: ?*c_api.godot_method_bind = null;
var mbind_set_snap: ?*c_api.godot_method_bind = null;
var mbind_set_value_label: ?*c_api.godot_method_bind = null;
var mbind_animation_node_blend_space_1d_constructor: ?fn () ?*c_api.godot_object = null;

pub const AnimationNodeBlendSpace1D = struct {
    const Self = @This();
    pub const BaseClass = godot.AnimationRootNode;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_animation_node_blend_space_1d_constructor == null) {
            mbind_animation_node_blend_space_1d_constructor = try api.createConstructor("AnimationNodeBlendSpace1D");
        }
        return api.createObject(Self, mbind_animation_node_blend_space_1d_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addBlendPoint(self: *const Self, arg_node: *const godot.AnimationRootNode, arg_pos: f32, arg_at_index: i32) !void {
        if (mbind_add_blend_point == null) {
            mbind_add_blend_point = try api.createMethod("AnimationNodeBlendSpace1D", "add_blend_point");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_node),
            @ptrCast(*const anyopaque, *arg_pos),
            @ptrCast(*const anyopaque, *arg_at_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_blend_point, base, cargs, result);
    }

    pub fn getBlendPointCount(self: *const Self) !i32 {
        if (mbind_get_blend_point_count == null) {
            mbind_get_blend_point_count = try api.createMethod("AnimationNodeBlendSpace1D", "get_blend_point_count");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_blend_point_count, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getBlendPointNode(self: *const Self, arg_point: i32) !godot.AnimationRootNode {
        if (mbind_get_blend_point_node == null) {
            mbind_get_blend_point_node = try api.createMethod("AnimationNodeBlendSpace1D", "get_blend_point_node");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_blend_point_node, base, cargs, result);
        return @ptrCast(*godot.AnimationRootNode, @alignCast(@alignOf(&godot.AnimationRootNode), result)).*;
    }

    pub fn getBlendPointPosition(self: *const Self, arg_point: i32) !f32 {
        if (mbind_get_blend_point_position == null) {
            mbind_get_blend_point_position = try api.createMethod("AnimationNodeBlendSpace1D", "get_blend_point_position");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_blend_point_position, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getMaxSpace(self: *const Self) !f32 {
        if (mbind_get_max_space == null) {
            mbind_get_max_space = try api.createMethod("AnimationNodeBlendSpace1D", "get_max_space");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_max_space, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getMinSpace(self: *const Self) !f32 {
        if (mbind_get_min_space == null) {
            mbind_get_min_space = try api.createMethod("AnimationNodeBlendSpace1D", "get_min_space");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_min_space, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getSnap(self: *const Self) !f32 {
        if (mbind_get_snap == null) {
            mbind_get_snap = try api.createMethod("AnimationNodeBlendSpace1D", "get_snap");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_snap, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getValueLabel(self: *const Self) !godot.String {
        if (mbind_get_value_label == null) {
            mbind_get_value_label = try api.createMethod("AnimationNodeBlendSpace1D", "get_value_label");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_value_label, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn removeBlendPoint(self: *const Self, arg_point: i32) !void {
        if (mbind_remove_blend_point == null) {
            mbind_remove_blend_point = try api.createMethod("AnimationNodeBlendSpace1D", "remove_blend_point");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_remove_blend_point, base, cargs, result);
    }

    pub fn setBlendPointNode(self: *const Self, arg_point: i32, arg_node: *const godot.AnimationRootNode) !void {
        if (mbind_set_blend_point_node == null) {
            mbind_set_blend_point_node = try api.createMethod("AnimationNodeBlendSpace1D", "set_blend_point_node");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point),
            @ptrCast(*const anyopaque, arg_node),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_blend_point_node, base, cargs, result);
    }

    pub fn setBlendPointPosition(self: *const Self, arg_point: i32, arg_pos: f32) !void {
        if (mbind_set_blend_point_position == null) {
            mbind_set_blend_point_position = try api.createMethod("AnimationNodeBlendSpace1D", "set_blend_point_position");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_point),
            @ptrCast(*const anyopaque, *arg_pos),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_blend_point_position, base, cargs, result);
    }

    pub fn setMaxSpace(self: *const Self, arg_max_space: f32) !void {
        if (mbind_set_max_space == null) {
            mbind_set_max_space = try api.createMethod("AnimationNodeBlendSpace1D", "set_max_space");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_max_space),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_max_space, base, cargs, result);
    }

    pub fn setMinSpace(self: *const Self, arg_min_space: f32) !void {
        if (mbind_set_min_space == null) {
            mbind_set_min_space = try api.createMethod("AnimationNodeBlendSpace1D", "set_min_space");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_min_space),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_min_space, base, cargs, result);
    }

    pub fn setSnap(self: *const Self, arg_snap: f32) !void {
        if (mbind_set_snap == null) {
            mbind_set_snap = try api.createMethod("AnimationNodeBlendSpace1D", "set_snap");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_snap),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_snap, base, cargs, result);
    }

    pub fn setValueLabel(self: *const Self, arg_text: *const godot.String) !void {
        if (mbind_set_value_label == null) {
            mbind_set_value_label = try api.createMethod("AnimationNodeBlendSpace1D", "set_value_label");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_text),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_value_label, base, cargs, result);
    }
};