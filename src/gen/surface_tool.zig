// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const Reference = @import("reference.zig").Reference;

// method bindings
var mbind_add_bones: ?*c_api.godot_method_bind = null;
var mbind_add_color: ?*c_api.godot_method_bind = null;
var mbind_add_index: ?*c_api.godot_method_bind = null;
var mbind_add_normal: ?*c_api.godot_method_bind = null;
var mbind_add_smooth_group: ?*c_api.godot_method_bind = null;
var mbind_add_tangent: ?*c_api.godot_method_bind = null;
var mbind_add_triangle_fan: ?*c_api.godot_method_bind = null;
var mbind_add_uv: ?*c_api.godot_method_bind = null;
var mbind_add_uv2: ?*c_api.godot_method_bind = null;
var mbind_add_vertex: ?*c_api.godot_method_bind = null;
var mbind_add_weights: ?*c_api.godot_method_bind = null;
var mbind_append_from: ?*c_api.godot_method_bind = null;
var mbind_begin: ?*c_api.godot_method_bind = null;
var mbind_clear: ?*c_api.godot_method_bind = null;
var mbind_commit: ?*c_api.godot_method_bind = null;
var mbind_commit_to_arrays: ?*c_api.godot_method_bind = null;
var mbind_create_from: ?*c_api.godot_method_bind = null;
var mbind_create_from_blend_shape: ?*c_api.godot_method_bind = null;
var mbind_deindex: ?*c_api.godot_method_bind = null;
var mbind_generate_normals: ?*c_api.godot_method_bind = null;
var mbind_generate_tangents: ?*c_api.godot_method_bind = null;
var mbind_index: ?*c_api.godot_method_bind = null;
var mbind_set_material: ?*c_api.godot_method_bind = null;
var mbind_surface_tool_constructor: ?fn () ?*c_api.godot_object = null;

pub const SurfaceTool = struct {
    const Self = @This();
    const BaseClass = Reference;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_surface_tool_constructor == null) {
            mbind_surface_tool_constructor = try api.createConstructor("SurfaceTool");
        }
        return api.createObject(Self, mbind_surface_tool_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn addBones(self: *const Self, arg_bones: *const godot.PoolIntArray) !void {
        if (mbind_add_bones == null) {
            mbind_add_bones = try api.createMethod("SurfaceTool", "add_bones");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_bones),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_bones, base, cargs, result);
    }

    pub fn addColor(self: *const Self, arg_color: *const godot.Color) !void {
        if (mbind_add_color == null) {
            mbind_add_color = try api.createMethod("SurfaceTool", "add_color");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_color),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_color, base, cargs, result);
    }

    pub fn addIndex(self: *const Self, arg_index: i32) !void {
        if (mbind_add_index == null) {
            mbind_add_index = try api.createMethod("SurfaceTool", "add_index");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_index),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_index, base, cargs, result);
    }

    pub fn addNormal(self: *const Self, arg_normal: *const godot.Vector3) !void {
        if (mbind_add_normal == null) {
            mbind_add_normal = try api.createMethod("SurfaceTool", "add_normal");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_normal),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_normal, base, cargs, result);
    }

    pub fn addSmoothGroup(self: *const Self, arg_smooth: bool) !void {
        if (mbind_add_smooth_group == null) {
            mbind_add_smooth_group = try api.createMethod("SurfaceTool", "add_smooth_group");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_smooth),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_smooth_group, base, cargs, result);
    }

    pub fn addTangent(self: *const Self, arg_tangent: *const godot.Plane) !void {
        if (mbind_add_tangent == null) {
            mbind_add_tangent = try api.createMethod("SurfaceTool", "add_tangent");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_tangent),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_tangent, base, cargs, result);
    }

    pub fn addTriangleFan(self: *const Self, arg_vertices: *const godot.PoolVector3Array, arg_uvs: *const godot.PoolVector2Array, arg_colors: *const godot.PoolColorArray, arg_uv2s: *const godot.PoolVector2Array, arg_normals: *const godot.PoolVector3Array, arg_tangents: *const godot.Array) !void {
        if (mbind_add_triangle_fan == null) {
            mbind_add_triangle_fan = try api.createMethod("SurfaceTool", "add_triangle_fan");
        }

        var result: ?*anyopaque = null;
        var args: [6]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_vertices),
            @ptrCast(*const anyopaque, arg_uvs),
            @ptrCast(*const anyopaque, arg_colors),
            @ptrCast(*const anyopaque, arg_uv2s),
            @ptrCast(*const anyopaque, arg_normals),
            @ptrCast(*const anyopaque, arg_tangents),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_triangle_fan, base, cargs, result);
    }

    pub fn addUv(self: *const Self, arg_uv: *const godot.Vector2) !void {
        if (mbind_add_uv == null) {
            mbind_add_uv = try api.createMethod("SurfaceTool", "add_uv");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_uv),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_uv, base, cargs, result);
    }

    pub fn addUv2(self: *const Self, arg_uv2: *const godot.Vector2) !void {
        if (mbind_add_uv2 == null) {
            mbind_add_uv2 = try api.createMethod("SurfaceTool", "add_uv2");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_uv2),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_uv2, base, cargs, result);
    }

    pub fn addVertex(self: *const Self, arg_vertex: *const godot.Vector3) !void {
        if (mbind_add_vertex == null) {
            mbind_add_vertex = try api.createMethod("SurfaceTool", "add_vertex");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_vertex),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_vertex, base, cargs, result);
    }

    pub fn addWeights(self: *const Self, arg_weights: *const godot.PoolRealArray) !void {
        if (mbind_add_weights == null) {
            mbind_add_weights = try api.createMethod("SurfaceTool", "add_weights");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_weights),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_add_weights, base, cargs, result);
    }

    pub fn appendFrom(self: *const Self, arg_existing: *const godot.Mesh, arg_surface: i32, arg_transform: *const godot.Transform) !void {
        if (mbind_append_from == null) {
            mbind_append_from = try api.createMethod("SurfaceTool", "append_from");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_existing),
            @ptrCast(*const anyopaque, *arg_surface),
            @ptrCast(*const anyopaque, arg_transform),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_append_from, base, cargs, result);
    }

    pub fn begin(self: *const Self, arg_primitive: i32) !void {
        if (mbind_begin == null) {
            mbind_begin = try api.createMethod("SurfaceTool", "begin");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_primitive),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_begin, base, cargs, result);
    }

    pub fn clear(self: *const Self) !void {
        if (mbind_clear == null) {
            mbind_clear = try api.createMethod("SurfaceTool", "clear");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_clear, base, cargs, result);
    }

    pub fn commit(self: *const Self, arg_existing: *const godot.ArrayMesh, arg_flags: i32) !godot.ArrayMesh {
        if (mbind_commit == null) {
            mbind_commit = try api.createMethod("SurfaceTool", "commit");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_existing),
            @ptrCast(*const anyopaque, *arg_flags),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_commit, base, cargs, result);
        return @ptrCast(*godot.ArrayMesh, @alignCast(@alignOf(&godot.ArrayMesh), result)).*;
    }

    pub fn commitToArrays(self: *const Self) !godot.Array {
        if (mbind_commit_to_arrays == null) {
            mbind_commit_to_arrays = try api.createMethod("SurfaceTool", "commit_to_arrays");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_commit_to_arrays, base, cargs, result);
        return @ptrCast(*godot.Array, @alignCast(@alignOf(&godot.Array), result)).*;
    }

    pub fn createFrom(self: *const Self, arg_existing: *const godot.Mesh, arg_surface: i32) !void {
        if (mbind_create_from == null) {
            mbind_create_from = try api.createMethod("SurfaceTool", "create_from");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_existing),
            @ptrCast(*const anyopaque, *arg_surface),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_from, base, cargs, result);
    }

    pub fn createFromBlendShape(self: *const Self, arg_existing: *const godot.Mesh, arg_surface: i32, arg_blend_shape: *const godot.String) !void {
        if (mbind_create_from_blend_shape == null) {
            mbind_create_from_blend_shape = try api.createMethod("SurfaceTool", "create_from_blend_shape");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_existing),
            @ptrCast(*const anyopaque, *arg_surface),
            @ptrCast(*const anyopaque, arg_blend_shape),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_create_from_blend_shape, base, cargs, result);
    }

    pub fn deindex(self: *const Self) !void {
        if (mbind_deindex == null) {
            mbind_deindex = try api.createMethod("SurfaceTool", "deindex");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_deindex, base, cargs, result);
    }

    pub fn generateNormals(self: *const Self, arg_flip: bool) !void {
        if (mbind_generate_normals == null) {
            mbind_generate_normals = try api.createMethod("SurfaceTool", "generate_normals");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_flip),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_generate_normals, base, cargs, result);
    }

    pub fn generateTangents(self: *const Self) !void {
        if (mbind_generate_tangents == null) {
            mbind_generate_tangents = try api.createMethod("SurfaceTool", "generate_tangents");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_generate_tangents, base, cargs, result);
    }

    pub fn index(self: *const Self) !void {
        if (mbind_index == null) {
            mbind_index = try api.createMethod("SurfaceTool", "index");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_index, base, cargs, result);
    }

    pub fn setMaterial(self: *const Self, arg_material: *const godot.Material) !void {
        if (mbind_set_material == null) {
            mbind_set_material = try api.createMethod("SurfaceTool", "set_material");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_material),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_material, base, cargs, result);
    }
};