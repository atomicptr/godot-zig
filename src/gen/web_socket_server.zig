// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// base class
const WebSocketMultiplayerPeer = @import("web_socket_multiplayer_peer.zig").WebSocketMultiplayerPeer;

// method bindings
var mbind_disconnect_peer: ?*c_api.godot_method_bind = null;
var mbind_get_bind_ip: ?*c_api.godot_method_bind = null;
var mbind_get_ca_chain: ?*c_api.godot_method_bind = null;
var mbind_get_handshake_timeout: ?*c_api.godot_method_bind = null;
var mbind_get_peer_address: ?*c_api.godot_method_bind = null;
var mbind_get_peer_port: ?*c_api.godot_method_bind = null;
var mbind_get_private_key: ?*c_api.godot_method_bind = null;
var mbind_get_ssl_certificate: ?*c_api.godot_method_bind = null;
var mbind_has_peer: ?*c_api.godot_method_bind = null;
var mbind_is_listening: ?*c_api.godot_method_bind = null;
var mbind_listen: ?*c_api.godot_method_bind = null;
var mbind_set_bind_ip: ?*c_api.godot_method_bind = null;
var mbind_set_ca_chain: ?*c_api.godot_method_bind = null;
var mbind_set_handshake_timeout: ?*c_api.godot_method_bind = null;
var mbind_set_private_key: ?*c_api.godot_method_bind = null;
var mbind_set_ssl_certificate: ?*c_api.godot_method_bind = null;
var mbind_stop: ?*c_api.godot_method_bind = null;
var mbind_web_socket_server_constructor: ?fn () ?*c_api.godot_object = null;

pub const WebSocketServer = struct {
    const Self = @This();
    const BaseClass = WebSocketMultiplayerPeer;

    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_web_socket_server_constructor == null) {
            mbind_web_socket_server_constructor = try api.createConstructor("WebSocketServer");
        }
        return api.createObject(Self, mbind_web_socket_server_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn disconnectPeer(self: *const Self, arg_id: i32, arg_code: i32, arg_reason: *const godot.String) !void {
        if (mbind_disconnect_peer == null) {
            mbind_disconnect_peer = try api.createMethod("WebSocketServer", "disconnect_peer");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
            @ptrCast(*const anyopaque, *arg_code),
            @ptrCast(*const anyopaque, arg_reason),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_disconnect_peer, base, cargs, result);
    }

    pub fn getBindIp(self: *const Self) !godot.String {
        if (mbind_get_bind_ip == null) {
            mbind_get_bind_ip = try api.createMethod("WebSocketServer", "get_bind_ip");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_bind_ip, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getCaChain(self: *const Self) !godot.X509Certificate {
        if (mbind_get_ca_chain == null) {
            mbind_get_ca_chain = try api.createMethod("WebSocketServer", "get_ca_chain");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ca_chain, base, cargs, result);
        return @ptrCast(*godot.X509Certificate, @alignCast(@alignOf(&godot.X509Certificate), result)).*;
    }

    pub fn getHandshakeTimeout(self: *const Self) !f32 {
        if (mbind_get_handshake_timeout == null) {
            mbind_get_handshake_timeout = try api.createMethod("WebSocketServer", "get_handshake_timeout");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_handshake_timeout, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getPeerAddress(self: *const Self, arg_id: i32) !godot.String {
        if (mbind_get_peer_address == null) {
            mbind_get_peer_address = try api.createMethod("WebSocketServer", "get_peer_address");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_peer_address, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getPeerPort(self: *const Self, arg_id: i32) !i32 {
        if (mbind_get_peer_port == null) {
            mbind_get_peer_port = try api.createMethod("WebSocketServer", "get_peer_port");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_peer_port, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn getPrivateKey(self: *const Self) !godot.CryptoKey {
        if (mbind_get_private_key == null) {
            mbind_get_private_key = try api.createMethod("WebSocketServer", "get_private_key");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_private_key, base, cargs, result);
        return @ptrCast(*godot.CryptoKey, @alignCast(@alignOf(&godot.CryptoKey), result)).*;
    }

    pub fn getSslCertificate(self: *const Self) !godot.X509Certificate {
        if (mbind_get_ssl_certificate == null) {
            mbind_get_ssl_certificate = try api.createMethod("WebSocketServer", "get_ssl_certificate");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_ssl_certificate, base, cargs, result);
        return @ptrCast(*godot.X509Certificate, @alignCast(@alignOf(&godot.X509Certificate), result)).*;
    }

    pub fn hasPeer(self: *const Self, arg_id: i32) !bool {
        if (mbind_has_peer == null) {
            mbind_has_peer = try api.createMethod("WebSocketServer", "has_peer");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_id),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_has_peer, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isListening(self: *const Self) !bool {
        if (mbind_is_listening == null) {
            mbind_is_listening = try api.createMethod("WebSocketServer", "is_listening");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_listening, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn listen(self: *const Self, arg_port: i32, arg_protocols: *const godot.PoolStringArray, arg_gd_mp_api: bool) !i32 {
        if (mbind_listen == null) {
            mbind_listen = try api.createMethod("WebSocketServer", "listen");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_port),
            @ptrCast(*const anyopaque, arg_protocols),
            @ptrCast(*const anyopaque, *arg_gd_mp_api),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_listen, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }

    pub fn setBindIp(self: *const Self, arg_arg0: *const godot.String) !void {
        if (mbind_set_bind_ip == null) {
            mbind_set_bind_ip = try api.createMethod("WebSocketServer", "set_bind_ip");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_arg0),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_bind_ip, base, cargs, result);
    }

    pub fn setCaChain(self: *const Self, arg_arg0: *const godot.X509Certificate) !void {
        if (mbind_set_ca_chain == null) {
            mbind_set_ca_chain = try api.createMethod("WebSocketServer", "set_ca_chain");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_arg0),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ca_chain, base, cargs, result);
    }

    pub fn setHandshakeTimeout(self: *const Self, arg_timeout: f32) !void {
        if (mbind_set_handshake_timeout == null) {
            mbind_set_handshake_timeout = try api.createMethod("WebSocketServer", "set_handshake_timeout");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_timeout),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_handshake_timeout, base, cargs, result);
    }

    pub fn setPrivateKey(self: *const Self, arg_arg0: *const godot.CryptoKey) !void {
        if (mbind_set_private_key == null) {
            mbind_set_private_key = try api.createMethod("WebSocketServer", "set_private_key");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_arg0),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_private_key, base, cargs, result);
    }

    pub fn setSslCertificate(self: *const Self, arg_arg0: *const godot.X509Certificate) !void {
        if (mbind_set_ssl_certificate == null) {
            mbind_set_ssl_certificate = try api.createMethod("WebSocketServer", "set_ssl_certificate");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_arg0),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_ssl_certificate, base, cargs, result);
    }

    pub fn stop(self: *const Self) !void {
        if (mbind_stop == null) {
            mbind_stop = try api.createMethod("WebSocketServer", "stop");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_stop, base, cargs, result);
    }
};