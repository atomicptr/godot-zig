// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_display_to_lens: ?*c_api.godot_method_bind = null;
var mbind_get_display_width: ?*c_api.godot_method_bind = null;
var mbind_get_eye_height: ?*c_api.godot_method_bind = null;
var mbind_get_iod: ?*c_api.godot_method_bind = null;
var mbind_get_k1: ?*c_api.godot_method_bind = null;
var mbind_get_k2: ?*c_api.godot_method_bind = null;
var mbind_get_oversample: ?*c_api.godot_method_bind = null;
var mbind_set_display_to_lens: ?*c_api.godot_method_bind = null;
var mbind_set_display_width: ?*c_api.godot_method_bind = null;
var mbind_set_eye_height: ?*c_api.godot_method_bind = null;
var mbind_set_iod: ?*c_api.godot_method_bind = null;
var mbind_set_k1: ?*c_api.godot_method_bind = null;
var mbind_set_k2: ?*c_api.godot_method_bind = null;
var mbind_set_oversample: ?*c_api.godot_method_bind = null;
var mbind_mobile_vrinterface_constructor: ?fn () ?*c_api.godot_object = null;

pub const MobileVRInterface = struct {
    const Self = @This();
    pub const BaseClass = godot.ARVRInterface;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_mobile_vrinterface_constructor == null) {
            mbind_mobile_vrinterface_constructor = try api.createConstructor("MobileVRInterface");
        }
        return api.createObject(Self, mbind_mobile_vrinterface_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getDisplayToLens(self: *const Self) !f32 {
        if (mbind_get_display_to_lens == null) {
            mbind_get_display_to_lens = try api.createMethod("MobileVRInterface", "get_display_to_lens");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_display_to_lens, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getDisplayWidth(self: *const Self) !f32 {
        if (mbind_get_display_width == null) {
            mbind_get_display_width = try api.createMethod("MobileVRInterface", "get_display_width");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_display_width, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getEyeHeight(self: *const Self) !f32 {
        if (mbind_get_eye_height == null) {
            mbind_get_eye_height = try api.createMethod("MobileVRInterface", "get_eye_height");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_eye_height, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getIod(self: *const Self) !f32 {
        if (mbind_get_iod == null) {
            mbind_get_iod = try api.createMethod("MobileVRInterface", "get_iod");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_iod, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getK1(self: *const Self) !f32 {
        if (mbind_get_k1 == null) {
            mbind_get_k1 = try api.createMethod("MobileVRInterface", "get_k1");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_k1, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getK2(self: *const Self) !f32 {
        if (mbind_get_k2 == null) {
            mbind_get_k2 = try api.createMethod("MobileVRInterface", "get_k2");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_k2, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn getOversample(self: *const Self) !f32 {
        if (mbind_get_oversample == null) {
            mbind_get_oversample = try api.createMethod("MobileVRInterface", "get_oversample");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_oversample, base, cargs, result);
        return @ptrCast(*f32, @alignCast(@alignOf(&f32), result)).*;
    }

    pub fn setDisplayToLens(self: *const Self, arg_display_to_lens: f32) !void {
        if (mbind_set_display_to_lens == null) {
            mbind_set_display_to_lens = try api.createMethod("MobileVRInterface", "set_display_to_lens");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_display_to_lens),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_display_to_lens, base, cargs, result);
    }

    pub fn setDisplayWidth(self: *const Self, arg_display_width: f32) !void {
        if (mbind_set_display_width == null) {
            mbind_set_display_width = try api.createMethod("MobileVRInterface", "set_display_width");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_display_width),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_display_width, base, cargs, result);
    }

    pub fn setEyeHeight(self: *const Self, arg_eye_height: f32) !void {
        if (mbind_set_eye_height == null) {
            mbind_set_eye_height = try api.createMethod("MobileVRInterface", "set_eye_height");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_eye_height),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_eye_height, base, cargs, result);
    }

    pub fn setIod(self: *const Self, arg_iod: f32) !void {
        if (mbind_set_iod == null) {
            mbind_set_iod = try api.createMethod("MobileVRInterface", "set_iod");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_iod),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_iod, base, cargs, result);
    }

    pub fn setK1(self: *const Self, arg_k: f32) !void {
        if (mbind_set_k1 == null) {
            mbind_set_k1 = try api.createMethod("MobileVRInterface", "set_k1");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_k),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_k1, base, cargs, result);
    }

    pub fn setK2(self: *const Self, arg_k: f32) !void {
        if (mbind_set_k2 == null) {
            mbind_set_k2 = try api.createMethod("MobileVRInterface", "set_k2");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_k),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_k2, base, cargs, result);
    }

    pub fn setOversample(self: *const Self, arg_oversample: f32) !void {
        if (mbind_set_oversample == null) {
            mbind_set_oversample = try api.createMethod("MobileVRInterface", "set_oversample");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_oversample),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_oversample, base, cargs, result);
    }
};