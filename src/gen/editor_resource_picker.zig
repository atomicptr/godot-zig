// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_can_drop_data_fw: ?*c_api.godot_method_bind = null;
var mbind_drop_data_fw: ?*c_api.godot_method_bind = null;
var mbind_get_allowed_types: ?*c_api.godot_method_bind = null;
var mbind_get_base_type: ?*c_api.godot_method_bind = null;
var mbind_get_drag_data_fw: ?*c_api.godot_method_bind = null;
var mbind_get_edited_resource: ?*c_api.godot_method_bind = null;
var mbind_is_editable: ?*c_api.godot_method_bind = null;
var mbind_is_toggle_mode: ?*c_api.godot_method_bind = null;
var mbind_set_base_type: ?*c_api.godot_method_bind = null;
var mbind_set_editable: ?*c_api.godot_method_bind = null;
var mbind_set_edited_resource: ?*c_api.godot_method_bind = null;
var mbind_set_toggle_mode: ?*c_api.godot_method_bind = null;
var mbind_set_toggle_pressed: ?*c_api.godot_method_bind = null;
var mbind_editor_resource_picker_constructor: ?fn () ?*c_api.godot_object = null;

pub const EditorResourcePicker = struct {
    const Self = @This();
    pub const BaseClass = godot.HBoxContainer;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind_editor_resource_picker_constructor == null) {
            mbind_editor_resource_picker_constructor = try api.createConstructor("EditorResourcePicker");
        }
        return api.createObject(Self, mbind_editor_resource_picker_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn canDropDataFw(self: *const Self, arg_position: *const godot.Vector2, arg_data: *const godot.Variant, arg_from: *const godot.Control) !bool {
        if (mbind_can_drop_data_fw == null) {
            mbind_can_drop_data_fw = try api.createMethod("EditorResourcePicker", "can_drop_data_fw");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
            @ptrCast(*const anyopaque, arg_data),
            @ptrCast(*const anyopaque, arg_from),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_can_drop_data_fw, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn dropDataFw(self: *const Self, arg_position: *const godot.Vector2, arg_data: *const godot.Variant, arg_from: *const godot.Control) !void {
        if (mbind_drop_data_fw == null) {
            mbind_drop_data_fw = try api.createMethod("EditorResourcePicker", "drop_data_fw");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
            @ptrCast(*const anyopaque, arg_data),
            @ptrCast(*const anyopaque, arg_from),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_drop_data_fw, base, cargs, result);
    }

    pub fn getAllowedTypes(self: *const Self) !godot.PoolStringArray {
        if (mbind_get_allowed_types == null) {
            mbind_get_allowed_types = try api.createMethod("EditorResourcePicker", "get_allowed_types");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_allowed_types, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn getBaseType(self: *const Self) !godot.String {
        if (mbind_get_base_type == null) {
            mbind_get_base_type = try api.createMethod("EditorResourcePicker", "get_base_type");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_base_type, base, cargs, result);
        return @ptrCast(*godot.String, @alignCast(@alignOf(&godot.String), result)).*;
    }

    pub fn getDragDataFw(self: *const Self, arg_position: *const godot.Vector2, arg_from: *const godot.Control) !godot.Variant {
        if (mbind_get_drag_data_fw == null) {
            mbind_get_drag_data_fw = try api.createMethod("EditorResourcePicker", "get_drag_data_fw");
        }

        var result: ?*anyopaque = null;
        var args: [2]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_position),
            @ptrCast(*const anyopaque, arg_from),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_drag_data_fw, base, cargs, result);
        return @ptrCast(*godot.Variant, @alignCast(@alignOf(&godot.Variant), result)).*;
    }

    pub fn getEditedResource(self: *const Self) !godot.Resource {
        if (mbind_get_edited_resource == null) {
            mbind_get_edited_resource = try api.createMethod("EditorResourcePicker", "get_edited_resource");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_edited_resource, base, cargs, result);
        return @ptrCast(*godot.Resource, @alignCast(@alignOf(&godot.Resource), result)).*;
    }

    pub fn isEditable(self: *const Self) !bool {
        if (mbind_is_editable == null) {
            mbind_is_editable = try api.createMethod("EditorResourcePicker", "is_editable");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_editable, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn isToggleMode(self: *const Self) !bool {
        if (mbind_is_toggle_mode == null) {
            mbind_is_toggle_mode = try api.createMethod("EditorResourcePicker", "is_toggle_mode");
        }

        var result: ?*anyopaque = null;
        var cargs: ?*?*const anyopaque = null;

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_is_toggle_mode, base, cargs, result);
        return @ptrCast(*bool, @alignCast(@alignOf(&bool), result)).*;
    }

    pub fn setBaseType(self: *const Self, arg_base_type: *const godot.String) !void {
        if (mbind_set_base_type == null) {
            mbind_set_base_type = try api.createMethod("EditorResourcePicker", "set_base_type");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_base_type),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_base_type, base, cargs, result);
    }

    pub fn setEditable(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_editable == null) {
            mbind_set_editable = try api.createMethod("EditorResourcePicker", "set_editable");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_editable, base, cargs, result);
    }

    pub fn setEditedResource(self: *const Self, arg_resource: *const godot.Resource) !void {
        if (mbind_set_edited_resource == null) {
            mbind_set_edited_resource = try api.createMethod("EditorResourcePicker", "set_edited_resource");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_resource),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_edited_resource, base, cargs, result);
    }

    pub fn setToggleMode(self: *const Self, arg_enable: bool) !void {
        if (mbind_set_toggle_mode == null) {
            mbind_set_toggle_mode = try api.createMethod("EditorResourcePicker", "set_toggle_mode");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_enable),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_toggle_mode, base, cargs, result);
    }

    pub fn setTogglePressed(self: *const Self, arg_pressed: bool) !void {
        if (mbind_set_toggle_pressed == null) {
            mbind_set_toggle_pressed = try api.createMethod("EditorResourcePicker", "set_toggle_pressed");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, *arg_pressed),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_set_toggle_pressed, base, cargs, result);
    }
};