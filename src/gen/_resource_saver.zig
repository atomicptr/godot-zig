// This file was automatically generated by godot-zig, please do not edit it.
const godot = @import("__import.zig");
const api = @import("../api.zig");
const c_api = @import("../c_api.zig");

// method bindings
var mbind_get_recognized_extensions: ?*c_api.godot_method_bind = null;
var mbind_save: ?*c_api.godot_method_bind = null;
var mbind__resource_saver_constructor: ?fn () ?*c_api.godot_object = null;

pub const _ResourceSaver = struct {
    const Self = @This();
    pub const BaseClass = godot.Object;

    // Pointers to zero-sized types are also zero-sized,
    // therefore we need to add some data to make it not zero-sized :)
    _data: u8,
    base: *BaseClass,

    pub fn init() !*Self {
        if (mbind__resource_saver_constructor == null) {
            mbind__resource_saver_constructor = try api.createConstructor("_ResourceSaver");
        }
        return api.createObject(Self, mbind__resource_saver_constructor.?);
    }

    pub fn deinit(self: *Self) void {
        _ = api.core.?.godot_object_destroy.?(@ptrCast(*c_api.godot_object, self));
    }

    pub fn getRecognizedExtensions(self: *const Self, arg_type: *const godot.Resource) !godot.PoolStringArray {
        if (mbind_get_recognized_extensions == null) {
            mbind_get_recognized_extensions = try api.createMethod("_ResourceSaver", "get_recognized_extensions");
        }

        var result: ?*anyopaque = null;
        var args: [1]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_type),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_get_recognized_extensions, base, cargs, result);
        return @ptrCast(*godot.PoolStringArray, @alignCast(@alignOf(&godot.PoolStringArray), result)).*;
    }

    pub fn save(self: *const Self, arg_path: *const godot.String, arg_resource: *const godot.Resource, arg_flags: i32) !i32 {
        if (mbind_save == null) {
            mbind_save = try api.createMethod("_ResourceSaver", "save");
        }

        var result: ?*anyopaque = null;
        var args: [3]?*const anyopaque = []?*const anyopaque {
            @ptrCast(*const anyopaque, arg_path),
            @ptrCast(*const anyopaque, arg_resource),
            @ptrCast(*const anyopaque, *arg_flags),
        };

        var cargs: ?*?*const anyopaque = &args[0];

        const base = @ptrCast(*c_api.godot_object, @alignCast(@alignOf(*c_api.godot_object), self.base));
        _ = api.core.?.godot_method_bind_ptrcall.?(mbind_save, base, cargs, result);
        return @ptrCast(*i32, @alignCast(@alignOf(&i32), result)).*;
    }
};